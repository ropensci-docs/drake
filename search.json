[{"path":"https://docs.ropensci.org/drake/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/drake/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, encourage participation.","code":""},{"path":"https://docs.ropensci.org/drake/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"environment collaboration friendly, inclusive, respectful, safe everyone, participants must obey repository’s code conduct.","code":""},{"path":"https://docs.ropensci.org/drake/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"drake thrives suggestions, questions, bug reports submit issue tracker. posting, please search open closed issues help us avoid duplication. Usage questions welcome, may also wish post Stack Overflow drake-r-package tag. considerate maintainer’s time make easy possible troubleshoot problems identify. Read learn minimal reproducible examples. Format code according tidyverse style guide make easier others read.","code":""},{"path":"https://docs.ropensci.org/drake/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"like work code documentation, please fork repository, make changes fork, submit pull request. discuss work hopefully merge project.","code":""},{"path":"https://docs.ropensci.org/drake/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Please explain context purpose contribution list changes made code base documentation.","code":""},{"path":"https://docs.ropensci.org/drake/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Summary","text":"Ref: #","code":""},{"path":"https://docs.ropensci.org/drake/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"Summary","text":"understand agree code conduct. listed substantial changes development news. added testthat unit tests tests/testthat new functionality. pull request draft.","code":""},{"path":"https://docs.ropensci.org/drake/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Alex Axthelm. Contributor. Jasper Clarkberg. Contributor. Kirill Müller. Contributor. Ben Bond-Lamberty. Contributor. Tristan Mahr. Contributor. Miles McBain. Contributor. Noam Ross. Contributor. Ellis Hughes. Contributor. Matthew Mark Strasiotto. Contributor. Ben Marwick. Reviewer. Peter Slaughter. Reviewer. Eli Lilly Company. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/drake/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"William Michael Landau, (2018). drake R package: pipeline toolkit reproducibility high-performance computing. Journal Open Source Software, 3(21), 550, https://doi.org/10.21105/joss.00550","code":"@Article{,   title = {The drake R package: a pipeline toolkit for reproducibility and high-performance computing},   author = {William Michael Landau},   journal = {Journal of Open Source Software},   year = {2018},   volume = {3},   number = {21},   url = {https://doi.org/10.21105/joss.00550}, }"},{"path":"https://docs.ropensci.org/drake/index.html","id":"drake-is-superseded-consider-targets-instead","dir":"","previous_headings":"","what":"A Pipeline Toolkit for Reproducible Computation at Scale","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"2021-01-21, drake superseded. targets R package long-term successor drake, robust easier use. Please visit https://books.ropensci.org/targets/drake.html full context advice transitioning.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"the-drake-r-package-","dir":"","previous_headings":"","what":"The drake R package","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Data analysis can slow. round scientific computation can take several minutes, hours, even days complete. finishes, update code data, hard-earned results may longer valid. much valuable output can keep, much need update? much runtime must endure ? projects R, drake package can help. analyzes workflow, skips steps --date results, orchestrates rest optional distributed computing. end, drake provides evidence results match underlying code data, increases ability trust research.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/index.html","id":"that-feeling-of-workflowing-miles-mcbain","dir":"","previous_headings":"","what":"That Feeling of Workflowing (Miles McBain)","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"(Miles McBain; venue, resources)","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"ropensci-community-call","dir":"","previous_headings":"","what":"rOpenSci Community Call","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"(resources)","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"what-gets-done-stays-done","dir":"","previous_headings":"","what":"What gets done stays done.","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"many data science projects follow Sisyphean loop: Launch code. Wait runs. Discover issue. Rerun scratch. projects long runtimes, process gets tedious. drake, can automatically Launch parts changed since last time. Skip rest.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"how-it-works","dir":"","previous_headings":"","what":"How it works","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"set project, load packages, load custom functions, check supporting files (optional), plan going . far, just setting stage. Use make() r_make() real work. Targets built correct order regardless row order plan. Except files like report.html, output stored hidden .drake/ folder. Reading back easy. may look back work see room improvement, ’s good! whole point drake help go back change things quickly painlessly. example, forgot give histogram bin width.  let’s fix plotting function. drake knows results affected.  next make() just builds hist report.html. point wasting time data model.","code":"library(drake) library(dplyr) library(ggplot2) library(tidyr) #>  #> Attaching package: 'tidyr' #> The following objects are masked from 'package:drake': #>  #>     expand, gather create_plot <- function(data) {   ggplot(data) +     geom_histogram(aes(x = Ozone)) +     theme_gray(24) } # Get the files with drake_example(\"main\"). file.exists(\"raw_data.xlsx\") #> [1] TRUE file.exists(\"report.Rmd\") #> [1] TRUE plan <- drake_plan(   raw_data = readxl::read_excel(file_in(\"raw_data.xlsx\")),   data = raw_data %>%     mutate(Ozone = replace_na(Ozone, mean(Ozone, na.rm = TRUE))),   hist = create_plot(data),   fit = lm(Ozone ~ Wind + Temp, data),   report = rmarkdown::render(     knitr_in(\"report.Rmd\"),     output_file = file_out(\"report.html\"),     quiet = TRUE   ) )  plan #> # A tibble: 5 x 2 #>   target   command                                                               #>   <chr>    <expr_lst>                                                            #> 1 raw_data readxl::read_excel(file_in(\"raw_data.xlsx\"))                        … #> 2 data     raw_data %>% mutate(Ozone = replace_na(Ozone, mean(Ozone, na.rm = TR… #> 3 hist     create_plot(data)                                                   … #> 4 fit      lm(Ozone ~ Wind + Temp, data)                                       … #> 5 report   rmarkdown::render(knitr_in(\"report.Rmd\"), output_file = file_out(\"re… make(plan) # See also r_make(). #> ▶ target raw_data #> ▶ target data #> ▶ target fit #> ▶ target hist #> ▶ target report readd(data) # See also loadd(). #> # A tibble: 153 x 6 #>    Ozone Solar.R  Wind  Temp Month   Day #>    <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  41       190   7.4    67     5     1 #>  2  36       118   8      72     5     2 #>  3  12       149  12.6    74     5     3 #>  4  18       313  11.5    62     5     4 #>  5  42.1      NA  14.3    56     5     5 #>  6  28        NA  14.9    66     5     6 #>  7  23       299   8.6    65     5     7 #>  8  19        99  13.8    59     5     8 #>  9   8        19  20.1    61     5     9 #> 10  42.1     194   8.6    69     5    10 #> # … with 143 more rows readd(hist) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. create_plot <- function(data) {   ggplot(data) +     geom_histogram(aes(x = Ozone), binwidth = 10) +     theme_gray(24) } vis_drake_graph(plan) # See also r_vis_drake_graph(). make(plan) # See also r_make(). #> ▶ target hist #> ▶ target report loadd(hist) hist"},{"path":"https://docs.ropensci.org/drake/index.html","id":"reproducibility-with-confidence","dir":"","previous_headings":"","what":"Reproducibility with confidence","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"R community emphasizes reproducibility. Traditional themes include scientific replicability, literate programming knitr, version control git. internal consistency important . Reproducibility carries promise output matches code data say used. exception non-default triggers hasty mode, drake strives keep promise.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"evidence","dir":"","previous_headings":"","what":"Evidence","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Suppose reviewing someone else’s data analysis project reproducibility. scrutinize carefully, checking datasets available documentation thorough. re-create results without help original author? drake, quick easy find . everything already date, tangible evidence reproducibility. Even though re-create results, know results recreatable. faithfully show code producing. Given right package environment system configuration, everything need reproduce output .","code":"make(plan) # See also r_make(). #> ℹ unloading 1 targets from environment #> ✓ All targets are already up to date.  outdated(plan) # See also r_outdated(). #> character(0)"},{"path":"https://docs.ropensci.org/drake/index.html","id":"ease","dir":"","previous_headings":"","what":"Ease","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"comes time actually rerun entire project, much confidence. Starting scratch trivially easy.","code":"clean()    # Remove the original author's results. make(plan) # Independently re-create the results from the code and input data. #> ▶ target raw_data #> ▶ target data #> ▶ target fit #> ▶ target hist #> ▶ target report"},{"path":"https://docs.ropensci.org/drake/index.html","id":"big-data-efficiency","dir":"","previous_headings":"","what":"Big data efficiency","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Select specialized data formats increase speed reduce memory consumption. version 7.5.2.9000 , available formats “fst” data frames (example ) “keras” Keras models (example ).","code":"library(drake) n <- 1e8 # Each target is 1.6 GB in memory. plan <- drake_plan(   data_fst = target(     data.frame(x = runif(n), y = runif(n)),     format = \"fst\"   ),   data_old = data.frame(x = runif(n), y = runif(n)) ) make(plan) #> target data_fst #> target data_old build_times(type = \"build\") #> # A tibble: 2 x 4 #>   target   elapsed              user                 system     #>   <chr>    <Duration>           <Duration>           <Duration> #> 1 data_fst 13.93s               37.562s              7.954s     #> 2 data_old 184s (~3.07 minutes) 177s (~2.95 minutes) 4.157s"},{"path":"https://docs.ropensci.org/drake/index.html","id":"history-and-provenance","dir":"","previous_headings":"","what":"History and provenance","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"version 7.5.2, drake tracks history provenance targets: built, built , built , arguments used function calls, get data back. (Disable make(history = FALSE)) Remarks: quiet column appears one drake_plan() commands knit(quiet = TRUE). hash column identifies previous versions targets. long exists TRUE, can recover old data. Advanced: use make(cache_log_file = TRUE) put cache log file version control, can match hashes drake_history() git commit history code. Let’s use history recover oldest histogram.","code":"history <- drake_history(analyze = TRUE) history #> # A tibble: 12 x 11 #>    target current built exists hash  command   seed runtime na.rm quiet #>    <chr>  <lgl>   <chr> <lgl>  <chr> <chr>    <int>   <dbl> <lgl> <lgl> #>  1 data   TRUE    2020… TRUE   11e2… \"raw_d… 1.29e9 0.011   TRUE  NA    #>  2 data   TRUE    2020… TRUE   11e2… \"raw_d… 1.29e9 0.00400 TRUE  NA    #>  3 fit    TRUE    2020… TRUE   3c87… \"lm(Oz… 1.11e9 0.006   NA    NA    #>  4 fit    TRUE    2020… TRUE   3c87… \"lm(Oz… 1.11e9 0.002   NA    NA    #>  5 hist   FALSE   2020… TRUE   88ae… \"creat… 2.10e8 0.011   NA    NA    #>  6 hist   TRUE    2020… TRUE   0304… \"creat… 2.10e8 0.003   NA    NA    #>  7 hist   TRUE    2020… TRUE   0304… \"creat… 2.10e8 0.009   NA    NA    #>  8 raw_d… TRUE    2020… TRUE   855d… \"readx… 1.20e9 0.02    NA    NA    #>  9 raw_d… TRUE    2020… TRUE   855d… \"readx… 1.20e9 0.0330  NA    NA    #> 10 report TRUE    2020… TRUE   5504… \"rmark… 1.30e9 1.31    NA    TRUE  #> 11 report TRUE    2020… TRUE   5504… \"rmark… 1.30e9 0.413   NA    TRUE  #> 12 report TRUE    2020… TRUE   5504… \"rmark… 1.30e9 0.475   NA    TRUE  #> # … with 1 more variable: output_file <chr> hash <- history %>%   filter(target == \"hist\") %>%   pull(hash) %>%   head(n = 1) cache <- drake_cache() cache$get_value(hash) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://docs.ropensci.org/drake/index.html","id":"independent-replication","dir":"","previous_headings":"","what":"Independent replication","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"even evidence confidence, can invest time independently replicate original code base necessary. point, relied basic drake functions make(), may needed peek substantive author-defined code advance. case, can stay usefully ignorant reimplement original author’s methodology. words, drake potentially improve integrity independent replication.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"readability-and-transparency","dir":"","previous_headings":"","what":"Readability and transparency","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Ideally, independent observers able read code understand . drake helps several ways. drake plan explicitly outlines steps analysis, vis_drake_graph() visualizes steps depend . drake takes care parallel scheduling high-performance computing (HPC) . means HPC code longer tangled code actually expresses ideas. can generate large collections targets without necessarily changing code base imported functions, another nice separation concepts execution workflow","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"scale-up-and-out","dir":"","previous_headings":"","what":"Scale up and out.","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"every project can complete single R session laptop. projects need speed computing power. require local processor cores, need large high-performance computing systems. parallel computing hard. tables figures depend analysis results, analyses depend datasets, tasks must finish others even begin. drake knows . Parallelism implicit automatic. See high-performance computing guide details.","code":"# Use the spare cores on your local machine. make(plan, jobs = 4)  # Or scale up to a supercomputer. drake_hpc_template_file(\"slurm_clustermq.tmpl\") # https://slurm.schedmd.com/ options(   clustermq.scheduler = \"clustermq\",   clustermq.template = \"slurm_clustermq.tmpl\" ) make(plan, parallelism = \"clustermq\", jobs = 4)"},{"path":"https://docs.ropensci.org/drake/index.html","id":"with-docker","dir":"","previous_headings":"","what":"With Docker","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"drake Docker compatible complementary. examples run drake inside Docker image. drake-gitlab-docker-example: small pedagogical example workflow leverages drake, Docker, GitLab, continuous integration reproducible analysis pipeline. Created Noam Ross. pleurosoriopsis: workflow supports Ebihara et al. 2019. “Growth Dynamics Independent Gametophytes Pleurorosiopsis makinoi (Polypodiaceae)” Bulletin National Science Museum Series B (Botany) 45:77-86.. Created Joel Nitta. Alternatively, possible run drake outside Docker use future package send targets Docker image. drake’s Docker-psock example demonstrates . Download code drake_example(\"Docker-psock\").","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"can choose among different versions drake. CRAN release often lags behind online manual may fewer bugs.","code":"# Install the latest stable release from CRAN. install.packages(\"drake\")  # Alternatively, install the development version from GitHub. install.packages(\"devtools\") library(devtools) install_github(\"ropensci/drake\")"},{"path":"https://docs.ropensci.org/drake/index.html","id":"function-reference","dir":"","previous_headings":"","what":"Function reference","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"reference section lists available functions. important ones. drake_plan(): create workflow data frame (like my_plan). make(): build project. drake_history(): show built, built , function arguments used. r_make(): launch fresh callr::r() process build project. Called interactive R session, r_make() reproducible make(). loadd(): load one built targets R session. readd(): read return built target. vis_drake_graph(): show interactive visual network representation workflow. recoverable(): targets can salvage using make(recover =     TRUE) (experimental). outdated(): see targets built next make(). deps_code(): check dependencies command function. drake_failed(): list targets failed build last make(). diagnose(): return full context build, including errors, warnings, messages.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/index.html","id":"core-concepts","dir":"","previous_headings":"","what":"Core concepts","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"following resources explain drake can works. workshop https://github.com/wlandau/learndrake devotes particular attention drake’s mental model. user manual drakeplanner, R/Shiny app help learn drake create new projects. Run locally drakeplanner::drakeplanner() access https://wlandau.shinyapps.io/drakeplanner. `https://github.com/wlandau/learndrake, R package teaching extended drake workshop. contains notebooks, slides, Shiny apps, latter two publicly deployed. See https://github.com/wlandau/learndrake/blob/main/README.md instructions links.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"in-practice","dir":"","previous_headings":"","what":"In practice","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Miles McBain’s excellent blog post explains motivating factors practical issues {drake} solves projects, set project quickly painlessly possible, overcome common obstacles. Miles’ dflow package generates file structure boilerplate drake project. thorough alternative drake::use_drake(). drake heavily function-oriented design, Miles’ fnmate package automatically generates boilerplate code docstrings functions mention drake plans.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"reference website. official repository example code. Download example workflow drake_example(). Presentations workshops Landau, Kirill Müller, Amanda Dobbyn, Karthik Ram, Sina Rüeger, Christine Stawitz, others. See specific links https://books.ropensci.org/drake/index.html#presentations FAQ page, links appropriately-labeled issues GitHub.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use cases","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"official rOpenSci use cases associated discussion threads describe applications drake real world. Many use cases linked drake tag rOpenSci discussion forum. additional applications drake real-world projects. efcaguab/demografia-del-voto efcaguab/great-white-shark-nsw IndianaCHE/Detailed-SSP-Reports joelnitta/pleurosoriopsis pat-s/pathogen-modeling sol-eng/tensorflow-w-r tiernanmartin/home--hope","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"drake-projects-as-r-packages","dir":"","previous_headings":"","what":"drake projects as R packages","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"folks like structure drake workflows R packages. Examples . analysis packages, sure call drake::expose_imports(yourPackage) drake can watch package’s functions changes rebuild downstream targets accordingly. b-rodrigues/coolmlproject tiernanmartin/drakepkg","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"help-and-troubleshooting","dir":"","previous_headings":"","what":"Help and troubleshooting","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"following resources document many known issues challenges. Frequently-asked questions. Debugging testing drake projects known issues (please search open closed ones). still trouble, please submit new issue bug report feature request, along minimal reproducible example appropriate. GitHub issue tracker mainly intended bug reports feature requests. questions usage etc. also highly encouraged, may alternatively wish post Stack Overflow use drake-r-package tag.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Development community effort, encourage participation. Please read CONTRIBUTING.md details.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"similar-work","dir":"","previous_headings":"","what":"Similar work","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"drake enhances reproducibility high-performance computing, respects. Literate programming, local library managers, containerization, strict session managers offer robust solutions respective domains. problems drake solve, stands shoulders giants came .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/index.html","id":"gnu-make","dir":"","previous_headings":"Pipeline tools","what":"GNU Make","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"original idea time-saving reproducible build system extends back least far GNU Make, still aids work data scientists well original user base complied language programmers. fact, name “drake” stands “Data Frames R Make”. Make used widely reproducible research. examples Karl Broman’s website. Bostock, Mike (2013). “map flowlines NHDPlus.” https://github.com/mbostock/us-rivers. Powered Makefile https://github.com/mbostock/us-rivers/blob/master/Makefile. Broman, Karl W (2012). “Halotype Probabilities Advanced Intercross Populations.” G3 2(2), 199-202.Powered Makefile https://github.com/kbroman/ailProbPaper/blob/master/Makefile. Broman, Karl W (2012). “Genotype Probabilities Intermediate Generations Construction Recombinant Inbred Lines.” *Genetics 190(2), 403-412. Powered Makefile https://github.com/kbroman/preCCProbPaper/blob/master/Makefile. Broman, Karl W Kim, Sungjin Sen, Saunak Ane, Cecile Payseur, Bret (2012). “Mapping Quantitative Trait Loci onto Phylogenetic Tree.” Genetics 192(2), 267-279. Powered Makefile https://github.com/kbroman/phyloQTLpaper/blob/master/Makefile. Whereas GNU Make language-agnostic, drake fundamentally designed R. Instead Makefile, drake supports R-friendly domain-specific language declaring targets. Targets GNU Make files, whereas targets drake arbitrary variables memory. (drake opt-support files via file_out(), file_in(), knitr_in().) drake caches objects storage system R users rarely think output files.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"remake","dir":"","previous_headings":"Pipeline tools","what":"Remake","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"remake longer maintained, founding design goals principles live drake. fact, drake direct re-imagining remake enhanced scalability, reproducibility, high-performance computing, visualization, documentation.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"factuals-drake","dir":"","previous_headings":"Pipeline tools","what":"Factual’s Drake","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Factual’s Drake similar concept, development effort completely unrelated drake R package.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"other-pipeline-tools","dir":"","previous_headings":"Pipeline tools","what":"Other pipeline tools","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"countless successful pipeline toolkits. drake package distinguishes R-focused approach, Tidyverse-friendly interface, thorough selection parallel computing technologies scheduling algorithms.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"memoization","dir":"","previous_headings":"","what":"Memoization","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Memoization strategic caching return values functions. lightweight approach core problem drake pipeline tools trying solve. Every time memoized function called new set arguments, return value saved future use. Later, whenever function called arguments, previous return value salvaged, function call skipped save time. memoise package primary implementation memoization R. Memoization saves time small projects, arguably go far enough large reproducible pipelines. reality, return value function depends function body arguments, also nested functions global variables, dependencies dependencies, upstream. drake tracks deeper context, memoise .","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"literate-programming","dir":"","previous_headings":"","what":"Literate programming","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Literate programming practice narrating code plain vernacular. goal communicate research process clearly, transparently, reproducibly. Whereas commented code still mostly code, literate knitr / R Markdown reports can become websites, presentation slides, lecture notes, serious scientific manuscripts, even books.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"knitr-and-r-markdown","dir":"","previous_headings":"Literate programming","what":"knitr and R Markdown","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"drake knitr symbiotic. drake’s job manage large computation orchestrate demanding tasks complex data analysis pipeline. knitr’s job communicate expensive results drake computes . knitr / R Markdown reports small pieces overarching drake pipeline. focus communication, little computation possible. insert knitr report drake pipeline, use knitr_in() function inside drake plan, use loadd() readd() refer targets report . See example .","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"version-control","dir":"","previous_headings":"Literate programming","what":"Version control","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"drake version control tool. However, fully compatible git, svn, similar software. fact, good practice use git alongside drake reproducible workflows. However, data poses challenge. datasets created make() can get large numerous, recommended put .drake/ cache .drake_history/ logs version control. Instead, recommended use data storage solution DropBox OSF.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"containerization-and-r-package-environments","dir":"","previous_headings":"Literate programming","what":"Containerization and R package environments","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"drake track R packages system dependencies changes. Instead, defers tools like Docker, Singularity, renv, packrat, create self-contained portable environments reproducibly isolate ship data analysis projects. drake fully compatible tools.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"workflowr","dir":"","previous_headings":"Literate programming","what":"workflowr","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"workflowr package project manager focuses literate programming, sharing web, file organization, version control. brand reproducibility transparency, communication, discoverability. example workflowr drake working together, see machine learning project Patrick Schratz.","code":""},{"path":"https://docs.ropensci.org/drake/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"","code":"citation(\"drake\") #>  #> To cite drake in publications use: #>  #>   William Michael Landau, (2018). The drake R package: a pipeline #>   toolkit for reproducibility and high-performance computing. Journal #>   of Open Source Software, 3(21), 550, #>   https://doi.org/10.21105/joss.00550 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {The drake R package: a pipeline toolkit for reproducibility and high-performance computing}, #>     author = {William Michael Landau}, #>     journal = {Journal of Open Source Software}, #>     year = {2018}, #>     volume = {3}, #>     number = {21}, #>     url = {https://doi.org/10.21105/joss.00550}, #>   }"},{"path":"https://docs.ropensci.org/drake/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"A Pipeline Toolkit for Reproducible Computation at Scale","text":"Special thanks Jarad Niemi, advisor graduate school, first introducing idea Makefiles research. originally set path led drake. Many thanks Julia Lowndes, Ben Marwick, Peter Slaughter reviewing drake rOpenSci, Maëlle Salmon active involvement editor. Thanks also following people contributing early development. Alex Axthelm Chan-Yub Park Daniel Falster Eric Nantz Henrik Bengtsson Ian Watson Jasper Clarkberg Kendon Bell Kirill Müller Michael Schubert Credit images attributed .","code":""},{"path":"https://docs.ropensci.org/drake/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"drake R package [@drake] workflow manager computational engine data science projects. primary objective keep results date underlying code data. runs project, drake detects pre-existing output refreshes pieces outdated missing. every runthrough starts scratch, final answers reproducible. user-friendly R-focused interface, comprehensive documentation, extensive implicit parallel computing support, drake surpasses analogous functionality similar tools Make [@Make], remake [@remake], memoise [@memoise], knitr [@knitr]. reproducible research, drake’s role provide tangible evidence project’s results re-creatable. drake quickly detects code, data, output synchronized. words, drake helps determine starting materials produce expected output project start run scratch. approach decreases time effort takes evaluate research projects reproducibility. Regarding high-performance computing, drake interfaces variety technologies scheduling algorithms deploy steps data analysis project. , parallel computing implicit. words, drake constructs directed acyclic network workflow determines steps can run simultaneously need wait dependencies. automation eases cognitive computational burdens user, enhancing readability code thus reproducibility.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/Makefile_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Makefile recipe\n — Makefile_recipe","title":"Default Makefile recipe\n — Makefile_recipe","text":"2019-01-03","code":""},{"path":"https://docs.ropensci.org/drake/reference/Makefile_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Makefile recipe\n — Makefile_recipe","text":"","code":"Makefile_recipe(   recipe_command = drake::default_recipe_command(),   target = \"your_target\",   cache_path = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/Makefile_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Makefile recipe\n — Makefile_recipe","text":"recipe_command Character scalar. target Character scalar. cache_path Character scalar.","code":""},{"path":"https://docs.ropensci.org/drake/reference/Makefile_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Makefile recipe\n — Makefile_recipe","text":"character scalar","code":""},{"path":"https://docs.ropensci.org/drake/reference/analyses.html","id":null,"dir":"Reference","previous_headings":"","what":"analyses  — analyses","title":"analyses  — analyses","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/analyses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"analyses  — analyses","text":"","code":"analyses(...)"},{"path":"https://docs.ropensci.org/drake/reference/analyses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"analyses  — analyses","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/analysis_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the analysis wildcard\nused in plan_summaries().\n — analysis_wildcard","title":"Show the analysis wildcard\nused in plan_summaries().\n — analysis_wildcard","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/analysis_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the analysis wildcard\nused in plan_summaries().\n — analysis_wildcard","text":"","code":"analysis_wildcard()"},{"path":"https://docs.ropensci.org/drake/reference/analysis_wildcard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the analysis wildcard\nused in plan_summaries().\n — analysis_wildcard","text":"analysis wildcard used plan_summaries().","code":""},{"path":"https://docs.ropensci.org/drake/reference/analysis_wildcard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show the analysis wildcard\nused in plan_summaries().\n — analysis_wildcard","text":"Used generate workflow plan data frames.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/as_drake_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"as_drake_filename  — as_drake_filename","title":"as_drake_filename  — as_drake_filename","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/as_drake_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as_drake_filename  — as_drake_filename","text":"","code":"as_drake_filename(...)"},{"path":"https://docs.ropensci.org/drake/reference/as_drake_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as_drake_filename  — as_drake_filename","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/as_file.html","id":null,"dir":"Reference","previous_headings":"","what":"as_file  — as_file","title":"as_file  — as_file","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/as_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as_file  — as_file","text":"","code":"as_file(...)"},{"path":"https://docs.ropensci.org/drake/reference/as_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as_file  — as_file","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/available_hash_algos.html","id":null,"dir":"Reference","previous_headings":"","what":"List the available hash algorithms for drake caches.\n — available_hash_algos","title":"List the available hash algorithms for drake caches.\n — available_hash_algos","text":"Deprecated 2018-12-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/available_hash_algos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the available hash algorithms for drake caches.\n — available_hash_algos","text":"","code":"available_hash_algos()"},{"path":"https://docs.ropensci.org/drake/reference/available_hash_algos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the available hash algorithms for drake caches.\n — available_hash_algos","text":"character vector names available hash algorithms.","code":""},{"path":"https://docs.ropensci.org/drake/reference/backend.html","id":null,"dir":"Reference","previous_headings":"","what":"backend  — backend","title":"backend  — backend","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"backend  — backend","text":"","code":"backend(...)"},{"path":"https://docs.ropensci.org/drake/reference/backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"backend  — backend","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/bind_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-bind together drake plans\n — bind_plans","title":"Row-bind together drake plans\n — bind_plans","text":"Combine drake plans together way correctly fills missing entries.","code":""},{"path":"https://docs.ropensci.org/drake/reference/bind_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-bind together drake plans\n — bind_plans","text":"","code":"bind_plans(...)"},{"path":"https://docs.ropensci.org/drake/reference/bind_plans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-bind together drake plans\n — bind_plans","text":"... Workflow plan data frames (see drake_plan()).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/bind_plans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row-bind together drake plans\n — bind_plans","text":"","code":"# You might need to refresh your data regularly (see ?triggers). download_plan <- drake_plan(   data = target(     command = download_data(),     trigger = \"always\"   ) ) # But if the data don't change, the analyses don't need to change. analysis_plan <- drake_plan(   usage = get_usage_metrics(data),   topline = scrape_topline_table(data) ) your_plan <- bind_plans(download_plan, analysis_plan) your_plan #> # A tibble: 3 × 3 #>   target  command                    trigger    #>   <chr>   <expr_lst>                 <expr_lst> #> 1 data    download_data()            \"always\"   #> 2 usage   get_usage_metrics(data)    NA         #> 3 topline scrape_topline_table(data) NA"},{"path":"https://docs.ropensci.org/drake/reference/build_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Function build_drake_graph\n — build_drake_graph","title":"Function build_drake_graph\n — build_drake_graph","text":"Use drake_config() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function build_drake_graph\n — build_drake_graph","text":"","code":"build_drake_graph(   plan,   targets = plan$target,   envir = parent.frame(),   verbose = 1L,   jobs = 1,   console_log_file = NULL,   trigger = drake::trigger(),   cache = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/build_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function build_drake_graph\n — build_drake_graph","text":"plan Workflow plan data frame. workflow plan data frame data frame target column command column. (See details drake_plan() help file descriptions optional columns.) Targets objects drake generates, commands pieces R code produce . can create track custom files along way (see file_in(), file_out(), knitr_in()). Use function drake_plan() generate workflow plan data frames. targets Character vector, names targets build. Dependencies built . may supply static /whole dynamic targets, sub-targets. envir Environment use. Defaults current workspace, need worry time. deep copy envir made, need worry workspace modified make. deep copy inherits global environment. Wherever necessary, objects functions imported envir global environment reproducibly tracked dependencies. verbose Integer, control printing console/terminal. 0: print nothing. 1: print target--target messages make() progresses. 2: show progress bar track many targets done far. jobs Maximum number parallel workers processing targets. can experiment predict_runtime() help decide appropriate number jobs. details, visit https://books.ropensci.org/drake/time.html. console_log_file Deprecated favor log_make. trigger Name trigger apply targets. Ignored plan trigger column. See trigger() details. cache drake cache created new_cache(). See also drake_cache().","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function build_drake_graph\n — build_drake_graph","text":"igraph object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_drake_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function build_drake_graph\n — build_drake_graph","text":"Deprecated 2018-11-02.","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"build_graph  — build_graph","title":"build_graph  — build_graph","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build_graph  — build_graph","text":"","code":"build_graph(...)"},{"path":"https://docs.ropensci.org/drake/reference/build_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build_graph  — build_graph","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_times.html","id":null,"dir":"Reference","previous_headings":"","what":"See the time it took to build each target.\n — build_times","title":"See the time it took to build each target.\n — build_times","text":"Applies targets plan, imports files.","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See the time it took to build each target.\n — build_times","text":"","code":"build_times(   ...,   path = NULL,   search = NULL,   digits = 3,   cache = drake::drake_cache(path = path),   targets_only = NULL,   verbose = NULL,   jobs = 1,   type = c(\"build\", \"command\"),   list = character(0) )"},{"path":"https://docs.ropensci.org/drake/reference/build_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See the time it took to build each target.\n — build_times","text":"... Targets load cache: names (symbols) character strings. tidyselect package installed, can also supply dplyr-style tidyselect commands starts_with(), ends_with(), one_of(). path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. digits many digits round times . cache drake cache. See new_cache(). supplied, path ignored. targets_only Deprecated. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing. type Type time want: either \"build\" full build time including time took store target, \"command\" time took just run command. list Character vector targets select.","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See the time it took to build each target.\n — build_times","text":"data frame times, system.time().","code":""},{"path":"https://docs.ropensci.org/drake/reference/build_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"See the time it took to build each target.\n — build_times","text":"Times dynamic targets (https://books.ropensci.org/drake/dynamic.html) reflect time takes post-process sub-targets (typically fast) exclude time takes build sub-targets . Sub-targets build times listed individually.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/build_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See the time it took to build each target.\n — build_times","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { if (requireNamespace(\"lubridate\")) { # Show the build times for the mtcars example. load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Build all the targets. print(build_times()) # Show how long it took to build each target. } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/built.html","id":null,"dir":"Reference","previous_headings":"","what":"List all the built targets (non-imports) in the cache.\n — built","title":"List all the built targets (non-imports) in the cache.\n — built","text":"Deprecated 2019-01-08.","code":""},{"path":"https://docs.ropensci.org/drake/reference/built.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all the built targets (non-imports) in the cache.\n — built","text":"","code":"built(   path = getwd(),   search = TRUE,   cache = drake::get_cache(path = path, search = search, verbose = verbose),   verbose = 1L,   jobs = 1 )"},{"path":"https://docs.ropensci.org/drake/reference/built.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all the built targets (non-imports) in the cache.\n — built","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/built.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all the built targets (non-imports) in the cache.\n — built","text":"Character vector naming built targets cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/built.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all the built targets (non-imports) in the cache.\n — built","text":"Targets listed workflow plan data frame (see drake_plan().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cache_namespaces.html","id":null,"dir":"Reference","previous_headings":"","what":"List all the storr cache namespaces used by drake.\n — cache_namespaces","title":"List all the storr cache namespaces used by drake.\n — cache_namespaces","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cache_namespaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all the storr cache namespaces used by drake.\n — cache_namespaces","text":"","code":"cache_namespaces(default = storr::storr_environment()$default_namespace)"},{"path":"https://docs.ropensci.org/drake/reference/cache_namespaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all the storr cache namespaces used by drake.\n — cache_namespaces","text":"default Name default storr namespace.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cache_namespaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all the storr cache namespaces used by drake.\n — cache_namespaces","text":"character vector storr namespaces used drake.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cache_namespaces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all the storr cache namespaces used by drake.\n — cache_namespaces","text":"Ordinary users need worry function. just another window drake's internals.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the file path where the cache is stored,\nif applicable.\n — cache_path","title":"Return the file path where the cache is stored,\nif applicable.\n — cache_path","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the file path where the cache is stored,\nif applicable.\n — cache_path","text":"","code":"cache_path(cache = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/cache_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the file path where the cache is stored,\nif applicable.\n — cache_path","text":"cache cache whose file path want know.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cache_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the file path where the cache is stored,\nif applicable.\n — cache_path","text":"File path cache stored.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cache_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the file path where the cache is stored,\nif applicable.\n — cache_path","text":"Currently works storr::storr_rds() file system caches.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached.html","id":null,"dir":"Reference","previous_headings":"","what":"List targets in the cache.\n — cached","title":"List targets in the cache.\n — cached","text":"Tip: read/load cached item readd() loadd().","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List targets in the cache.\n — cached","text":"","code":"cached(   ...,   list = character(0),   no_imported_objects = FALSE,   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = NULL,   namespace = NULL,   jobs = 1,   targets_only = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/cached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List targets in the cache.\n — cached","text":"... Deprecated. use. Objects load cache, names (unquoted) character strings (quoted). Similar ... remove(). list Deprecated. use. Character vector naming objects loaded cache. Similar list argument remove(). no_imported_objects Logical, deprecated. Use targets_only instead. path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. namespace Character scalar, name storr namespace use listing objects. jobs Number jobs/workers parallel processing. targets_only Logical. TRUE just list targets. FALSE, list files imported objects .","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List targets in the cache.\n — cached","text":"Either named logical indicating whether given targets cached character vector listing cached items, depending whether targets specified.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cached.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List targets in the cache.\n — cached","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { if (requireNamespace(\"lubridate\")) { load_mtcars_example() # Load drake's canonical example. make(my_plan) # Run the project, build all the targets. cached() cached(targets_only = FALSE) } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/cached_planned.html","id":null,"dir":"Reference","previous_headings":"","what":"List targets in both the plan and the cache.\n — cached_planned","title":"List targets in both the plan and the cache.\n — cached_planned","text":"Includes dynamic sub-targets well. See examples details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached_planned.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List targets in both the plan and the cache.\n — cached_planned","text":"","code":"cached_planned(   plan,   path = NULL,   cache = drake::drake_cache(path = path),   namespace = NULL,   jobs = 1 )"},{"path":"https://docs.ropensci.org/drake/reference/cached_planned.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List targets in both the plan and the cache.\n — cached_planned","text":"plan drake plan. path Path drake cache (usually hidden .drake/ folder) NULL. cache drake cache. See new_cache(). supplied, path ignored. namespace Character scalar, name storr namespace use listing objects. jobs Number jobs/workers parallel processing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached_planned.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List targets in both the plan and the cache.\n — cached_planned","text":"character vector target sub-target names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cached_planned.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List targets in both the plan and the cache.\n — cached_planned","text":"","code":"if (FALSE) { isolate_example(\"cache_planned() example\", { plan <- drake_plan(w = 1) make(plan) cached_planned(plan) plan <- drake_plan(   x = seq_len(2),   y = target(x, dynamic = map(x)) ) cached_planned(plan) make(plan) cached_planned(plan) cached() }) }"},{"path":"https://docs.ropensci.org/drake/reference/cached_unplanned.html","id":null,"dir":"Reference","previous_headings":"","what":"List targets in the cache but not the plan.\n — cached_unplanned","title":"List targets in the cache but not the plan.\n — cached_unplanned","text":"Includes dynamic sub-targets well. See examples details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached_unplanned.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List targets in the cache but not the plan.\n — cached_unplanned","text":"","code":"cached_unplanned(   plan,   path = NULL,   cache = drake::drake_cache(path = path),   namespace = NULL,   jobs = 1 )"},{"path":"https://docs.ropensci.org/drake/reference/cached_unplanned.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List targets in the cache but not the plan.\n — cached_unplanned","text":"plan drake plan. path Path drake cache (usually hidden .drake/ folder) NULL. cache drake cache. See new_cache(). supplied, path ignored. namespace Character scalar, name storr namespace use listing objects. jobs Number jobs/workers parallel processing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cached_unplanned.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List targets in the cache but not the plan.\n — cached_unplanned","text":"character vector target sub-target names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cached_unplanned.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List targets in the cache but not the plan.\n — cached_unplanned","text":"","code":"if (FALSE) { isolate_example(\"cache_unplanned() example\", { plan <- drake_plan(w = 1) make(plan) cached_unplanned(plan) plan <- drake_plan(   x = seq_len(2),   y = target(x, dynamic = map(x)) ) cached_unplanned(plan) make(plan) cached_unplanned(plan) # cached_unplanned() helps clean superfluous targets. cached() clean(list = cached_unplanned(plan)) cached() }) }"},{"path":"https://docs.ropensci.org/drake/reference/cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel a target mid-build  — cancel","title":"Cancel a target mid-build  — cancel","text":"Cancel target mid-build. Upon cancellation, drake halts current target moves next one. target's previous value metadata, exist, remain cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel a target mid-build  — cancel","text":"","code":"cancel(allow_missing = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel a target mid-build  — cancel","text":"allow_missing Logical. FALSE, drake cancel target missing cache (removed key clean()).","code":""},{"path":"https://docs.ropensci.org/drake/reference/cancel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel a target mid-build  — cancel","text":"Nothing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel a target mid-build  — cancel","text":"","code":"if (FALSE) { isolate_example(\"cancel()\", { f <- function(x) {   cancel()   Sys.sleep(2) # Does not run. } g <- function(x) f(x) plan <- drake_plan(y = g(1)) make(plan) # Does not exist. # readd(y) }) }"},{"path":"https://docs.ropensci.org/drake/reference/cancel_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel a target mid-build under some condition\n — cancel_if","title":"Cancel a target mid-build under some condition\n — cancel_if","text":"Cancel target mid-build logical condition met. Upon cancellation, drake halts current target moves next one. target's previous value metadata, exist, remain cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cancel_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel a target mid-build under some condition\n — cancel_if","text":"","code":"cancel_if(condition, allow_missing = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/cancel_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel a target mid-build under some condition\n — cancel_if","text":"condition Logical, whether cancel target. allow_missing Logical. FALSE, drake cancel target missing cache (removed key clean()).","code":""},{"path":"https://docs.ropensci.org/drake/reference/cancel_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel a target mid-build under some condition\n — cancel_if","text":"Nothing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/cancel_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel a target mid-build under some condition\n — cancel_if","text":"","code":"if (FALSE) { isolate_example(\"cancel_if()\", { f <- function(x) {   cancel_if(x > 1)   Sys.sleep(2) # Does not run if x > 1. } g <- function(x) f(x) plan <- drake_plan(y = g(2)) make(plan) # Does not exist. # readd(y) }) }"},{"path":"https://docs.ropensci.org/drake/reference/check.html","id":null,"dir":"Reference","previous_headings":"","what":"check  — check","title":"check  — check","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check  — check","text":"","code":"check(...)"},{"path":"https://docs.ropensci.org/drake/reference/check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check  — check","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/check_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a workflow plan data frame for obvious errors.\n — check_plan","title":"Check a workflow plan data frame for obvious errors.\n — check_plan","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/check_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a workflow plan data frame for obvious errors.\n — check_plan","text":"","code":"check_plan(   plan = NULL,   targets = NULL,   envir = parent.frame(),   cache = drake::get_cache(verbose = verbose),   verbose = 1L,   jobs = 1 )"},{"path":"https://docs.ropensci.org/drake/reference/check_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a workflow plan data frame for obvious errors.\n — check_plan","text":"plan Workflow plan data frame, possibly drake_plan(). targets Character vector targets make. envir Environment containing user-defined functions. cache Optional drake cache. See new_cache(). verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/check_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a workflow plan data frame for obvious errors.\n — check_plan","text":"Invisibly return plan.","code":""},{"path":"https://docs.ropensci.org/drake/reference/check_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check a workflow plan data frame for obvious errors.\n — check_plan","text":"Possible obvious errors include circular dependencies missing input files.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Invalidate and deregister targets.\n — clean","title":"Invalidate and deregister targets.\n — clean","text":"Force targets date remove target names data cache. careful run which_clean() clean(). way, know beforehand targets compromised.","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invalidate and deregister targets.\n — clean","text":"","code":"clean(   ...,   list = character(0),   destroy = FALSE,   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = NULL,   jobs = NULL,   force = FALSE,   garbage_collection = FALSE,   purge = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invalidate and deregister targets.\n — clean","text":"... Symbols, individual targets remove. list Character vector individual targets remove. destroy Logical, whether totally remove drake cache. destroy FALSE, targets make() removed. TRUE, whole cache removed, including session metadata, etc. path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated jobs Deprecated. force Logical, whether try clean cache even though project may back compatible current version drake. garbage_collection Logical, whether call cache$gc() garbage collection. TRUE, cached data remaining references removed. slow clean(), cache take far less space afterwards. See gc() method storr caches. purge Logical, whether remove objects metadata namespaces \"meta\", \"build_times\", \"errors\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invalidate and deregister targets.\n — clean","text":"Invisibly return NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invalidate and deregister targets.\n — clean","text":"default, clean() invalidates targets, careful. clean() always: Forces targets date next make() skip . Deregisters targets loadd(your_target) readd(your_target) longer work. default, clean() actually remove underlying data. Even old targets distant past still cache recoverable via drake_history() make(recover = TRUE). actually remove target data cache, well file_out() files targets currently cleaning, run clean(garbage_collection = TRUE). Garbage collection slow, reduces storage burden cache.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invalidate and deregister targets.\n — clean","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. # Show all registered targets in the cache. cached() # Deregister 'summ_regression1_large' and 'small' in the cache. clean(summ_regression1_large, small) # Those objects are no longer registered as targets. cached() # Rebuild the invalidated/outdated targets. make(my_plan) # Clean everything. clean() # But the data objects and files are not actually gone! file.exists(\"report.md\") drake_history() make(my_plan, recover = TRUE) # You need garbage collection to actually remove the data # and any file_out() files of any uncleaned targets. clean(garbage_collection = TRUE) drake_history() make(my_plan, recover = TRUE) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/clean_main_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: clean the main example from drake_example(","title":"Deprecated: clean the main example from drake_example(","text":"function deletes files. Use risk. Destroys .drake/ cache report.Rmd file current working directory. working directory (getcwd()) must folder first ran load_main_example() make(my_plan).","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean_main_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: clean the main example from drake_example(","text":"","code":"clean_main_example()"},{"path":"https://docs.ropensci.org/drake/reference/clean_main_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: clean the main example from drake_example(","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean_main_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: clean the main example from drake_example(","text":"Deprecated 2018-12-31.","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean_mtcars_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the mtcars example from drake_example(","title":"Clean the mtcars example from drake_example(","text":"function deletes files. Use risk. Destroys .drake/ cache report.Rmd file current working directory. working directory (getcwd()) must folder first ran load_mtcars_example() make(my_plan).","code":""},{"path":"https://docs.ropensci.org/drake/reference/clean_mtcars_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the mtcars example from drake_example(","text":"","code":"clean_mtcars_example()"},{"path":"https://docs.ropensci.org/drake/reference/clean_mtcars_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean the mtcars example from drake_example(","text":"nothing","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/clean_mtcars_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean the mtcars example from drake_example(","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { # Populate your workspace and write 'report.Rmd'. load_mtcars_example() # Get the code: drake_example(\"mtcars\") # Check the dependencies of an imported function. deps_code(reg1) # Check the dependencies of commands in the workflow plan. deps_code(my_plan$command[1]) deps_code(my_plan$command[4]) # Plot the interactive network visualization of the workflow. outdated(my_plan) # Which targets are out of date? # Run the workflow to build all the targets in the plan. make(my_plan) outdated(my_plan) # Everything should be up to date. # For the reg2() model on the small dataset, # the p-value is so small that there may be an association # between weight and fuel efficiency after all. readd(coef_regression2_small) # Clean up the example. clean_mtcars_example() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/cleaned_namespaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary storr namespaces\n — cleaned_namespaces","title":"Auxiliary storr namespaces\n — cleaned_namespaces","text":"2019-02-13","code":""},{"path":"https://docs.ropensci.org/drake/reference/cleaned_namespaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary storr namespaces\n — cleaned_namespaces","text":"","code":"cleaned_namespaces(default = storr::storr_environment()$default_namespace)"},{"path":"https://docs.ropensci.org/drake/reference/cleaned_namespaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary storr namespaces\n — cleaned_namespaces","text":"default Name default storr namespace.","code":""},{"path":"https://docs.ropensci.org/drake/reference/cleaned_namespaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary storr namespaces\n — cleaned_namespaces","text":"character vector storr namespaces cleaned clean().","code":""},{"path":"https://docs.ropensci.org/drake/reference/cmq_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a target using the clustermq backend\n — cmq_build","title":"Build a target using the clustermq backend\n — cmq_build","text":"internal use ","code":""},{"path":"https://docs.ropensci.org/drake/reference/cmq_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a target using the clustermq backend\n — cmq_build","text":"","code":"cmq_build(target, meta, deps, spec, config_tmp, config)"},{"path":"https://docs.ropensci.org/drake/reference/cmq_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a target using the clustermq backend\n — cmq_build","text":"target Target name. meta List metadata. deps Named list target dependencies. spec Internal, part full config$spec. config_tmp Internal, extra parts config workers need. config drake_config() list.","code":""},{"path":"https://docs.ropensci.org/drake/reference/code_to_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a script into a function.\n — code_to_function","title":"Turn a script into a function.\n — code_to_function","text":"code_to_function() quick (dirty) way retrofit drake existing script-based project. parses individual \\*.R/\\*.RMD files functions can added drake workflow.","code":""},{"path":"https://docs.ropensci.org/drake/reference/code_to_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a script into a function.\n — code_to_function","text":"","code":"code_to_function(path, envir = parent.frame())"},{"path":"https://docs.ropensci.org/drake/reference/code_to_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a script into a function.\n — code_to_function","text":"path Character vector, path script. envir Environment created function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/code_to_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a script into a function.\n — code_to_function","text":"function input drake plan","code":""},{"path":"https://docs.ropensci.org/drake/reference/code_to_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a script into a function.\n — code_to_function","text":"data science workflows consist imperative scripts. drake, hand, assumes write functions. code_to_function() allows pre-existing workflows incorporate drake workflow management tool seamlessly cases re-factoring unfeasible. drake can monitor dependencies, targets passed arguments dependent functions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/code_to_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a script into a function.\n — code_to_function","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { if (requireNamespace(\"ggplot2\", quietly = TRUE)) { # The `code_to_function()` function creates a function that makes it # available for drake to process as part of the workflow. # The main purpose is to allow pre-existing workflows to incorporate drake # into the workflow seamlessly for cases where re-factoring is unfeasible. #  script1 <- tempfile() script2 <- tempfile() script3 <- tempfile() script4 <- tempfile()  writeLines(c(   \"data <- mtcars\",   \"data$make <- do.call('c',\",   \"lapply(strsplit(rownames(data), split=\\\" \\\"), `[`, 1))\",   \"saveRDS(data, \\\"mtcars_alt.RDS\\\")\"  ),   script1 )  writeLines(c(   \"data <- readRDS(\\\"mtcars_alt.RDS\\\")\",   \"mtcars_lm <- lm(mpg~cyl+disp+vs+gear+make,data=data)\",   \"saveRDS(mtcars_lm, \\\"mtcars_lm.RDS\\\")\"   ),   script2 ) writeLines(c(   \"mtcars_lm <- readRDS(\\\"mtcars_lm.RDS\\\")\",   \"lm_summary <- summary(mtcars_lm)\",   \"saveRDS(lm_summary, \\\"mtcars_lm_summary.RDS\\\")\"   ),   script3 ) writeLines(c(   \"data<-readRDS(\\\"mtcars_alt.RDS\\\")\",   \"gg <- ggplot2::ggplot(data)+\",   \"ggplot2::geom_point(ggplot2::aes(\",   \"x=disp, y=mpg, shape=as.factor(vs), color=make))\",   \"ggplot2::ggsave(\\\"mtcars_plot.png\\\", gg)\"  ),   script4 )   do_munge <- code_to_function(script1) do_analysis <- code_to_function(script2) do_summarize <- code_to_function(script3) do_vis <- code_to_function(script4)  plan <- drake_plan(   munged   = do_munge(),   analysis = do_analysis(munged),   summary  = do_summarize(analysis),   plot     = do_vis(munged)  )  plan # drake knows  \"script1\" is the first script to be evaluated and ran, # because it has no dependencies on other code and a dependency of # `analysis`. See for yourself:  make(plan)  # See the connections that the sourced scripts create: if (requireNamespace(\"visNetwork\", quietly = TRUE)) {   vis_drake_graph(plan) } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/code_to_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an R script file or knitr / R Markdown report\ninto a drake plan.\n — code_to_plan","title":"Turn an R script file or knitr / R Markdown report\ninto a drake plan.\n — code_to_plan","text":"code_to_plan(), plan_to_code(), plan_to_notebook() together illustrate relationships drake plans, R scripts, R Markdown documents.","code":""},{"path":"https://docs.ropensci.org/drake/reference/code_to_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an R script file or knitr / R Markdown report\ninto a drake plan.\n — code_to_plan","text":"","code":"code_to_plan(path)"},{"path":"https://docs.ropensci.org/drake/reference/code_to_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an R script file or knitr / R Markdown report\ninto a drake plan.\n — code_to_plan","text":"path file path R script knitr report.","code":""},{"path":"https://docs.ropensci.org/drake/reference/code_to_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn an R script file or knitr / R Markdown report\ninto a drake plan.\n — code_to_plan","text":"feature easy break, rules code file: Stick assigning single expression single target time. multi-line commands, please enclose whole command curly braces. Conversely, compound assignment supported (e.g. target_1 <- target_2 <- target_3 <- get_data()). assign expression variable, modify variable . target/command binding permanent. Keep simple. Please use assignment operators rather assign() similar functions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/code_to_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn an R script file or knitr / R Markdown report\ninto a drake plan.\n — code_to_plan","text":"","code":"plan <- drake_plan(   raw_data = read_excel(file_in(\"raw_data.xlsx\")),   data = raw_data,   hist = create_plot(data),   fit = lm(Ozone ~ Temp + Wind, data) ) file <- tempfile() # Turn the plan into an R script a the given file path. plan_to_code(plan, file) #> Loading required namespace: styler # Here is what the script looks like. cat(readLines(file), sep = \"\\n\") #> raw_data <- read_excel(file_in(\"raw_data.xlsx\")) #> data <- raw_data #> fit <- lm(Ozone ~ Temp + Wind, data) #> hist <- create_plot(data) # Convert back to a drake plan. code_to_plan(file) #> # A tibble: 4 × 2 #>   target   command                              #>   <chr>    <expr_lst>                           #> 1 raw_data read_excel(file_in(\"raw_data.xlsx\")) #> 2 data     raw_data                             #> 3 fit      lm(Ozone ~ Temp + Wind, data)        #> 4 hist     create_plot(data)"},{"path":"https://docs.ropensci.org/drake/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"config  — config","title":"config  — config","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"config  — config","text":"","code":"config(...)"},{"path":"https://docs.ropensci.org/drake/reference/config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"config  — config","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/configure_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure the hash algorithms, etc. of a drake cache.\n — configure_cache","title":"Configure the hash algorithms, etc. of a drake cache.\n — configure_cache","text":"purpose function prepare cache called make(). drake uses single hash algorithm now, longer need configuration step.","code":""},{"path":"https://docs.ropensci.org/drake/reference/configure_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure the hash algorithms, etc. of a drake cache.\n — configure_cache","text":"","code":"configure_cache(   cache = drake::get_cache(verbose = verbose),   short_hash_algo = drake::default_short_hash_algo(cache = cache),   long_hash_algo = drake::default_long_hash_algo(cache = cache),   log_progress = FALSE,   overwrite_hash_algos = FALSE,   verbose = 1L,   jobs = 1,   init_common_values = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/configure_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure the hash algorithms, etc. of a drake cache.\n — configure_cache","text":"cache Cache configure short_hash_algo Short hash algorithm drake. short algorithm must among available_hash_algos(), just collection algorithms available algo argument digest::digest(). See default_short_hash_algo() . long_hash_algo Long hash algorithm drake. long algorithm must among available_hash_algos(), just collection algorithms available algo argument digest::digest(). See default_long_hash_algo() . log_progress Deprecated logical. Previously toggled whether clear recorded build progress cache used previous calls make(). overwrite_hash_algos Logical, whether try overwrite hash algorithms cache user-specified ones. verbose Deprecated 2019-09-11. jobs Number jobs parallel processing init_common_values Logical, whether set initial drake version cache common values. always thread safe operation, TRUE main process","code":""},{"path":"https://docs.ropensci.org/drake/reference/configure_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure the hash algorithms, etc. of a drake cache.\n — configure_cache","text":"drake/storr cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/configure_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure the hash algorithms, etc. of a drake cache.\n — configure_cache","text":"Deprecated 2018-12-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/dataframes_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"dataframes_graph  — dataframes_graph","title":"dataframes_graph  — dataframes_graph","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/dataframes_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dataframes_graph  — dataframes_graph","text":"","code":"dataframes_graph(...)"},{"path":"https://docs.ropensci.org/drake/reference/dataframes_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dataframes_graph  — dataframes_graph","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/dataset_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the dataset wildcard\nused in plan_analyses() and plan_summaries().\n — dataset_wildcard","title":"Show the dataset wildcard\nused in plan_analyses() and plan_summaries().\n — dataset_wildcard","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/dataset_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the dataset wildcard\nused in plan_analyses() and plan_summaries().\n — dataset_wildcard","text":"","code":"dataset_wildcard()"},{"path":"https://docs.ropensci.org/drake/reference/dataset_wildcard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the dataset wildcard\nused in plan_analyses() and plan_summaries().\n — dataset_wildcard","text":"dataset wildcard used plan_analyses() plan_summaries().","code":""},{"path":"https://docs.ropensci.org/drake/reference/dataset_wildcard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show the dataset wildcard\nused in plan_analyses() and plan_summaries().\n — dataset_wildcard","text":"Used generate workflow plan data frames.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/debug_and_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a function in debug mode.\n — debug_and_run","title":"Run a function in debug mode.\n — debug_and_run","text":"Internal function drake_debug(). general use.","code":""},{"path":"https://docs.ropensci.org/drake/reference/debug_and_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a function in debug mode.\n — debug_and_run","text":"","code":"debug_and_run(f)"},{"path":"https://docs.ropensci.org/drake/reference/debug_and_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a function in debug mode.\n — debug_and_run","text":"f function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/debug_and_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a function in debug mode.\n — debug_and_run","text":"return value f.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Default arguments of Makefile parallelism\n — default_Makefile_args","title":"Default arguments of Makefile parallelism\n — default_Makefile_args","text":"2019-01-03","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default arguments of Makefile parallelism\n — default_Makefile_args","text":"","code":"default_Makefile_args(jobs, verbose)"},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default arguments of Makefile parallelism\n — default_Makefile_args","text":"jobs Number jobs. verbose Integer, control printing console/terminal. 0: print nothing. 1: print target--target messages make() progresses. 2: show progress bar track many targets done far.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default arguments of Makefile parallelism\n — default_Makefile_args","text":"args system2(command, args)","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Makefile command\n — default_Makefile_command","title":"Default Makefile command\n — default_Makefile_command","text":"2019-01-03","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Makefile command\n — default_Makefile_command","text":"","code":"default_Makefile_command()"},{"path":"https://docs.ropensci.org/drake/reference/default_Makefile_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Makefile command\n — default_Makefile_command","text":"character scalar","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_graph_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default title for graph visualizations\n — default_graph_title","title":"Return the default title for graph visualizations\n — default_graph_title","text":"internal use .","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_graph_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default title for graph visualizations\n — default_graph_title","text":"","code":"default_graph_title()"},{"path":"https://docs.ropensci.org/drake/reference/default_graph_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the default title for graph visualizations\n — default_graph_title","text":"character scalar default graph title.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_graph_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the default title for graph visualizations\n — default_graph_title","text":"","code":"default_graph_title() #> [1] \"Dependency graph\""},{"path":"https://docs.ropensci.org/drake/reference/default_long_hash_algo.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default long hash algorithm for make().\n — default_long_hash_algo","title":"Return the default long hash algorithm for make().\n — default_long_hash_algo","text":"Deprecated. drake now uses one hash algorithm per cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_long_hash_algo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default long hash algorithm for make().\n — default_long_hash_algo","text":"","code":"default_long_hash_algo(cache = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/default_long_hash_algo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the default long hash algorithm for make().\n — default_long_hash_algo","text":"cache Optional drake cache. configure_cache() without supplying long hash algorithm, default_long_hash_algo(cache) long hash algorithm drake picks .","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_long_hash_algo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the default long hash algorithm for make().\n — default_long_hash_algo","text":"character vector naming hash algorithm.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_long_hash_algo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the default long hash algorithm for make().\n — default_long_hash_algo","text":"Deprecated 2018-12-12","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_parallelism.html","id":null,"dir":"Reference","previous_headings":"","what":"Default parallel backend\n — default_parallelism","title":"Default parallel backend\n — default_parallelism","text":"2019-01-02","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_parallelism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default parallel backend\n — default_parallelism","text":"","code":"default_parallelism()"},{"path":"https://docs.ropensci.org/drake/reference/default_parallelism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default parallel backend\n — default_parallelism","text":"character","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_recipe_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Makefile recipe command\n — default_recipe_command","title":"Default Makefile recipe command\n — default_recipe_command","text":"2019-01-02","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_recipe_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Makefile recipe command\n — default_recipe_command","text":"","code":"default_recipe_command()"},{"path":"https://docs.ropensci.org/drake/reference/default_recipe_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Makefile recipe command\n — default_recipe_command","text":"character scalar default recipe command.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_short_hash_algo.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default short hash algorithm for make().\n — default_short_hash_algo","title":"Return the default short hash algorithm for make().\n — default_short_hash_algo","text":"Deprecated. drake now uses one hash algorithm per cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_short_hash_algo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default short hash algorithm for make().\n — default_short_hash_algo","text":"","code":"default_short_hash_algo(cache = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/default_short_hash_algo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the default short hash algorithm for make().\n — default_short_hash_algo","text":"cache Optional drake cache. configure_cache() without supplying short hash algorithm, default_short_hash_algo(cache) short hash algorithm drake picks .","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_short_hash_algo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the default short hash algorithm for make().\n — default_short_hash_algo","text":"character vector naming hash algorithm.","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_short_hash_algo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the default short hash algorithm for make().\n — default_short_hash_algo","text":"Deprecated 2018-12-12","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_system2_args.html","id":null,"dir":"Reference","previous_headings":"","what":"default_system2_args  — default_system2_args","title":"default_system2_args  — default_system2_args","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_system2_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default_system2_args  — default_system2_args","text":"","code":"default_system2_args(...)"},{"path":"https://docs.ropensci.org/drake/reference/default_system2_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"default_system2_args  — default_system2_args","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Default verbosity\n — default_verbose","title":"Default verbosity\n — default_verbose","text":"Deprecated 2019-01-01","code":""},{"path":"https://docs.ropensci.org/drake/reference/default_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default verbosity\n — default_verbose","text":"","code":"default_verbose()"},{"path":"https://docs.ropensci.org/drake/reference/default_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default verbosity\n — default_verbose","text":"1","code":""},{"path":"https://docs.ropensci.org/drake/reference/dependency_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"States of the dependencies of a target\n — dependency_profile","title":"States of the dependencies of a target\n — dependency_profile","text":"Deprecated 2019-02-14.","code":""},{"path":"https://docs.ropensci.org/drake/reference/dependency_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"States of the dependencies of a target\n — dependency_profile","text":"","code":"dependency_profile(target, config, character_only = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/dependency_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"States of the dependencies of a target\n — dependency_profile","text":"target Name target. config Deprecated. character_only Logical, whether assume target character string rather symbol.","code":""},{"path":"https://docs.ropensci.org/drake/reference/dependency_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"States of the dependencies of a target\n — dependency_profile","text":"data frame old hashes new hashes data frame, along indication hashes changed since last make().","code":""},{"path":"https://docs.ropensci.org/drake/reference/deprecate_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"deprecate_wildcard  — deprecate_wildcard","title":"deprecate_wildcard  — deprecate_wildcard","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/deprecate_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deprecate_wildcard  — deprecate_wildcard","text":"","code":"deprecate_wildcard(...)"},{"path":"https://docs.ropensci.org/drake/reference/deprecate_wildcard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deprecate_wildcard  — deprecate_wildcard","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps.html","id":null,"dir":"Reference","previous_headings":"","what":"deps  — deps","title":"deps  — deps","text":"2019-05-16","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deps  — deps","text":"","code":"deps(...)"},{"path":"https://docs.ropensci.org/drake/reference/deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deps  — deps","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_code.html","id":null,"dir":"Reference","previous_headings":"","what":"List the dependencies of a function or command\n — deps_code","title":"List the dependencies of a function or command\n — deps_code","text":"Functions assumed imported, language/text assumed commands plan.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the dependencies of a function or command\n — deps_code","text":"","code":"deps_code(x)"},{"path":"https://docs.ropensci.org/drake/reference/deps_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the dependencies of a function or command\n — deps_code","text":"x function, expression, text.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the dependencies of a function or command\n — deps_code","text":"data frame dependencies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/deps_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the dependencies of a function or command\n — deps_code","text":"","code":"# Your workflow likely depends on functions in your workspace. f <- function(x, y) {   out <- x + y + g(x)   saveRDS(out, \"out.rds\") } # Find the dependencies of f. These could be R objects/functions # in your workspace or packages. Any file names or target names # will be ignored. deps_code(f) #> # A tibble: 2 × 2 #>   name    type    #>   <chr>   <chr>   #> 1 saveRDS globals #> 2 g       globals # Define a workflow plan data frame that uses your function f(). my_plan <- drake_plan(   x = 1 + some_object,   my_target = x + readRDS(file_in(\"tracked_input_file.rds\")),   return_value = f(x, y, g(z + w)) ) # Get the dependencies of workflow plan commands. # Here, the dependencies could be R functions/objects from your workspace # or packages, imported files, or other targets in the workflow plan. deps_code(my_plan$command[[1]]) #> # A tibble: 1 × 2 #>   name        type    #>   <chr>       <chr>   #> 1 some_object globals deps_code(my_plan$command[[2]]) #> # A tibble: 3 × 2 #>   name                   type    #>   <chr>                  <chr>   #> 1 x                      globals #> 2 readRDS                globals #> 3 tracked_input_file.rds file_in deps_code(my_plan$command[[3]]) #> # A tibble: 6 × 2 #>   name  type    #>   <chr> <chr>   #> 1 w     globals #> 2 x     globals #> 3 y     globals #> 4 z     globals #> 5 f     globals #> 6 g     globals # You can also supply expressions or text. deps_code(quote(x + y + 123)) #> # A tibble: 2 × 2 #>   name  type    #>   <chr> <chr>   #> 1 x     globals #> 2 y     globals deps_code(\"x + y + 123\") #> # A tibble: 2 × 2 #>   name  type    #>   <chr> <chr>   #> 1 x     globals #> 2 y     globals"},{"path":"https://docs.ropensci.org/drake/reference/deps_knitr.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the drake dependencies of a dynamic knitr report target.\n — deps_knitr","title":"Find the drake dependencies of a dynamic knitr report target.\n — deps_knitr","text":"Dependencies knitr reports marked loadd() readd() active code chunks.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_knitr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the drake dependencies of a dynamic knitr report target.\n — deps_knitr","text":"","code":"deps_knitr(path)"},{"path":"https://docs.ropensci.org/drake/reference/deps_knitr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the drake dependencies of a dynamic knitr report target.\n — deps_knitr","text":"path Encoded file path knitr/R Markdown document. Wrap paths file_store() encode.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_knitr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the drake dependencies of a dynamic knitr report target.\n — deps_knitr","text":"data frame dependencies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/deps_knitr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the drake dependencies of a dynamic knitr report target.\n — deps_knitr","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). deps_knitr(\"report.Rmd\") }) }"},{"path":"https://docs.ropensci.org/drake/reference/deps_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out why a target is out of date.\n — deps_profile","title":"Find out why a target is out of date.\n — deps_profile","text":"dependency profile can give hint target date. can tell command changed (deps_profile() reports hash command, command ) least one input file changed, least one output file changed, non-file dependency changed. last part, imports need date cache, can outdated() make(skip_targets = TRUE). pseudo-random number generator seed changed. Unfortunately, deps_profile() currently get specific .","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out why a target is out of date.\n — deps_profile","text":"","code":"deps_profile(target, ..., character_only = FALSE, config = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/deps_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out why a target is out of date.\n — deps_profile","text":"target Name target. ... Arguments make(), plan targets. character_only Logical, whether assume target character string rather symbol. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out why a target is out of date.\n — deps_profile","text":"data frame old new values main triggers, along indication values changed since last make().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/deps_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find out why a target is out of date.\n — deps_profile","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Load drake's canonical example. make(my_plan) # Run the project, build the targets. # Get some example dependency profiles of targets. deps_profile(small, my_plan) # Change a dependency. simulate <- function(x) {} # Update the in-memory imports in the cache # so deps_profile can detect changes to them. # Changes to targets are already cached. make(my_plan, skip_targets = TRUE) # The dependency hash changed. deps_profile(small, my_plan) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/deps_profile_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — deps_profile_impl","title":"Internal function with a drake_config() argument — deps_profile_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_profile_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — deps_profile_impl","text":"","code":"deps_profile_impl(target, config, character_only = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/deps_profile_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — deps_profile_impl","text":"target Name target. config drake_config() object. character_only Logical, whether interpret target character (TRUE) symbol (FALSE).","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_target.html","id":null,"dir":"Reference","previous_headings":"","what":"List the dependencies of a target\n — deps_target","title":"List the dependencies of a target\n — deps_target","text":"Intended debugging checking project. dependency structure components analysis decides targets built .","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the dependencies of a target\n — deps_target","text":"","code":"deps_target(target, ..., character_only = FALSE, config = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/deps_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the dependencies of a target\n — deps_target","text":"target symbol denoting target name, character_only TRUE, character scalar denoting target name. ... Arguments make(), plan targets. character_only Logical, whether assume target character string rather symbol. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the dependencies of a target\n — deps_target","text":"data frame dependencies listed type (globals, files, etc).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/deps_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the dependencies of a target\n — deps_target","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). deps_target(regression1_small, my_plan) }) }"},{"path":"https://docs.ropensci.org/drake/reference/deps_target_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — deps_target_impl","title":"Internal function with a drake_config() argument — deps_target_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_target_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — deps_target_impl","text":"","code":"deps_target_impl(target, config, character_only = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/deps_target_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — deps_target_impl","text":"target Name target. config drake_config() object. character_only Logical, whether interpret target character (TRUE) symbol (FALSE).","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"See the dependencies of a target\n — deps_targets","title":"See the dependencies of a target\n — deps_targets","text":"Use deps_target() (singular) instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See the dependencies of a target\n — deps_targets","text":"","code":"deps_targets(targets, config, reverse = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/deps_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See the dependencies of a target\n — deps_targets","text":"targets character vector target names. config output list drake_config() reverse Logical, whether compute reverse dependencies (targets immediately downstream) instead ordinary dependencies.","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See the dependencies of a target\n — deps_targets","text":"Names dependencies listed type (object, input file, etc).","code":""},{"path":"https://docs.ropensci.org/drake/reference/deps_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"See the dependencies of a target\n — deps_targets","text":"Deprecated 2018-08-30.","code":""},{"path":"https://docs.ropensci.org/drake/reference/diagnose.html","id":null,"dir":"Reference","previous_headings":"","what":"Get diagnostic metadata on a target.\n — diagnose","title":"Get diagnostic metadata on a target.\n — diagnose","text":"Diagnostics include errors, warnings, messages, runtimes, context/metadata target built import processed. target's last build succeeded, diagnose(your_target) current information build. target failed, diagnose(your_target)$error, diagnose(your_target)$warnings, diagnose(your_target)$messages correspond failure, metadata correspond last build completed without error.","code":""},{"path":"https://docs.ropensci.org/drake/reference/diagnose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get diagnostic metadata on a target.\n — diagnose","text":"","code":"diagnose(   target = NULL,   character_only = FALSE,   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = 1L )"},{"path":"https://docs.ropensci.org/drake/reference/diagnose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get diagnostic metadata on a target.\n — diagnose","text":"target Name target error get. Can symbol character_only FALSE, must character character_only TRUE. character_only Logical, whether target treated character symbol. Just like character.library(). path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/diagnose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get diagnostic metadata on a target.\n — diagnose","text":"Either character vector target names object class \"error\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/diagnose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get diagnostic metadata on a target.\n — diagnose","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { diagnose() # List all the targets with recorded error logs. # Define a function doomed to failure. f <- function() {   stop(\"unusual error\") } # Create a workflow plan doomed to failure. bad_plan <- drake_plan(my_target = f()) # Running the project should generate an error # when trying to build 'my_target'. try(make(bad_plan), silent = FALSE) drake_failed() # List the failed targets from the last make() (my_target). # List targets that failed at one point or another # over the course of the project (my_target). # drake keeps all the error logs. diagnose() # Get the error log, an object of class \"error\". error <- diagnose(my_target)$error # See also warnings and messages. str(error) # See what's inside the error log. error$calls # View the traceback. (See the rlang::trace_back() function). }) }"},{"path":"https://docs.ropensci.org/drake/reference/do_prework.html","id":null,"dir":"Reference","previous_headings":"","what":"Do the prework in the prework\nargument to make().\n — do_prework","title":"Do the prework in the prework\nargument to make().\n — do_prework","text":"internal use . reason function exported set parallel socket (PSOCK) clusters without much fuss.","code":""},{"path":"https://docs.ropensci.org/drake/reference/do_prework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do the prework in the prework\nargument to make().\n — do_prework","text":"","code":"do_prework(config, verbose_packages)"},{"path":"https://docs.ropensci.org/drake/reference/do_prework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do the prework in the prework\nargument to make().\n — do_prework","text":"config configured workflow drake_config(). verbose_packages logical, whether print package startup messages","code":""},{"path":"https://docs.ropensci.org/drake/reference/do_prework.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do the prework in the prework\nargument to make().\n — do_prework","text":"Inivisibly returns NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/do_prework.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do the prework in the prework\nargument to make().\n — do_prework","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # Create a main internal configuration list with prework. con <- drake_config(my_plan, prework = c(\"library(knitr)\", \"x <- 1\")) # Do the prework. Usually done at the beginning of `make()`, # and for distributed computing backends like \"future_lapply\", # right before each target is built. do_prework(config = con, verbose_packages = TRUE) # The `eval` element is the environment where the prework # and the commands in your workflow plan data frame are executed. identical(con$eval$x, 1) # Should be TRUE. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/doc_of_function_call.html","id":null,"dir":"Reference","previous_headings":"","what":"doc_of_function_call  — doc_of_function_call","title":"doc_of_function_call  — doc_of_function_call","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/doc_of_function_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"doc_of_function_call  — doc_of_function_call","text":"","code":"doc_of_function_call(...)"},{"path":"https://docs.ropensci.org/drake/reference/doc_of_function_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"doc_of_function_call  — doc_of_function_call","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake-package.html","id":null,"dir":"Reference","previous_headings":"","what":"drake: A pipeline toolkit for reproducible computation at scale. — drake-package","title":"drake: A pipeline toolkit for reproducible computation at scale. — drake-package","text":"drake pipeline toolkit (https://github.com/pditommaso/awesome-pipeline) scalable, R-focused solution reproducibility high-performance computing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"drake: A pipeline toolkit for reproducible computation at scale. — drake-package","text":"https://github.com/ropensci/drake","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"drake: A pipeline toolkit for reproducible computation at scale. — drake-package","text":"William Michael Landau .landau@gmail.com","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake: A pipeline toolkit for reproducible computation at scale. — drake-package","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { library(drake) load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Build everything. plot(my_plan) # fast call to vis_drake_graph() make(my_plan) # Nothing is done because everything is already up to date. reg2 = function(d) { # Change one of your functions.   d$x3 = d$x^3   lm(y ~ x3, data = d) } make(my_plan) # Only the pieces depending on reg2() get rebuilt. # Write a flat text log file this time. make(my_plan, cache_log_file = TRUE) # Read/load from the cache. readd(small) loadd(large) head(large) } # Dynamic branching # Get the mean mpg for each cyl in the mtcars dataset. plan <- drake_plan(   raw = mtcars,   group_index = raw$cyl,   munged = target(raw[, c(\"mpg\", \"cyl\")], dynamic = map(raw)),   mean_mpg_by_cyl = target(     data.frame(mpg = mean(munged$mpg), cyl = munged$cyl[1]),     dynamic = group(munged, .by = group_index)   ) ) make(plan) readd(mean_mpg_by_cyl) }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_batchtools_tmpl_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a template file for execution on a cluster.\n — drake_batchtools_tmpl_file","title":"Get a template file for execution on a cluster.\n — drake_batchtools_tmpl_file","text":"Deprecated. Use drake_hpc_template_file() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_batchtools_tmpl_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a template file for execution on a cluster.\n — drake_batchtools_tmpl_file","text":"","code":"drake_batchtools_tmpl_file(   example = drake::drake_hpc_template_files(),   to = getwd(),   overwrite = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_batchtools_tmpl_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a template file for execution on a cluster.\n — drake_batchtools_tmpl_file","text":"example Name template file. Character vector, write file. overwrite Logical, whether overwrite existing file name.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_batchtools_tmpl_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a template file for execution on a cluster.\n — drake_batchtools_tmpl_file","text":"Deprecated 2018-06-27.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build/process a single target or import.\n — drake_build","title":"Build/process a single target or import.\n — drake_build","text":"valid dynamic branching.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build/process a single target or import.\n — drake_build","text":"","code":"drake_build(   target,   ...,   meta = NULL,   character_only = FALSE,   replace = FALSE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build/process a single target or import.\n — drake_build","text":"target Name target. ... Arguments make(), plan environment. meta Deprecated. character_only Logical, whether name treated character symbol (just like character.library()). replace Logical. FALSE, items already environment replaced. config Deprecated 2019-12-22.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build/process a single target or import.\n — drake_build","text":"value target right built.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build/process a single target or import.\n — drake_build","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { # This example is not really a user-side demonstration. # It just walks through a dive into the internals. # Populate your workspace and write 'report.Rmd'. load_mtcars_example() # Get the code with drake_example(\"mtcars\"). out <- drake_build(small, my_plan) # Now includes `small`. cached() head(readd(small)) # `small` was invisibly returned. head(out) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_build_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — drake_build_impl","title":"Internal function with a drake_config() argument — drake_build_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_build_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — drake_build_impl","text":"","code":"drake_build_impl(   target,   config = NULL,   meta = NULL,   character_only = FALSE,   replace = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_build_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — drake_build_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cache of a drake project.\n — drake_cache","title":"Get the cache of a drake project.\n — drake_cache","text":"make() saves values targets rarely need think output files. default, cache hidden folder called .drake/. can also supply storr cache cache argument make(). drake_cache() function retrieves cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cache of a drake project.\n — drake_cache","text":"","code":"drake_cache(path = NULL, verbose = NULL, console_log_file = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cache of a drake project.\n — drake_cache","text":"path Character. Set path path storr::storr_rds() cache retrieve specific cache generated storr::storr_rds() drake::new_cache(). path argument NULL, drake_cache() searches parent directories find folder called .drake/. verbose Deprecated 2019-09-11. console_log_file Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cache of a drake project.\n — drake_cache","text":"drake/storr cache folder called .drake/, available. NULL otherwise.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the cache of a drake project.\n — drake_cache","text":"drake_cache() actually returns decorated storr, object contains storr (plus bells whistles). get actual inner storr, use drake_cache()$storr. methods delegated inner storr. methods objects new overwritten. ones relevant users. history: drake's history (powers drake_history()) txtq. Access drake_cache()$history. import(): import() method function can import targets, function dependencies, etc. one decorated storr another. History imported. , work history txtqs , Arguments import(): ... list: specify targets import just like loadd(). Leave blank import everything. : decorated storr import targets. jobs: number local processes parallel computing. gc: TRUE FALSE, whether run garbage collection memory importing target. Recommended, slow. export(): import(), except argument replaced : decorated storr targets end .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cache of a drake project.\n — drake_cache","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { clean(destroy = TRUE) # No cache is available. drake_cache() # NULL load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. x <- drake_cache() # Now, there is a cache. y <- storr::storr_rds(\".drake\") # Nearly equivalent. # List the objects readable from the cache with readd(). x$list() # drake_cache() actually returns a *decorated* storr. # The *real* storr is inside. drake_cache()$storr } # You can import and export targets to and from decorated storrs. plan1 <- drake_plan(w = \"w\", x = \"x\") plan2 <- drake_plan(a = \"a\", x = \"x2\") cache1 <- new_cache(\"cache1\") cache2 <- new_cache(\"cache2\") make(plan1, cache = cache1) make(plan2, cache = cache2) cache1$import(cache2, a) cache1$get(\"a\") cache1$get(\"x\") cache1$import(cache2) cache1$get(\"x\") # With txtq >= 0.1.6.9002, you can import history from one cache into # another. # nolint start # drake_history(cache = cache1) # cache1$history$import(cache2$history) # drake_history(cache = cache1) # nolint end }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the state of the cache.\n — drake_cache_log","title":"Get the state of the cache.\n — drake_cache_log","text":"Get fingerprints targets data frame. functionality like make(..., cache_log_file = TRUE), separated customizable. Hopefully, functionality step toward better data versioning tools.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the state of the cache.\n — drake_cache_log","text":"","code":"drake_cache_log(   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = 1L,   jobs = 1,   targets_only = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the state of the cache.\n — drake_cache_log","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing. targets_only Logical, whether output information targets workflow plan data frame. targets_only FALSE, output include hashes targets imports.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the state of the cache.\n — drake_cache_log","text":"Data frame hash keys targets imports cache","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the state of the cache.\n — drake_cache_log","text":"hash fingerprint object's value. Together, hash keys targets imports represent state project. Use drake_cache_log() generate data frame hash keys targets imports stored cache. function particularly useful storing drake project version control repository. cache lot tiny files, put version control. Instead, save output drake_cache_log() text file make(), put text file version control. way, changelog project's results. See examples details. Depending project's history, targets may different ones workflow plan data frame. Also, keys depend hash algorithm cache. define hash algorithm, can create storr cache give hash algorithm (e.g. storr_rds(hash_algorithm = \"murmur32\"))","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the state of the cache.\n — drake_cache_log","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { # Load drake's canonical example. load_mtcars_example() # Get the code with drake_example() # Run the project, build all the targets. make(my_plan) # Get a data frame of all the hash keys. # If you want a changelog, be sure to do this after every make(). cache_log <- drake_cache_log() head(cache_log) # Suppress partial arg match warnings. suppressWarnings(   # Save the hash log as a flat text file.   write.table(     x = cache_log,     file = \"drake_cache.log\",     quote = FALSE,     row.names = FALSE   ) ) # At this point, put drake_cache.log under version control # (e.g. with 'git add drake_cache.log') alongside your code. # Now, every time you run your project, your commit history # of hash_lot.txt is a changelog of the project's results. # It shows which targets and imports changed on every commit. # It is extremely difficult to track your results this way # by putting the raw '.drake/' cache itself under version control. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a flat text log file to represent the state of\nthe cache.\n — drake_cache_log_file","title":"Generate a flat text log file to represent the state of\nthe cache.\n — drake_cache_log_file","text":"Deprecated 2019-03-09.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a flat text log file to represent the state of\nthe cache.\n — drake_cache_log_file","text":"","code":"drake_cache_log_file(   file = \"drake_cache.log\",   path = getwd(),   search = TRUE,   cache = drake::get_cache(path = path, search = search, verbose = verbose),   verbose = 1L,   jobs = 1L,   targets_only = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a flat text log file to represent the state of\nthe cache.\n — drake_cache_log_file","text":"file character scalar, name flat text log file. path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing. targets_only Logical, whether output information targets workflow plan data frame. targets_only FALSE, output include hashes targets imports.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a flat text log file to represent the state of\nthe cache.\n — drake_cache_log_file","text":"return value, log file generated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cache_log_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a flat text log file to represent the state of\nthe cache.\n — drake_cache_log_file","text":"Calling function create log file later calling make() makes log file date. Therefore, recommend using make() cache_log_file argument create cache log. way ensures log always date make() results.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_cancelled.html","id":null,"dir":"Reference","previous_headings":"","what":"List cancelled targets.\n — drake_cancelled","title":"List cancelled targets.\n — drake_cancelled","text":"List targets cancelled current previous call make() using cancel() cancel_if().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cancelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List cancelled targets.\n — drake_cancelled","text":"","code":"drake_cancelled(cache = drake::drake_cache(path = path), path = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_cancelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List cancelled targets.\n — drake_cancelled","text":"cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_cancelled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List cancelled targets.\n — drake_cancelled","text":"character vector target names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_cancelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List cancelled targets.\n — drake_cancelled","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { plan <- drake_plan(x = 1, y = cancel_if(x > 0)) make(plan) drake_cancelled() }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Ending of _drake.R for r_make() and friends\n — drake_config","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"Call function inside _drake.R script r_make() friends. non-deprecated function arguments make() drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"","code":"drake_config(   plan,   targets = NULL,   envir = parent.frame(),   verbose = 1L,   hook = NULL,   cache = drake::drake_cache(),   fetch_cache = NULL,   parallelism = \"loop\",   jobs = 1L,   jobs_preprocess = 1L,   packages = rev(.packages()),   lib_loc = NULL,   prework = character(0),   prepend = NULL,   command = NULL,   args = NULL,   recipe_command = NULL,   timeout = NULL,   cpu = Inf,   elapsed = Inf,   retries = 0,   force = FALSE,   log_progress = TRUE,   graph = NULL,   trigger = drake::trigger(),   skip_targets = FALSE,   skip_imports = FALSE,   skip_safety_checks = FALSE,   lazy_load = \"eager\",   session_info = NULL,   cache_log_file = NULL,   seed = NULL,   caching = c(\"main\", \"master\", \"worker\"),   keep_going = FALSE,   session = NULL,   pruning_strategy = NULL,   makefile_path = NULL,   console_log_file = NULL,   ensure_workers = NULL,   garbage_collection = FALSE,   template = list(),   sleep = function(i) 0.01,   hasty_build = NULL,   memory_strategy = \"speed\",   spec = NULL,   layout = NULL,   lock_envir = TRUE,   history = TRUE,   recover = FALSE,   recoverable = TRUE,   curl_handles = list(),   max_expand = NULL,   log_build_times = TRUE,   format = NULL,   lock_cache = TRUE,   log_make = NULL,   log_worker = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"plan Workflow plan data frame. workflow plan data frame data frame target column command column. (See details drake_plan() help file descriptions optional columns.) Targets objects drake generates, commands pieces R code produce . can create track custom files along way (see file_in(), file_out(), knitr_in()). Use function drake_plan() generate workflow plan data frames. targets Character vector, names targets build. Dependencies built . may supply static /whole dynamic targets, sub-targets. envir Environment use. Defaults current workspace, need worry time. deep copy envir made, need worry workspace modified make. deep copy inherits global environment. Wherever necessary, objects functions imported envir global environment reproducibly tracked dependencies. verbose Integer, control printing console/terminal. 0: print nothing. 1: print target--target messages make() progresses. 2: show progress bar track many targets done far. hook Deprecated. cache drake cache created new_cache(). See also drake_cache(). fetch_cache Deprecated. parallelism Character scalar, type parallelism use. detailed explanations, see https://books.ropensci.org/drake/hpc.html. also supply scheduler function want experiment aggressively optimize. function take single config argument (produced drake_config()). Existing examples drake's internals backend_*() functions: backend_loop() backend_clustermq() backend_future() However, functionality really back door used production purposes unless really know willing suffer setbacks whenever drake's unexported core functions updated. jobs Maximum number parallel workers processing targets. can experiment predict_runtime() help decide appropriate number jobs. details, visit https://books.ropensci.org/drake/time.html. jobs_preprocess Number parallel jobs processing imports preprocessing tasks. packages Character vector packages load, order loaded. Defaults rev(.packages()), usually need set manually. Just call library() load packages make(). However, sometimes packages need strictly forced load certain order, especially parallelism \"Makefile\". , use library() require() loadNamespace() attachNamespace() load libraries beforehand. Just list packages packages argument order want loaded. lib_loc Character vector, optional. library() require(). Applies packages argument (see ). prework Expression (language object), list expressions, character vector. Code run right targets build. Called parallelism \"loop\" per target otherwise. code can used set global options, etc. prepend Deprecated. command Deprecated. args Deprecated. recipe_command Deprecated. timeout deprecated. Use elapsed cpu instead. cpu cpu argument setTimeLimit(). Seconds cpu time target times . Assign target-level cpu timeout times optional cpu column plan. elapsed elapsed argument setTimeLimit(). Seconds elapsed time target times . Assign target-level elapsed timeout times optional elapsed column plan. retries Number retries execute target fails. Assign target-level retries optional retries column plan. force Logical. FALSE (default) drake imposes checks cache created old incompatible version drake. incompatibility, make() stops give opportunity downgrade drake compatible version rather rerun targets scratch. log_progress Logical, whether log progress individual targets built. Progress logging creates extra files cache (usually .drake/ folder) slows make() little. need reduce limit number files cache, call make(log_progress = FALSE, recover = FALSE). graph Deprecated. trigger Name trigger apply targets. Ignored plan trigger column. See trigger() details. skip_targets Logical, whether skip building targets plan just import objects files. skip_imports Logical, whether totally neglect process imports jump straight targets. can useful imports massive just want test project, bad practice reproducible data analysis. argument overridden supply graph argument. skip_safety_checks Logical, whether skip safety checks workflow. Use peril. lazy_load old feature, currently questioned. current recommendations memory management, see https://books.ropensci.org/drake/memory.html#memory-strategies. lazy_load argument either character vector logical. dynamic targets, behavior always \"eager\" (see ). lazy_load argument static targets . Choices lazy_load: \"eager\": lazy loading. target loaded right away assign(). \"promise\": lazy loading delayedAssign() \"bind\": lazy loading active bindings: bindr::populate_env(). TRUE: \"promise\". FALSE: \"eager\". lazy_load \"eager\", drake prunes execution environment target/stage, removing superfluous targets loading dependencies need building. words, drake prepares environment advance tries memory efficient. lazy_load \"bind\" \"promise\", drake assigns promises load dependencies last minute. Lazy loading may memory efficient use cases, may duplicate loading dependencies, costing time. session_info Logical, whether save sessionInfo() cache. Defaults TRUE. behavior recommended serious make()s sake reproducibility. argument exists speed tests. Apparently, sessionInfo() bottleneck small make()s. cache_log_file Name CSV cache log file write. TRUE, default file name used (drake_cache.CSV). NULL, file written. activated, option writes flat text file represent state cache (fingerprints targets imports). put log file version control, commit history give easy representation results change time rest project changes. Hopefully, step right direction data reproducibility. seed Integer, root pseudo-random number generator seed use project. make(), drake generates unique local seed target using global seed target name. way, different pseudo-random numbers generated different targets, pseudo-randomness reproducible. ensure reproducibility across different R sessions, set.seed() .Random.seed ignored affect drake workflows. Conversely, make() usually change .Random.seed, even pseudo-random numbers generated. exception last point make(parallelism = \"clustermq\") clustermq package needs generate random numbers set ports sockets ZeroMQ. first call make() drake_config(), drake uses random number generator seed seed argument. , seed NULL (default), drake uses seed 0. subsequent make()s existing projects, project's cached seed used order ensure reproducibility. Thus, seed argument must either NULL seed project's cache (usually .drake/ folder). reset random number generator seed project, use clean(destroy = TRUE). caching Character string, either \"main\" \"worker\". \"main\": Targets built remote workers sent back main process. , main process saves cache (config$cache, usually file system storr). Appropriate remote workers access file system calling R session. Targets cached one time, may slow situations. \"worker\": Remote workers build targets, also save cache. , caching happens parallel. However, remote workers need access file system calling R session. Transferring target data across network can slow. keep_going Logical, whether still keep running make() targets fail. session Deprecated. effect now. pruning_strategy Deprecated. See memory_strategy. makefile_path Deprecated. console_log_file Deprecated favor log_make. ensure_workers Deprecated. garbage_collection Logical, whether call gc() time target built make(). template named list values fill {{ ... }} placeholders template files (e.g. drake_hpc_template_file()). template argument clustermq::Q() clustermq::workers. Enabled clustermq (make(parallelism = \"clustermq\")), future batchtools far. information, see clustermq package: https://github.com/mschubert/clustermq. template placeholders {{ job_name }} {{ n_jobs }} set way. sleep Optional function single numeric argument . Default: function() 0.01. conserve memory, drake assigns brand new closure sleep, custom function depend -memory data except loaded packages. parallel processing, drake uses central main process check parallel workers , affected high-performance computing workflows, wait data arrive network. loop iterations, main process sleeps avoid throttling. sleep argument make() drake_config() allows customize much time main process spends sleeping. sleep argument function takes argument returns numeric scalar, number seconds supply Sys.sleep() iteration checking. (, starts 1.) checking loop something sleeping iteration , reset back 1. sleep amount time checks, might supply something like function() 0.01. avoid consuming many resources heavier longer workflows, might use exponential back-: say, function() { 0.1 + 120 * pexp(- 1, rate = 0.01) }. hasty_build Deprecated memory_strategy Character scalar, name strategy drake uses load/unload target's dependencies memory. can give target memory strategy, (e.g. drake_plan(x = 1, y = target(f(x), memory_strategy = \"lookahead\"))) override global memory strategy. Choices: \"speed\": target newly built loaded memory, just keep . choice maximizes speed hogs memory. \"autoclean\": Just building new target, unload everything memory except target's direct dependencies. target built, discard memory. (Set garbage_collection = TRUE make sure really gone.) option conserves memory, sacrifices speed new target needs reload previously unloaded targets storage. \"preclean\": Just building new target, unload everything memory except target's direct dependencies. target built, keep memory drake determines can unloaded. option conserves memory, sacrifices speed new target needs reload previously unloaded targets storage. \"lookahead\": Just building new target, search dependency graph find targets needed rest current make() session. target built, keep memory next memory management stage. mode, targets memory need loaded, avoid superfluous reads cache. However, searching graph takes time, even double computational overhead large projects. \"unload\": Just building new target, unload targets memory. target built, keep memory. mode aggressively optimizes memory speed, commands triggers, manually load dependencies need using readd(). \"none\": manage memory . load unload anything building targets. target built, keep memory. mode aggressively optimizes memory speed, commands triggers, manually load dependencies need using readd(). even direct control targets drake keeps memory, see help file examples drake_envir(). Also see garbage_collection argument make() drake_config(). spec Deprecated. layout Deprecated. lock_envir Logical, whether lock config$envir make(). TRUE, make() quits error whenever command drake plan (prework) tries add, remove, modify non-hidden variables environment/workspace/R session. extremely important ensuring purity functions reproducibility/credibility/trust can place project. lock_envir set default TRUE drake version 7.0.0 higher. Namespaces never locked, e.g. envir getNamespace(\"packagename\"). history Logical, whether record build history targets. can also supply txtq, drake records history. Must TRUE drake_history() work later. recover Logical, whether activate automated data recovery. default FALSE Automated data recovery still stable. reproducibility issues. Targets recovered distant past may generated earlier versions R earlier package environments longer exist. always possible, especially dynamic files combined dynamic branching (e.g. dynamic = map(stuff) format = \"file\" etc.) since behavior harder predict advance. works: recover TRUE, drake tries salvage old target values cache instead running commands plan. target recoverable old value somewhere cache shares command, dependencies, etc. target built. old value generated make(recoverable = TRUE). conditions met, drake Assign recently-generated admissible data target, skip target's command. Functions recoverable() r_recoverable() show upstream outdated targets recovered way next make() r_make(). recoverable Logical, whether make target values recoverable make(recover = TRUE). requires writing extra files cache, prevents old metadata removed garbage collection (clean(garbage_collection = TRUE), gc() storrs). need limit cache size number files cache, consider make(recoverable = FALSE, progress = FALSE). Recovery always possible, especially dynamic files combined dynamic branching (e.g. dynamic = map(stuff) format = \"file\" etc.) since behavior harder predict advance. curl_handles named list curl handles. value object curl::new_handle(), name URL (start \"http\", \"https\", \"ftp\"). Example: list( http://httpbin.org/basic-auth = curl::new_handle( username = \"user\", password = \"passwd\" ) ) , plan file_in(\"http://httpbin.org/basic-auth/user/passwd\") drake authenticate using username password handle http://httpbin.org/basic-auth/. drake uses partial matching text find right handle file_in() URL, name handle complete URL (\"http://httpbin.org/basic-auth/user/passwd\") part URL (e.g. \"http://httpbin.org/\" \"http://httpbin.org/basic-auth/\"). multiple handles whose names match URL, drake choose closest match. max_expand Positive integer, optional. max_expand maximum number targets generate map(), cross(), group() dynamic transform. Useful massive number dynamic sub-targets want work first sub-targets scaling . Note: max_expand argument make() drake_config() dynamic branching . static branching max_expand argument drake_plan() transform_plan(). log_build_times Logical, whether record build_times targets. Mac users may notice 20% speedup make() build_times = FALSE. format Character, optional custom storage format targets without explicit target(format = ...) plan. Details formats: https://books.ropensci.org/drake/plans.html#special-data-formats--targets # nolint lock_cache Logical, whether lock cache running make() etc. usually recommended keep cache locking . However, interrupt make() can clean , cache stay locked, need manually unlock drake::drake_cache(\"xyz\")$unlock(). Repeatedly unlocking cache hand annoying, lock_cache = FALSE prevents cache locking first place. log_make Optional character scalar file name connection object (stdout()) dump maximally verbose log information make() functions (functions accept config argument, plus drake_config()). choose use text file console log, persist multiple function calls delete manually. Fields row log file, left right: - node name (short host name) computer (Sys.info()[\"nodename\"]). - process ID (Sys.getpid()). - timestamp date time (microseconds). - brief description drake . fields separated pipe symbols (\"|\"`). log_worker Logical, log_worker argument clustermq::workers() clustermq::Q(). relevant parallelism \"clustermq\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"configured drake workflow.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"drake, make() two stages: Configure workflow environment plan. Build targets. drake_config() function just step (1), common requirement make(), also utility functions like vis_drake_graph() outdated(). drake_config() requirement _drake.R script, powers r_make(), r_outdated(), r_vis_drake_graph(), etc.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":"recovery","dir":"Reference","previous_headings":"","what":"Recovery","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"make(recover = TRUE, recoverable = TRUE) powers automated data recovery. default recover FALSE targets recovered distant past may generated earlier versions R earlier package environments longer exist. works: recover TRUE, drake tries salvage old target values cache instead running commands plan. target recoverable old value somewhere cache shares command, dependencies, etc. target built. old value generated make(recoverable = TRUE). conditions met, drake Assign recently-generated admissible data target, skip target's command.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ending of _drake.R for r_make() and friends\n — drake_config","text":"","code":"if (FALSE) { isolate_example(\"quarantine side effects\", { if (requireNamespace(\"knitr\", quietly = TRUE)) { writeLines(   c(     \"library(drake)\",     \"load_mtcars_example()\",     \"drake_config(my_plan, targets = c(\\\"small\\\", \\\"large\\\"))\"   ),   \"_drake.R\" # default value of the `source` argument ) cat(readLines(\"_drake.R\"), sep = \"\\n\") r_outdated() r_make() r_outdated() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single target's command in debug mode.'\n — drake_debug","title":"Run a single target's command in debug mode.'\n — drake_debug","text":"valid dynamic branching. drake_debug() loads target's dependencies runs command debug mode (see browser(), debug(), debugonce()). function store target's value cache (see https://github.com/ropensci/drake/issues/587).","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single target's command in debug mode.'\n — drake_debug","text":"","code":"drake_debug(   target = NULL,   ...,   character_only = FALSE,   replace = FALSE,   verbose = TRUE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_debug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single target's command in debug mode.'\n — drake_debug","text":"target Name target. ... Arguments make(), plan environment. character_only Logical, whether name treated character symbol (just like character.library()). replace Logical. FALSE, items already environment replaced. verbose Logical, whether print target debugging. config Deprecated 2019-12-22.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_debug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single target's command in debug mode.'\n — drake_debug","text":"value target right built.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_debug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a single target's command in debug mode.'\n — drake_debug","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { # This example is not really a user-side demonstration. # It just walks through a dive into the internals. # Populate your workspace and write 'report.Rmd'. load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # out <- drake_debug(small, my_plan) # `small` was invisibly returned. # head(out) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_deps helper — drake_deps","title":"drake_deps helper — drake_deps","text":"Static code analysis.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_deps helper — drake_deps","text":"","code":"drake_deps(expr, exclude = character(0), restrict = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake_deps helper — drake_deps","text":"expr R expression exclude Character vector names symbols exclude code analysis. restrict Optional character vector allowable names globals. NULL, global symbols detectable. character vector, variables restrict count global variables.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_deps helper — drake_deps","text":"drake_deps object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_deps helper — drake_deps","text":"","code":"if (FALSE) { # stronger than roxygen dontrun expr <- quote({   a <- base::list(1)   b <- seq_len(10)   file_out(\"abc\")   file_in(\"xyz\")   x <- \"123\"   loadd(abc)   readd(xyz) }) drake_deps(expr) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_deps_ht.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_deps_ht helper — drake_deps_ht","title":"drake_deps_ht helper — drake_deps_ht","text":"Static code analysis.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_deps_ht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_deps_ht helper — drake_deps_ht","text":"","code":"drake_deps_ht(expr, exclude = character(0), restrict = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_deps_ht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake_deps_ht helper — drake_deps_ht","text":"expr R expression exclude Character vector names symbols exclude code analysis. restrict Optional character vector allowable names globals. NULL, global symbols detectable. character vector, variables restrict count global variables.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_deps_ht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_deps_ht helper — drake_deps_ht","text":"drake_deps_ht object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_deps_ht.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_deps_ht helper — drake_deps_ht","text":"","code":"if (FALSE) { # stronger than roxygen dontrun expr <- quote({   a <- base::list(1)   b <- seq_len(10)   file_out(\"abc\")   file_in(\"xyz\")   x <- \"123\"   loadd(abc)   readd(xyz) }) drake_deps_ht(expr) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_done.html","id":null,"dir":"Reference","previous_headings":"","what":"List done targets.\n — drake_done","title":"List done targets.\n — drake_done","text":"List targets completed current previous call make().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List done targets.\n — drake_done","text":"","code":"drake_done(cache = drake::drake_cache(path = path), path = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List done targets.\n — drake_done","text":"cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List done targets.\n — drake_done","text":"character vector target names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_done.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List done targets.\n — drake_done","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { plan <- drake_plan(x = 1, y = x) make(plan) drake_done() }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the environment where drake builds targets\n — drake_envir","title":"Get the environment where drake builds targets\n — drake_envir","text":"Call function inside commands plan get environment drake builds targets. Advanced users can use strategically remove targets memory make() running.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the environment where drake builds targets\n — drake_envir","text":"","code":"drake_envir(which = c(\"targets\", \"dynamic\", \"subtargets\", \"imports\"))"},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the environment where drake builds targets\n — drake_envir","text":"Character length 1, environment select. See details help file.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the environment where drake builds targets\n — drake_envir","text":"environment drake builds targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the environment where drake builds targets\n — drake_envir","text":"drake manages -memory targets 4 environments: one sub-targets, one whole dynamic targets, one static targets, one imported global objects functions. last environment usually environment call make(). Select appropriate environment use case argument drake_envir().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Get the environment where drake builds targets\n — drake_envir","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_envir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the environment where drake builds targets\n — drake_envir","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { plan <- drake_plan(   large_data_1 = sample.int(1e4),   large_data_2 = sample.int(1e4),   subset = c(large_data_1[seq_len(10)], large_data_2[seq_len(10)]),   summary = {     print(ls(envir = parent.env(drake_envir())))     # We don't need the large_data_* targets in memory anymore.     rm(large_data_1, large_data_2, envir = drake_envir(\"targets\"))     print(ls(envir = drake_envir(\"targets\")))     mean(subset)   } ) make(plan, cache = storr::storr_environment(), session_info = FALSE) }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the files of an example drake project.\n — drake_example","title":"Download the files of an example drake project.\n — drake_example","text":"drake_example() function downloads folder https://github.com/wlandau/drake-examples. default, creates new folder example name current working directory. files written, look enclosed README file. instructions available files https://github.com/wlandau/drake-examples.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the files of an example drake project.\n — drake_example","text":"","code":"drake_example(   example = \"main\",   to = getwd(),   destination = NULL,   overwrite = FALSE,   quiet = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the files of an example drake project.\n — drake_example","text":"example Name example. possible values names folders https://github.com/wlandau/drake-examples. Character scalar, folder containing code files example. passed exdir argument utils::unzip(). destination Deprecated; use instead. overwrite Logical, whether overwrite existing folder name drake example. quiet Logical, passed downloader::download() thus utils::download.file(). Whether download quietly print progress.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the files of an example drake project.\n — drake_example","text":"NULL","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the files of an example drake project.\n — drake_example","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (requireNamespace(\"downloader\")) { drake_examples() # List all the drake examples. # Sets up the same example from load_mtcars_example() drake_example(\"mtcars\") # Sets up the SLURM example. drake_example(\"slurm\") } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names of all the drake examples.\n — drake_examples","title":"List the names of all the drake examples.\n — drake_examples","text":"can find code files examples https://github.com/wlandau/drake-examples. drake_examples() function downloads list examples https://wlandau.github.io/drake-examples/examples.md, need internet connection.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names of all the drake examples.\n — drake_examples","text":"","code":"drake_examples(quiet = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/drake_examples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the names of all the drake examples.\n — drake_examples","text":"quiet Logical, passed downloader::download() thus utils::download.file(). Whether download quietly print progress.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_examples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the names of all the drake examples.\n — drake_examples","text":"Names drake examples.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the names of all the drake examples.\n — drake_examples","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (requireNamespace(\"downloader\")) { drake_examples() # List all the drake examples. # Sets up the example from load_mtcars_example() drake_example(\"mtcars\") # Sets up the SLURM example. drake_example(\"slurm\") } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_failed.html","id":null,"dir":"Reference","previous_headings":"","what":"List failed targets.\n — drake_failed","title":"List failed targets.\n — drake_failed","text":"List targets quit error make().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_failed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List failed targets.\n — drake_failed","text":"","code":"drake_failed(cache = drake::drake_cache(path = path), path = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_failed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List failed targets.\n — drake_failed","text":"cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_failed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List failed targets.\n — drake_failed","text":"character vector target names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_failed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List failed targets.\n — drake_failed","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { if (suppressWarnings(require(\"knitr\"))) { # Build a plan doomed to fail: bad_plan <- drake_plan(x = function_doesnt_exist()) cache <- storr::storr_environment() # optional try(   make(bad_plan, cache = cache, history = FALSE),   silent = TRUE ) # error drake_failed(cache = cache) # \"x\" e <- diagnose(x, cache = cache) # Retrieve the cached error log of x. names(e) e$error names(e$error) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"Do garbage collection on the drake cache.\n — drake_gc","title":"Do garbage collection on the drake cache.\n — drake_gc","text":"Garbage collection removes obsolete target values cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do garbage collection on the drake cache.\n — drake_gc","text":"","code":"drake_gc(   path = NULL,   search = NULL,   verbose = NULL,   cache = drake::drake_cache(path = path),   force = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do garbage collection on the drake cache.\n — drake_gc","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. verbose Deprecated 2019-09-11. cache drake cache. See new_cache(). supplied, path ignored. force Logical, whether load cache despite back compatibility issues running version drake.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do garbage collection on the drake cache.\n — drake_gc","text":"NULL","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_gc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Do garbage collection on the drake cache.\n — drake_gc","text":"Caution: garbage collection actually removes data longer recoverable drake_history() make(recover = TRUE). undo operation. Use risk.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_gc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do garbage collection on the drake cache.\n — drake_gc","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. # At this point, check the size of the '.drake/' cache folder. # Clean without garbage collection. clean(garbage_collection = FALSE) # The '.drake/' cache folder is still about the same size. drake_gc() # Do garbage collection on the cache. # The '.drake/' cache folder should have gotten much smaller. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_get_session_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Session info of the last call to make().\n — drake_get_session_info","title":"Session info of the last call to make().\n — drake_get_session_info","text":"default, session info saved make() ensure reproducibility. loaded packages versions recorded, example.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_get_session_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Session info of the last call to make().\n — drake_get_session_info","text":"","code":"drake_get_session_info(   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = 1L )"},{"path":"https://docs.ropensci.org/drake/reference/drake_get_session_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Session info of the last call to make().\n — drake_get_session_info","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_get_session_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Session info of the last call to make().\n — drake_get_session_info","text":"sessionInfo() last call make()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_get_session_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Session info of the last call to make().\n — drake_get_session_info","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. drake_get_session_info() # Get the cached sessionInfo() of the last make(). } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the workflow with ggraph/ggplot2\n — drake_ggraph","title":"Visualize the workflow with ggraph/ggplot2\n — drake_ggraph","text":"function requires packages ggplot2 ggraph. Install install.packages(c(\"ggplot2\", \"ggraph\")).","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the workflow with ggraph/ggplot2\n — drake_ggraph","text":"","code":"drake_ggraph(   ...,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   main = NULL,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   make_imports = TRUE,   from_scratch = FALSE,   full_legend = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   label_nodes = FALSE,   transparency = TRUE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the workflow with ggraph/ggplot2\n — drake_ggraph","text":"... Arguments make(), plan targets. build_times Character string logical. character, choices 1. \"build\": runtime command plus time take store target import. 2. \"command\": just runtime command. 3. \"none\": build times. logical, build_times selects whether show times `build_times(..., type = \"build\")`` use build times . See build_times() details. digits Number digits rounding build times targets_only Logical, whether skip imports include targets workflow plan. main Character string, title graph. Optional collection target/import names. nonempty, graph restrict neighborhood . Control neighborhood mode order. mode direction branch graph create neighborhood around . Use \"\" go upstream, \"\" go downstream, \"\" go ways disregard edge direction altogether. order far branch create neighborhood around . Defaults far possible. target neighborhood, custom file_out() files show_output_files TRUE. means actual graph order may slightly greater might expect, ensures consistency show_output_files = TRUE show_output_files = FALSE. subset Optional character vector. Subset targets/imports display graph. Applied , mode, order. advised: edges kept adjacent nodes subset. select intermediate nodes, edges drop graph. make_imports Logical, whether make imports first. Set FALSE increase speed risk using obsolete information. from_scratch Logical, whether assume targets made scratch next make(). Makes targets outdated, keeps information build progress previous make()s. full_legend Logical. TRUE, node types printed legend. FALSE, node types used printed legend. group Optional character scalar, name column used group nodes columns. columns names original drake plan choices. choices (\"status\") column names nodes . group nodes clusters graph, must also supply clusters argument. clusters Optional character vector values cluster . values must elements column nodes data frame specify group argument drake_graph_info(). show_output_files Logical, whether include file_out() files graph. label_nodes Logical, whether label nodes. FALSE, graph text next nodes, recommended large graphs lots targets. transparency Logical, whether allow transparency rendered graph. Set FALSE get warnings like \"semi-transparency supported device\". config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the workflow with ggraph/ggplot2\n — drake_ggraph","text":"ggplot2 object, can modify layers, show plot(), save file ggsave().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the workflow with ggraph/ggplot2\n — drake_ggraph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # Plot the network graph representation of the workflow. if (requireNamespace(\"ggraph\", quietly = TRUE)) {   drake_ggraph(my_plan) # Save to a file with `ggplot2::ggsave()`. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — drake_ggraph_impl","title":"Internal function with a drake_config() argument — drake_ggraph_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — drake_ggraph_impl","text":"","code":"drake_ggraph_impl(   config,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   main = NULL,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   make_imports = TRUE,   from_scratch = FALSE,   full_legend = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   label_nodes = FALSE,   transparency = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_ggraph_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — drake_ggraph_impl","text":"config drake_config() object. make_imports Logical, whether make imports first. Set FALSE save time risk obsolete output.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare the workflow graph for visualization\n — drake_graph_info","title":"Prepare the workflow graph for visualization\n — drake_graph_info","text":"returned data frames, can plot custom visNetwork graph.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare the workflow graph for visualization\n — drake_graph_info","text":"","code":"drake_graph_info(   ...,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   font_size = 20,   from_scratch = FALSE,   make_imports = TRUE,   full_legend = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   hover = FALSE,   on_select_col = NULL,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare the workflow graph for visualization\n — drake_graph_info","text":"... Arguments make(), plan targets. Optional collection target/import names. nonempty, graph restrict neighborhood . Control neighborhood mode order. mode direction branch graph create neighborhood around . Use \"\" go upstream, \"\" go downstream, \"\" go ways disregard edge direction altogether. order far branch create neighborhood around . Defaults far possible. target neighborhood, custom file_out() files show_output_files TRUE. means actual graph order may slightly greater might expect, ensures consistency show_output_files = TRUE show_output_files = FALSE. subset Optional character vector. Subset targets/imports display graph. Applied , mode, order. advised: edges kept adjacent nodes subset. select intermediate nodes, edges drop graph. build_times Character string logical. character, choices 1. \"build\": runtime command plus time take store target import. 2. \"command\": just runtime command. 3. \"none\": build times. logical, build_times selects whether show times `build_times(..., type = \"build\")`` use build times . See build_times() details. digits Number digits rounding build times targets_only Logical, whether skip imports include targets workflow plan. font_size Numeric, font size node labels graph from_scratch Logical, whether assume targets made scratch next make(). Makes targets outdated, keeps information build progress previous make()s. make_imports Logical, whether make imports first. Set FALSE increase speed risk using obsolete information. full_legend Logical. TRUE, node types printed legend. FALSE, node types used printed legend. group Optional character scalar, name column used group nodes columns. columns names original drake plan choices. choices (\"status\") column names nodes . group nodes clusters graph, must also supply clusters argument. clusters Optional character vector values cluster . values must elements column nodes data frame specify group argument drake_graph_info(). show_output_files Logical, whether include file_out() files graph. hover Logical, whether show text (file contents, commands, etc.) hover cursor node. on_select_col Optional string corresponding column name plan provide data on_select event. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare the workflow graph for visualization\n — drake_graph_info","text":"list three data frames: one nodes, one edges, one legend nodes. list also contains default title graph.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare the workflow graph for visualization\n — drake_graph_info","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (requireNamespace(\"visNetwork\", quietly = TRUE)) { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). vis_drake_graph(my_plan) # Get a list of data frames representing the nodes, edges, # and legend nodes of the visNetwork graph from vis_drake_graph(). raw_graph <- drake_graph_info(my_plan) # Choose a subset of the graph. smaller_raw_graph <- drake_graph_info(   my_plan,   from = c(\"small\", \"reg2\"),   mode = \"in\" ) # Inspect the raw graph. str(raw_graph) # Use the data frames to plot your own custom visNetwork graph. # For example, you can omit the legend nodes # and change the direction of the graph. library(visNetwork) graph <- visNetwork(nodes = raw_graph$nodes, edges = raw_graph$edges) visHierarchicalLayout(graph, direction = 'UD') } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function — drake_graph_info_impl","title":"Internal function — drake_graph_info_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function — drake_graph_info_impl","text":"","code":"drake_graph_info_impl(   config,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   font_size = 20,   from_scratch = FALSE,   make_imports = TRUE,   full_legend = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   hover = FALSE,   on_select_col = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_graph_info_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function — drake_graph_info_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":null,"dir":"Reference","previous_headings":"","what":"History and provenance\n — drake_history","title":"History and provenance\n — drake_history","text":"See history provenance targets: ran, ran , function arguments used, get old data back.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"History and provenance\n — drake_history","text":"","code":"drake_history(cache = NULL, history = NULL, analyze = TRUE, verbose = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"History and provenance\n — drake_history","text":"cache drake cache created new_cache(). See also drake_cache(). history Logical, whether record build history targets. can also supply txtq, drake records history. Must TRUE drake_history() work later. analyze Logical, whether analyze drake_plan() commands arguments function calls. slow requires parsing analyzing lots R code. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"History and provenance\n — drake_history","text":"data frame target history.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"History and provenance\n — drake_history","text":"drake_history() returns data frame following columns. target: name target. current: logical, whether row describes data actually assigned target name cache, e.g. get loadd(target) readd(target). tell target date. built: target's value stored cache. true creation date target's value, recovery date make(recover = TRUE). exists: logical, whether target's historical value still exists cache. Garbage collection via (clean(garbage_collection = TRUE) drake_cache()$gc()) remove historical values, clean() default settings . hash: fingerprint target's historical value cache. value still exists, can read drake_cache()$get_value(hash). command: drake_plan() command executed build target. seed: random number generator seed. runtime: time took execute drake_plan() command. include overhead due drake's processing. analyze TRUE, various columns included show explicitly-named length-1 arguments function calls commands. See \"Provenance\" section details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":"provenance","dir":"Reference","previous_headings":"","what":"Provenance","title":"History and provenance\n — drake_history","text":"analyze TRUE, drake scans drake_plan() commands function arguments mentions history. function argument shows : 1. length 1.  2. atomic, .e. base type: logical, integer, real, complex, character, raw.  3. explicitly named function call, example, x detected 1 fn(list(x = 1)) f(list(1)). exceptions file_out(), file_in(), knitr_in(). example, filename detected \"my_file.csv\" process_data(filename = file_in(\"my_file.csv\")). NB: process_data(filename = file_in(\"\", \"b\")) filename detected value must atomic.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"History and provenance\n — drake_history","text":"","code":"if (FALSE) { isolate_example(\"contain side-effects\", { if (requireNamespace(\"knitr\", quietly = TRUE)) { # First, let's iterate on a drake workflow. load_mtcars_example() make(my_plan, history = TRUE, verbose = 0L) # Naturally, we'll make updates to our targets along the way. reg2 <- function(d) {   d$x2 <- d$x ^ 3   lm(y ~ x2, data = d) } Sys.sleep(0.01) make(my_plan, history = TRUE, verbose = 0L) # The history is a data frame about all the recorded runs of your targets. out <- drake_history(analyze = TRUE) print(out) # Let's use the history to recover the oldest version # of our regression2_small target. oldest_reg2_small <- max(which(out$target == \"regression2_small\")) hash_oldest_reg2_small <- out[oldest_reg2_small, ]$hash cache <- drake_cache() cache$get_value(hash_oldest_reg2_small) # If you run clean(), drake can still find all the targets. clean(small) drake_history() # But if you run clean() with garbage collection, # older versions of your targets may be gone. clean(large, garbage_collection = TRUE) drake_history() invisible() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a template file for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_file","title":"Write a template file for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_file","text":"See example files drake_examples() drake_example() example usage.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a template file for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_file","text":"","code":"drake_hpc_template_file(   file = drake::drake_hpc_template_files(),   to = getwd(),   overwrite = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a template file for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_file","text":"file Name template file, including \"tmpl\" extension. Character vector, write file. overwrite Logical, whether overwrite existing file name.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a template file for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_file","text":"NULL returned, batchtools template file written.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a template file for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_file","text":"","code":"if (FALSE) { plan <- drake_plan(x = rnorm(1e7), y = rnorm(1e7)) # List the available template files. drake_hpc_template_files() # Write a SLURM template file. out <- file.path(tempdir(), \"slurm_batchtools.tmpl\") drake_hpc_template_file(\"slurm_batchtools.tmpl\", to = tempdir()) cat(readLines(out), sep = \"\\n\") # library(future.batchtools) # nolint # future::plan(batchtools_slurm, template = out) # nolint # make(plan, parallelism = \"future\", jobs = 2) # nolint }"},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List the available example template files for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_files","title":"List the available example template files for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_files","text":"See example files drake_examples() drake_example() example usage.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the available example template files for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_files","text":"","code":"drake_hpc_template_files()"},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the available example template files for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_files","text":"character vector example template files can write drake_hpc_template_file().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_hpc_template_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the available example template files for deploying\nwork to a cluster / job scheduler.\n — drake_hpc_template_files","text":"","code":"if (FALSE) { plan <- drake_plan(x = rnorm(1e7), y = rnorm(1e7)) # List the available template files. drake_hpc_template_files() # Write a SLURM template file. out <- file.path(tempdir(), \"slurm_batchtools.tmpl\") drake_hpc_template_file(\"slurm_batchtools.tmpl\", to = tempdir()) cat(readLines(out), sep = \"\\n\") # library(future.batchtools) # nolint # future::plan(batchtools_slurm, template = out) # nolint # make(plan, parallelism = \"future\", jobs = 2) # nolint }"},{"path":"https://docs.ropensci.org/drake/reference/drake_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the initial pre-build metadata\nof a target or import.\n — drake_meta","title":"Compute the initial pre-build metadata\nof a target or import.\n — drake_meta","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the initial pre-build metadata\nof a target or import.\n — drake_meta","text":"","code":"drake_meta(target, config)"},{"path":"https://docs.ropensci.org/drake/reference/drake_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the initial pre-build metadata\nof a target or import.\n — drake_meta","text":"target Character scalar, name target get metadata. config Top-level internal configuration list produced drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the initial pre-build metadata\nof a target or import.\n — drake_meta","text":"list metadata target. include file modification time target file. piece computed later make() drake:::store_outputs().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the initial pre-build metadata\nof a target or import.\n — drake_meta","text":"metadata helps determine target date outdated. metadata imports used compute metadata targets. Target metadata computed drake_meta(), drake:::store_outputs() completes metadata target built. words, output drake_meta() corresponds state target immediately make() builds . See diagnose() read final metadata target, including errors, warnings, messages last build.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Show drake's color palette.\n — drake_palette","title":"Show drake's color palette.\n — drake_palette","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show drake's color palette.\n — drake_palette","text":"","code":"drake_palette()"},{"path":"https://docs.ropensci.org/drake/reference/drake_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show drake's color palette.\n — drake_palette","text":"console message, actual return value NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show drake's color palette.\n — drake_palette","text":"function used console graph visualizations. console must crayon package enabled. palette applies console output (internal functions console() console_many_targets()) node colors graph visualizations. want contribute improvements palette, please drake_palette() visNetwork::visNetwork(nodes = legend_nodes())","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"drake plan data frame columns \"target\" \"command\". target R object produced workflow, command R code produce .","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"","code":"drake_plan(   ...,   list = NULL,   file_targets = NULL,   strings_in_dots = NULL,   tidy_evaluation = NULL,   transform = TRUE,   trace = FALSE,   envir = parent.frame(),   tidy_eval = TRUE,   max_expand = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"... collection symbols/targets commands assigned . See examples details. list Deprecated file_targets Deprecated. strings_in_dots Deprecated. tidy_evaluation Deprecated. Use tidy_eval instead. transform Logical, whether transform plan larger plan targets. Requires transform field target(). See examples details. trace Logical, whether add columns show happens target transformations. envir Environment tidy evaluation. tidy_eval Logical, whether use tidy evaluation (e.g. unquoting/!!) resolving commands. Tidy evaluation transformations always turned regardless value supply argument. max_expand Positive integer, optional. max_expand maximum number targets generate map(), split(), cross() transform. Useful massive plan want test visualize strategic subset targets scaling . Note: max_expand argument drake_plan() transform_plan() static branching . dynamic branching max_expand argument make() drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"data frame targets, commands, optional custom columns.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"Besides \"target\" \"command\", drake_plan() understands special set optional columns. details, visit https://books.ropensci.org/drake/plans.html#special-custom-columns---plan # nolint","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"columns","dir":"Reference","previous_headings":"","what":"Columns","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"drake_plan() creates special data frame. minimum, data frame must columns target command target names R code chunks build , respectively. can add custom columns , either target() (e.g. drake_plan(y = target(f(x), transform = map(c(1, 2)), format = \"fst\"))) appending columns post-hoc (e.g. plan$col <- vals). custom columns special. optional, drake looks various points workflow. transform: call map(), split(), cross(), combine() create manipulate large collections targets. Details: (https://books.ropensci.org/drake/plans.html#large-plans). # nolint format: set storage format save big targets efficiently. See \"Formats\" section help file details. trigger: rule decide whether target needs run. recommended define one target(). Details: https://books.ropensci.org/drake/triggers.html. hpc: logical values (TRUE/FALSE/NA) whether send target parallel workers. Visit https://books.ropensci.org/drake/hpc.html#selectivity learn . resources: target-specific lists resources computing cluster. See https://books.ropensci.org/drake/hpc.html#advanced-options details. caching: overrides caching argument make() target individually. Possible values: \"main\": tell main process store target cache. \"worker\": tell HPC worker store target cache. NA: default caching argument make(). elapsed cpu: number seconds wait target build timing (elapsed elapsed time cpu CPU time). retries: number times retry building target event error. seed: optional pseudo-random number generator (RNG) seed target. drake usually comes unique reproducible target-specific seeds using global seed (seed argument make() drake_config()) target names, can overwrite automatic seeds. NA entries default back drake's automatic seeds. max_expand: dynamic branching . max_expand argument make(), target--target basis. Limits number sub-targets created given target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"formats","dir":"Reference","previous_headings":"","what":"Formats","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"Specialized target formats increase efficiency flexibility. allow save specialized objects like keras models, others increase speed conserving storage memory. can declare target-specific formats plan (e.g. drake_plan(x = target(big_data_frame, format = \"fst\"))) supply global default format targets make(). Either way, formats specialized installation requirements (e.g. R packages) installed drake default. need install separately . Available formats: \"file\": Dynamic files. use format, simply create local files directories return character vector paths target's value. , drake watch changes files subsequent calls make(). flexible alternative file_in() file_out(), compatible dynamic branching. See https://github.com/ropensci/drake/pull/1178 example. \"fst\": save big data frames fast. Requires fst package. Note: format strips non-data-frame attributes \"fst_tbl\": Like \"fst\", tibble objects. Requires fst tibble packages. Strips away non-data-frame non-tibble attributes. \"fst_dt\": Like \"fst\" format, data.table objects. Requires fst data.table packages. Strips away non-data-frame non-data-table attributes. \"diskframe\": Stores disk.frame objects, potentially larger memory. Requires fst disk.frame packages. Coerces objects disk.frames. Note: disk.frame objects get moved drake cache (subfolder .drake/ workflows). ensure data transfer fast, best save disk.frame objects physical storage drive drake cache, .disk.frame(your_dataset, outdir = drake_tempfile()). \"keras\": save Keras models HDF5 files. Requires keras package. \"qs\": save R object can properly serialized qs package. Requires qs package. Uses qsave() qread(). Uses default settings qs version 0.20.2. \"rds\": save R object can properly serialized. Requires R version >= 3.5.0 due ALTREP. Note: \"rds\" format uses gzip compression, slow. \"qs\" superior format.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"transformations","dir":"Reference","previous_headings":"","what":"Transformations","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"drake special syntax generating large plans. code look something like drake_plan(y = target(f(x), transform = map(x = c(1, 2, 3))) can read interface https://books.ropensci.org/drake/plans.html#large-plans. # nolint","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"static-branching","dir":"Reference","previous_headings":"","what":"Static branching","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"static branching, define batches targets based information know advance. Overall usage looks like drake_plan(<x> = target(<...>, transform = <call>), <x> name target group targets. <...> optional arguments target(). <call> call one transformation functions. Transformation function usage: map(..., .data, .names, .id, .tag_in, .tag_out) split(..., slices, margin = 1L, drop = FALSE, .names, .tag_in, .tag_out) # nolint cross(..., .data, .names, .id, .tag_in, .tag_out) combine(..., ., .names, .id, .tag_in, .tag_out)","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"dynamic-branching","dir":"Reference","previous_headings":"","what":"Dynamic branching","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"map(..., .trace) cross(..., .trace) group(..., ., .trace) map() cross() create dynamic sub-targets variables supplied dots. static branching, variables supplied map() must equal length. group(f(data), .= x) makes new dynamic sub-targets data. , data can either static dynamic. data dynamic, group() aggregates existing sub-targets. data static, group() splits data multiple subsets based groupings .. Differences static branching: ... must contain unnamed symbols values supplied, must names targets. Arguments .id, .tag_in, .tag_out longer apply.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a drake plan\nfor the plan argument of make().\n — drake_plan","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { # For more examples, visit # https://books.ropensci.org/drake/plans.html.  # Create drake plans: mtcars_plan <- drake_plan(   write.csv(mtcars[, c(\"mpg\", \"cyl\")], file_out(\"mtcars.csv\")),   value = read.csv(file_in(\"mtcars.csv\")) ) if (requireNamespace(\"visNetwork\", quietly = TRUE)) {   plot(mtcars_plan) # fast simplified call to vis_drake_graph() } mtcars_plan make(mtcars_plan) # Makes `mtcars.csv` and then `value` head(readd(value)) # You can use knitr inputs too. See the top command below.  load_mtcars_example() head(my_plan) if (requireNamespace(\"knitr\", quietly = TRUE)) {   plot(my_plan) } # The `knitr_in(\"report.Rmd\")` tells `drake` to dive into the active # code chunks to find dependencies. # There, `drake` sees that `small`, `large`, and `coef_regression2_small` # are loaded in with calls to `loadd()` and `readd()`. deps_code(\"report.Rmd\")  # Formats are great for big data: https://github.com/ropensci/drake/pull/977 # Below, each target is 1.6 GB in memory. # Run make() on this plan to see how much faster fst is! n <- 1e8 plan <- drake_plan(   data_fst = target(     data.frame(x = runif(n), y = runif(n)),     format = \"fst\"   ),   data_old = data.frame(x = runif(n), y = runif(n)) )  # Use transformations to generate large plans. # Read more at # `https://books.ropensci.org/drake/plans.html#create-large-plans-the-easy-way`. # nolint drake_plan(   data = target(     simulate(nrows),     transform = map(nrows = c(48, 64)),     custom_column = 123   ),   reg = target(     reg_fun(data),    transform = cross(reg_fun = c(reg1, reg2), data)   ),   summ = target(     sum_fun(data, reg),    transform = cross(sum_fun = c(coef, residuals), reg)   ),   winners = target(     min(summ),     transform = combine(summ, .by = c(data, sum_fun))   ) )  # Split data among multiple targets. drake_plan(   large_data = get_data(),   slice_analysis = target(     analyze(large_data),     transform = split(large_data, slices = 4)   ),   results = target(     rbind(slice_analysis),     transform = combine(slice_analysis)   ) )  # Set trace = TRUE to show what happened during the transformation process. drake_plan(   data = target(     simulate(nrows),     transform = map(nrows = c(48, 64)),     custom_column = 123   ),   reg = target(     reg_fun(data),    transform = cross(reg_fun = c(reg1, reg2), data)   ),   summ = target(     sum_fun(data, reg),    transform = cross(sum_fun = c(coef, residuals), reg)   ),   winners = target(     min(summ),     transform = combine(summ, .by = c(data, sum_fun))   ),   trace = TRUE )  # You can create your own custom columns too. # See ?triggers for more on triggers. drake_plan(   website_data = target(     command = download_data(\"www.your_url.com\"),     trigger = \"always\",     custom_column = 5   ),   analysis = analyze(website_data) )  # Tidy evaluation can help generate super large plans. sms <- rlang::syms(letters) # To sub in character args, skip this. drake_plan(x = target(f(char), transform = map(char = !!sms)))  # Dynamic branching # Get the mean mpg for each cyl in the mtcars dataset. plan <- drake_plan(   raw = mtcars,   group_index = raw$cyl,   munged = target(raw[, c(\"mpg\", \"cyl\")], dynamic = map(raw)),   mean_mpg_by_cyl = target(     data.frame(mpg = mean(munged$mpg), cyl = munged$cyl[1]),     dynamic = group(munged, .by = group_index)   ) ) make(plan) readd(mean_mpg_by_cyl) }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_plan_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the code required to produce a given drake plan\n — drake_plan_source","title":"Show the code required to produce a given drake plan\n — drake_plan_source","text":"supply plan, drake_plan_source() supplies code generate plan. prettycode package, installed, also get nice syntax highlighting console print .","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the code required to produce a given drake plan\n — drake_plan_source","text":"","code":"drake_plan_source(plan)"},{"path":"https://docs.ropensci.org/drake/reference/drake_plan_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the code required to produce a given drake plan\n — drake_plan_source","text":"plan workflow plan data frame (see drake_plan())","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_plan_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the code required to produce a given drake plan\n — drake_plan_source","text":"character vector lines text. text call drake_plan() produces plan provide.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_plan_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the code required to produce a given drake plan\n — drake_plan_source","text":"","code":"plan <- drake::drake_plan(   small_data = download_data(\"https://some_website.com\"),   large_data_raw = target(     command = download_data(\"https://lots_of_data.com\"),     trigger = trigger(       change = time_last_modified(\"https://lots_of_data.com\"),       command = FALSE,       depend = FALSE     ),     timeout = 1e3   ) ) print(plan) #> # A tibble: 2 × 4 #>   target         command                                   trigger       timeout #>   <chr>          <expr_lst>                                <expr_lst>      <dbl> #> 1 small_data     download_data(\"https://some_website.com\") NA          …      NA #> 2 large_data_raw download_data(\"https://lots_of_data.com\") trigger(chan…    1000 if (requireNamespace(\"styler\", quietly = TRUE)) {   source <- drake_plan_source(plan)   print(source) # Install the prettycode package for syntax highlighting.   file <- tempfile() # Path to an R script to contain the drake_plan() call.   writeLines(source, file) # Save the code to an R script. } #> drake_plan( #>   small_data = download_data(\"https://some_website.com\"), #>   large_data_raw = target( #>     command = download_data(\"https://lots_of_data.com\"), #>     trigger = trigger( #>       change = time_last_modified(\"https://lots_of_data.com\"), #>       command = FALSE, #>       depend = FALSE #>     ), #>     timeout = 1000 #>   ) #> )"},{"path":"https://docs.ropensci.org/drake/reference/drake_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the build progress of your targets\n — drake_progress","title":"Get the build progress of your targets\n — drake_progress","text":"Objects drake imported, built, attempted build listed \"done\" \"running\". Skipped objects listed.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the build progress of your targets\n — drake_progress","text":"","code":"drake_progress(   ...,   list = character(0),   cache = drake::drake_cache(path = path),   path = NULL,   progress = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/drake_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the build progress of your targets\n — drake_progress","text":"... Objects load cache, names (unquoted) character strings (quoted). tidyselect package installed, can also supply dplyr-style tidyselect commands starts_with(), ends_with(), one_of(). list Character vector naming objects loaded cache. Similar list argument remove(). cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL. progress Character vector filtering build progress results. Defaults NULL (filtering) report progress objects. Supported filters \"done\", \"running\", \"failed\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the build progress of your targets\n — drake_progress","text":"build progress target reached current make() far.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the build progress of your targets\n — drake_progress","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. # Watch the changing drake_progress() as make() is running. drake_progress() # List all the targets reached so far. drake_progress(small, large) # Just see the progress of some targets. drake_progress(list = c(\"small\", \"large\")) # Same as above. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_quotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Put quotes around each element of a character vector.\n — drake_quotes","title":"Put quotes around each element of a character vector.\n — drake_quotes","text":"Deprecated 2019-01-01","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_quotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put quotes around each element of a character vector.\n — drake_quotes","text":"","code":"drake_quotes(x = NULL, single = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/drake_quotes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put quotes around each element of a character vector.\n — drake_quotes","text":"x Character vector object coerced character. single Add single quotes TRUE double quotes otherwise.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_quotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Put quotes around each element of a character vector.\n — drake_quotes","text":"Character vector quotes around .","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_running.html","id":null,"dir":"Reference","previous_headings":"","what":"List running targets.\n — drake_running","title":"List running targets.\n — drake_running","text":"List targets either currently built call make(), progress make() interrupted.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List running targets.\n — drake_running","text":"","code":"drake_running(cache = drake::drake_cache(path = path), path = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_running.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List running targets.\n — drake_running","text":"cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_running.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List running targets.\n — drake_running","text":"character vector target names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_running.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List running targets.\n — drake_running","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. drake_running() # Everything should be done. # nolint start # Run make() in one R session... # slow_plan <- drake_plan(x = Sys.sleep(2)) # make(slow_plan) # and see the progress in another session. # drake_running() # nolint end } }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an example _drake.R script to the current working directory. — drake_script","title":"Write an example _drake.R script to the current working directory. — drake_script","text":"_drake.R file required r_make() friends. See r_make() help file details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an example _drake.R script to the current working directory. — drake_script","text":"","code":"drake_script(code = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an example _drake.R script to the current working directory. — drake_script","text":"code R code put _drake.R current working directory. NULL, example script written.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an example _drake.R script to the current working directory. — drake_script","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an example _drake.R script to the current working directory. — drake_script","text":"","code":"if (FALSE) { isolate_example(\"contain side-effects\", { drake_script({   library(drake)   plan <- drake_plan(x = 1)   drake_config(plan, lock_cache = FALSE) }) cat(readLines(\"_drake.R\"), sep = \"\\n\") r_make() }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Session info of the last call to make().\n — drake_session","title":"Session info of the last call to make().\n — drake_session","text":"Deprecated. Use drake_get_session_info() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Session info of the last call to make().\n — drake_session","text":"","code":"drake_session(   path = getwd(),   search = TRUE,   cache = drake::get_cache(path = path, search = search, verbose = verbose),   verbose = 1L )"},{"path":"https://docs.ropensci.org/drake/reference/drake_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Session info of the last call to make().\n — drake_session","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Session info of the last call to make().\n — drake_session","text":"sessionInfo() last call make()","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Session info of the last call to make().\n — drake_session","text":"Deprecated 2018-12-06.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_settings helper — drake_settings","title":"drake_settings helper — drake_settings","text":"List class drake_settings.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_settings helper — drake_settings","text":"","code":"drake_settings(   cache_log_file = NULL,   curl_handles = list(),   garbage_collection = FALSE,   jobs = 1L,   jobs_preprocess = 1L,   keep_going = TRUE,   lazy_load = \"eager\",   lib_loc = character(0),   lock_cache = TRUE,   lock_envir = TRUE,   log_build_times = TRUE,   log_progress = TRUE,   memory_strategy = \"speed\",   parallelism = \"loop\",   recover = TRUE,   recoverable = TRUE,   seed = 0L,   session_info = TRUE,   skip_imports = FALSE,   skip_safety_checks = FALSE,   skip_targets = FALSE,   sleep = function(i) 0.01,   template = list(),   log_worker = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/drake_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_settings helper — drake_settings","text":"drake_settings object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_settings helper — drake_settings","text":"","code":"if (FALSE) { # stronger than roxygen dontrun drake_settings() }"},{"path":"https://docs.ropensci.org/drake/reference/drake_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a strategic subset of a dataset.\n — drake_slice","title":"Take a strategic subset of a dataset.\n — drake_slice","text":"drake_slice() similar split(). functions partition data disjoint subsets, whereas split() returns subsets, drake_slice() returns just one. words, drake_slice(..., index = ) returns split(...)[[]]. features: 1. drake_slice() works vectors, data frames, matrices, lists, arbitrary arrays. 2. Like parallel::splitIndices(), drake_slice() tries distribute data uniformly across subsets. See examples learn splitting useful drake.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a strategic subset of a dataset.\n — drake_slice","text":"","code":"drake_slice(data, slices, index, margin = 1L, drop = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/drake_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a strategic subset of a dataset.\n — drake_slice","text":"data list, vector, data frame, matrix, arbitrary array. Anything length() dim(). slices Integer length 1, number slices (.e. pieces) whole dataset. Remember, drake_slice(index = ) returns slice number . index Integer length 1, piece partition return. margin Integer length 1, margin split data. example, data frame matrix, use margin = 1 split rows margin = 2 split columns. Similar MARGIN apply(). drop Logical, matrices arrays. TRUE, result coerced lowest possible dimension. See ?[` details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a strategic subset of a dataset.\n — drake_slice","text":"subset data.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take a strategic subset of a dataset.\n — drake_slice","text":"","code":"# Simple usage x <- matrix(seq_len(20), nrow = 5) x #>      [,1] [,2] [,3] [,4] #> [1,]    1    6   11   16 #> [2,]    2    7   12   17 #> [3,]    3    8   13   18 #> [4,]    4    9   14   19 #> [5,]    5   10   15   20 drake_slice(x, slices = 3, index = 1) #>      [,1] [,2] [,3] [,4] #> [1,]    1    6   11   16 #> [2,]    2    7   12   17 drake_slice(x, slices = 3, index = 2) #>      [,1] [,2] [,3] [,4] #> [1,]    3    8   13   18 #> [2,]    4    9   14   19 drake_slice(x, slices = 3, index = 3) #>      [,1] [,2] [,3] [,4] #> [1,]    5   10   15   20 drake_slice(x, slices = 3, margin = 2, index = 1) #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 # In drake, you can split a large dataset over multiple targets. if (FALSE) { isolate_example(\"contain side effects\", { plan <- drake_plan(   large_data = mtcars,   data_split = target(     drake_slice(large_data, slices = 32, index = i),     transform = map(i = !!seq_len(32))   ) ) plan cache <- storr::storr_environment() make(plan, cache = cache, session_info = FALSE, verbose = FALSE) readd(data_split_1L, cache = cache) readd(data_split_2L, cache = cache) }) }"},{"path":"https://docs.ropensci.org/drake/reference/drake_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn valid expressions into character strings.\n — drake_strings","title":"Turn valid expressions into character strings.\n — drake_strings","text":"Deprecated 2019-01-01","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn valid expressions into character strings.\n — drake_strings","text":"","code":"drake_strings(...)"},{"path":"https://docs.ropensci.org/drake/reference/drake_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn valid expressions into character strings.\n — drake_strings","text":"... Unquoted symbols turn character strings.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn valid expressions into character strings.\n — drake_strings","text":"character vector.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_tempfile.html","id":null,"dir":"Reference","previous_headings":"","what":"drake tempfile\n — drake_tempfile","title":"drake tempfile\n — drake_tempfile","text":"Create path temporary file inside drake's cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_tempfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake tempfile\n — drake_tempfile","text":"","code":"drake_tempfile(path = NULL, cache = drake::drake_cache(path = path))"},{"path":"https://docs.ropensci.org/drake/reference/drake_tempfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake tempfile\n — drake_tempfile","text":"path Path drake cache (usually hidden .drake/ folder) NULL. cache drake cache. See new_cache(). supplied, path ignored.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_tempfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"drake tempfile\n — drake_tempfile","text":"function just like tempfile() function base R except path points special location inside drake's cache. ensures file needs copied persistent storage cache, drake need copy across physical storage media. Example: \"diskframe\" format. See \"Formats\" \"Columns\" sections drake_plan() help file. Unless supply cache path cache (see drake_cache()) drake assume cache folder named .drake/ located either working directory ancestor working directory.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/drake_tempfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake tempfile\n — drake_tempfile","text":"","code":"cache <- new_cache(tempfile()) # No need to supply a cache if a .drake/ folder exists. drake_tempfile(cache = cache) #> [1] \"/tmp/RtmpKIGXFM/file10182a71f821/drake/tmp/file10184f7fcde9\" drake_plan(   x = target(     as.disk.frame(large_data, outdir = drake_tempfile()),     format = \"diskframe\"   ) ) #> # A tibble: 1 × 3 #>   target command                                              format    #>   <chr>  <expr_lst>                                           <chr>     #> 1 x      as.disk.frame(large_data, outdir = drake_tempfile()) diskframe"},{"path":"https://docs.ropensci.org/drake/reference/drake_tip.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a random tip about drake.\n — drake_tip","title":"Output a random tip about drake.\n — drake_tip","text":"Deprecated 2019-01-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_tip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a random tip about drake.\n — drake_tip","text":"","code":"drake_tip()"},{"path":"https://docs.ropensci.org/drake/reference/drake_tip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output a random tip about drake.\n — drake_tip","text":"character scalar tip use drake.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_tip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output a random tip about drake.\n — drake_tip","text":"Tips usually related news usage.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_triggers.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_triggers helper — drake_triggers","title":"drake_triggers helper — drake_triggers","text":"Triggers target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_triggers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_triggers helper — drake_triggers","text":"","code":"drake_triggers(   command = TRUE,   depend = TRUE,   file = TRUE,   seed = TRUE,   format = TRUE,   condition = FALSE,   change = NULL,   mode = c(\"whitelist\", \"blacklist\", \"condition\") )"},{"path":"https://docs.ropensci.org/drake/reference/drake_triggers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake_triggers helper — drake_triggers","text":"command Logical, whether rebuild target drake_plan() command changes. depend Logical, whether rebuild non-file dependency changes. file Logical, whether rebuild target file_in()/file_out()/knitr_in() file changes. Also applies external data tracked target(format = \"file\"). seed Logical, whether rebuild target seed changes. makes difference set custom seed column drake_plan() point workflow. format Logical, whether rebuild target choice specialized data format changes: example, use target(format = \"qs\") one instance target(format = \"fst\") next. See https://books.ropensci.org/drake/plans.html#special-data-formats--targets # nolint details formats. condition R code (expression language object) returns logical. target rebuild code evaluates TRUE. change R code (expression language object) returns value. target rebuild value different last time already cached. mode character scalar equal \"whitelist\" (default) \"blacklist\" \"condition\". mode argument, can choose condition trigger factors decision build skip target. options. \"whitelist\" (default): rebuild target whenever condition evaluates TRUE. Otherwise, defer triggers. behavior decision rule described \"Details\" section help file. \"blacklist\": skip target whenever condition evaluates FALSE. Otherwise, defer triggers. \"condition\": , condition trigger decider, ignore triggers. rebuild target whenever condition evaluates TRUE skip whenever condition evaluates FALSE.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_unquote.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove leading and trailing\nescaped quotes from character strings.\n — drake_unquote","title":"Remove leading and trailing\nescaped quotes from character strings.\n — drake_unquote","text":"Deprecated 2019-01-01","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_unquote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove leading and trailing\nescaped quotes from character strings.\n — drake_unquote","text":"","code":"drake_unquote(x = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/drake_unquote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove leading and trailing\nescaped quotes from character strings.\n — drake_unquote","text":"x Character vector.","code":""},{"path":"https://docs.ropensci.org/drake/reference/drake_unquote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove leading and trailing\nescaped quotes from character strings.\n — drake_unquote","text":"Character vector without leading trailing escaped quotes around elements.","code":""},{"path":"https://docs.ropensci.org/drake/reference/evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"evaluate  — evaluate","title":"evaluate  — evaluate","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evaluate  — evaluate","text":"","code":"evaluate(...)"},{"path":"https://docs.ropensci.org/drake/reference/evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evaluate  — evaluate","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/evaluate_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Use wildcard templating to create a\nworkflow plan data frame from a template data frame.\n — evaluate_plan","title":"Use wildcard templating to create a\nworkflow plan data frame from a template data frame.\n — evaluate_plan","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/evaluate_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use wildcard templating to create a\nworkflow plan data frame from a template data frame.\n — evaluate_plan","text":"","code":"evaluate_plan(   plan,   rules = NULL,   wildcard = NULL,   values = NULL,   expand = TRUE,   rename = expand,   trace = FALSE,   columns = \"command\",   sep = \"_\" )"},{"path":"https://docs.ropensci.org/drake/reference/evaluate_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use wildcard templating to create a\nworkflow plan data frame from a template data frame.\n — evaluate_plan","text":"plan Workflow plan data frame, similar one produced drake_plan(). rules Named list wildcards names vectors replacements values. way evaluate multiple wildcards . NULL, rules overrules wildcard values NULL. wildcard Character scalar denoting wildcard placeholder. values Vector values replace wildcard drake instructions. treated character vector. Must length plan$command expand TRUE. expand TRUE, create new rows workflow plan data frame multiple values assigned single wildcard. FALSE, occurrence wildcard replaced next entry values vector, values recycled. rename Logical, whether rename targets based values supplied wildcards (based values rules). trace Logical, whether add columns trace wildcard expansion process. new columns indicate targets evaluated wildcards. columns Character vector names columns look evaluate wildcards. sep Character scalar, separator names new targets generated. example, evaluate_plan(drake_plan(x = sqrt(y__)), list(y__ = 1:2), sep = \".\"), names new targets x.1 x.2.","code":""},{"path":"https://docs.ropensci.org/drake/reference/evaluate_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use wildcard templating to create a\nworkflow plan data frame from a template data frame.\n — evaluate_plan","text":"workflow plan data frame wildcards evaluated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/evaluate_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use wildcard templating to create a\nworkflow plan data frame from a template data frame.\n — evaluate_plan","text":"commands workflow plan data frames can wildcard symbols can stand datasets, parameters, function arguments, etc. wildcards can evaluated set possible values using evaluate_plan(). Specify single wildcard wildcard values arguments. command, text wildcard replaced value values turn. Specify multiple wildcards rules argument, overrules wildcard values NULL. , rules list wildcards names vectors possible values list elements.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/example_drake.html","id":null,"dir":"Reference","previous_headings":"","what":"example_drake  — example_drake","title":"example_drake  — example_drake","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/example_drake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example_drake  — example_drake","text":"","code":"example_drake(...)"},{"path":"https://docs.ropensci.org/drake/reference/example_drake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"example_drake  — example_drake","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/examples_drake.html","id":null,"dir":"Reference","previous_headings":"","what":"examples_drake  — examples_drake","title":"examples_drake  — examples_drake","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/examples_drake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"examples_drake  — examples_drake","text":"","code":"examples_drake(...)"},{"path":"https://docs.ropensci.org/drake/reference/examples_drake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"examples_drake  — examples_drake","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/expand.html","id":null,"dir":"Reference","previous_headings":"","what":"expand  — expand","title":"expand  — expand","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expand  — expand","text":"","code":"expand(...)"},{"path":"https://docs.ropensci.org/drake/reference/expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expand  — expand","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/expand_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: create replicates of targets.\n — expand_plan","title":"Deprecated: create replicates of targets.\n — expand_plan","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/expand_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: create replicates of targets.\n — expand_plan","text":"","code":"expand_plan(plan, values = NULL, rename = TRUE, sep = \"_\", sanitize = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/expand_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: create replicates of targets.\n — expand_plan","text":"plan Workflow plan data frame. values Values expand . appended names new targets. rename Logical, whether rename targets based values. See examples demo. sep Character scalar, delimiter original target names values append create new target names. relevant rename TRUE. sanitize Logical, whether sanitize plan.","code":""},{"path":"https://docs.ropensci.org/drake/reference/expand_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: create replicates of targets.\n — expand_plan","text":"expanded workflow plan data frame (replicated targets).","code":""},{"path":"https://docs.ropensci.org/drake/reference/expand_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: create replicates of targets.\n — expand_plan","text":"Duplicates rows workflow plan data frame. Prefixes appended new target names targets still unique names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/expose_imports.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","title":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","text":"Deprecated 2020-06-24.","code":""},{"path":"https://docs.ropensci.org/drake/reference/expose_imports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","text":"","code":"expose_imports(   package,   character_only = FALSE,   envir = parent.frame(),   jobs = 1 )"},{"path":"https://docs.ropensci.org/drake/reference/expose_imports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","text":"package Name package, either symbol string, depending character_only. character_only Logical, whether interpret package character string symbol (quoted vs unquoted). envir Environment load exposed package imports. later pass envir make(). jobs Number parallel jobs parallel processing imports.","code":""},{"path":"https://docs.ropensci.org/drake/reference/expose_imports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","text":"environment exposed imports loaded . Defaults R workspace.","code":""},{"path":"https://docs.ropensci.org/drake/reference/expose_imports.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","text":"Deprecated. function assigns objects functions package environment user's environment (usually global) drake can watch changes. used standard way make drake compatible workflows implemented custom analysis packages. Now, recommendation supply getNamespace(\"yourPackage\") envir argument make() friends. Read https://github.com/ropensci/drake/issues/1286, especially https://github.com/ropensci/drake/issues/1286#issuecomment-649088321, # nolint details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/expose_imports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: expose package functions and objects for\nanalysis with drake.\n — expose_imports","text":"","code":"# nolint start if (FALSE) { isolate_example(\"contain side effects\", { # Consider a simple plan that depends on the biglm package. # library(biglm) plan <- drake_plan(model = biglm(y ~ x, data = huge_dataset)) # Even if you load the biglm package, drake still ignores # the biglm() function as a dependency. The function is missing # from the graph: # vis_drake_graph(plan) # And if you install an updated version of biglm with a revised # biglm() function, this will not cause drake::make(plan) # to rerun the model. # This is because biglm() is not in your environment. # ls() # biglm() exists in its own special package environment, # which drake does not scan. # ls(\"package:biglm\") # To depend on biglm(), use expose_imports(biglm) # to bring the objects and functions in biglm into # your own (non-package) environment. # expose_imports(biglm) # Now, the biglm() function should be in your environment. # ls() # biglm() now appears in the graph. # vis_drake_graph(plan) # And subsequent make()s respond to changes to biglm() # and its dependencies. }) } # nolint end"},{"path":"https://docs.ropensci.org/drake/reference/failed.html","id":null,"dir":"Reference","previous_headings":"","what":"List failed targets.\n — failed","title":"List failed targets.\n — failed","text":"Deprecated 2020-03-23. Use drake_failed() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/failed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List failed targets.\n — failed","text":"","code":"failed(   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = 1L,   upstream_only = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/failed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List failed targets.\n — failed","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. upstream_only Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/failed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List failed targets.\n — failed","text":"character vector target names.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare input files and directories.\n — file_in","title":"Declare input files and directories.\n — file_in","text":"file_in() marks individual files (whole directories) targets depend .","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare input files and directories.\n — file_in","text":"","code":"file_in(...)"},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare input files and directories.\n — file_in","text":"... Character vector, paths files directories. Use .id_chr refer current target name. .id_chr limited use file_in() file_out().","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare input files and directories.\n — file_in","text":"character vector declared input file directory paths.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":"urls","dir":"Reference","previous_headings":"","what":"URLs","title":"Declare input files and directories.\n — file_in","text":"drake 7.4.0, file_in() file_out() support URLs. file name begins \"http://\", \"https://\", \"ftp://\", make() attempts check ETag see data changed last time. ETag can found, drake simply uses ETag last make() registers file unchanged (prevents workflow breaking lose internet access). file_in() URLs require authentication, see curl_handles argument make() drake_config() learn supply credentials.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Declare input files and directories.\n — file_in","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/file_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare input files and directories.\n — file_in","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { # The `file_out()` and `file_in()` functions # just takes in strings and returns them. file_out(\"summaries.txt\") # Their main purpose is to orchestrate your custom files # in your workflow plan data frame. plan <- drake_plan(   out = write.csv(mtcars, file_out(\"mtcars.csv\")),   contents = read.csv(file_in(\"mtcars.csv\")) ) plan # drake knows \"\\\"mtcars.csv\\\"\" is the first target # and a dependency of `contents`. See for yourself:  make(plan) file.exists(\"mtcars.csv\")  # You may use `.id_chr` inside `file_out()` and `file_in()` # to refer  to the current target. This works inside # static `map()`, `combine()`, `split()`, and `cross()`.  plan <- drake::drake_plan(   data = target(     write.csv(data, file_out(paste0(.id_chr, \".csv\"))),     transform = map(data = c(airquality, mtcars))   ) ) plan  # You can also work with entire directories this way. # However, in `file_out(\"your_directory\")`, the directory # becomes an entire unit. Thus, `file_in(\"your_directory\")` # is more appropriate for subsequent steps than # `file_in(\"your_directory/file_inside.txt\")`. plan <- drake_plan(   out = {     dir.create(file_out(\"dir\"))     write.csv(mtcars, \"dir/mtcars.csv\")   },   contents = read.csv(file.path(file_in(\"dir\"), \"mtcars.csv\")) ) plan  make(plan) file.exists(\"dir/mtcars.csv\")  # See the connections that the file relationships create: if (requireNamespace(\"visNetwork\", quietly = TRUE)) {   vis_drake_graph(plan) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/file_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare output files and directories.\n — file_out","title":"Declare output files and directories.\n — file_out","text":"file_out() marks individual files (whole directories) targets create.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare output files and directories.\n — file_out","text":"","code":"file_out(...)"},{"path":"https://docs.ropensci.org/drake/reference/file_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare output files and directories.\n — file_out","text":"... Character vector, paths files directories. Use .id_chr refer current target name. .id_chr limited use file_in() file_out().","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare output files and directories.\n — file_out","text":"character vector declared output file directory paths.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_out.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Declare output files and directories.\n — file_out","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/file_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare output files and directories.\n — file_out","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { # The `file_out()` and `file_in()` functions # just takes in strings and returns them. file_out(\"summaries.txt\") # Their main purpose is to orchestrate your custom files # in your workflow plan data frame. plan <- drake_plan(   out = write.csv(mtcars, file_out(\"mtcars.csv\")),   contents = read.csv(file_in(\"mtcars.csv\")) ) plan # drake knows \"\\\"mtcars.csv\\\"\" is the first target # and a dependency of `contents`. See for yourself:  make(plan) file.exists(\"mtcars.csv\")   # You may use `.id_chr` inside `file_out()` and `file_in()`  # to refer  to the current target. This works inside `map()`,  # `combine()`, `split()`, and `cross()`.  plan <- drake::drake_plan(   data = target(     write.csv(data, file_out(paste0(.id_chr, \".csv\"))),     transform = map(data = c(airquality, mtcars))   ) )  plan  # You can also work with entire directories this way. # However, in `file_out(\"your_directory\")`, the directory # becomes an entire unit. Thus, `file_in(\"your_directory\")` # is more appropriate for subsequent steps than # `file_in(\"your_directory/file_inside.txt\")`. plan <- drake_plan(   out = {     dir.create(file_out(\"dir\"))     write.csv(mtcars, \"dir/mtcars.csv\")   },   contents = read.csv(file.path(file_in(\"dir\"), \"mtcars.csv\")) ) plan  make(plan) file.exists(\"dir/mtcars.csv\")  # See the connections that the file relationships create: if (requireNamespace(\"visNetwork\", quietly = TRUE)) {   vis_drake_graph(plan) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/file_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a file's encoded representation in the cache\n — file_store","title":"Show a file's encoded representation in the cache\n — file_store","text":"function simply wraps literal double quotes around argument x drake knows name file. Use calling functions like deps_code(): example, deps_code(file_store(\"report.md\")). See examples details. Internally, drake wraps names file targets/imports inside literal double quotes avoid confusion files generic R objects.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a file's encoded representation in the cache\n — file_store","text":"","code":"file_store(x)"},{"path":"https://docs.ropensci.org/drake/reference/file_store.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a file's encoded representation in the cache\n — file_store","text":"x Character string turned filename understandable drake (.e., string literal single quotes ends).","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_store.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a file's encoded representation in the cache\n — file_store","text":"single-quoted character string: .e., filename understandable drake.","code":""},{"path":"https://docs.ropensci.org/drake/reference/file_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a file's encoded representation in the cache\n — file_store","text":"","code":"# Wraps the string in single quotes. file_store(\"my_file.rds\") # \"'my_file.rds'\" #> [1] \"p-NV4V6ZTJNRSS44TEOM\" if (FALSE) { isolate_example(\"contain side effects\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the workflow to build the targets list.files() # Should include input \"report.Rmd\" and output \"report.md\". head(readd(small)) # You can use symbols for ordinary objects. # But if you want to read cached info on files, use `file_store()`. readd(file_store(\"report.md\"), character_only = TRUE) # File fingerprint. deps_code(file_store(\"report.Rmd\")) config <- drake_config(my_plan) deps_profile(   file_store(\"report.Rmd\"),   plan = my_plan,   character_only = TRUE ) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/find_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Search up the file system for the nearest drake cache.\n — find_cache","title":"Search up the file system for the nearest drake cache.\n — find_cache","text":"works cache file system hidden folder named .drake/ (default).","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search up the file system for the nearest drake cache.\n — find_cache","text":"","code":"find_cache(path = getwd(), dir = NULL, directory = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/find_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search up the file system for the nearest drake cache.\n — find_cache","text":"path Starting path search back cache. subdirectory drake project. dir Character, name folder containing cache. directory Deprecated. Use dir.","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search up the file system for the nearest drake cache.\n — find_cache","text":"File path nearest drake cache NULL cache found.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/find_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search up the file system for the nearest drake cache.\n — find_cache","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the target. # Find the file path of the project's cache. # Search up through parent directories if necessary. find_cache() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/find_knitr_doc.html","id":null,"dir":"Reference","previous_headings":"","what":"find_knitr_doc  — find_knitr_doc","title":"find_knitr_doc  — find_knitr_doc","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_knitr_doc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find_knitr_doc  — find_knitr_doc","text":"","code":"find_knitr_doc(...)"},{"path":"https://docs.ropensci.org/drake/reference/find_knitr_doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find_knitr_doc  — find_knitr_doc","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Search up the file system\nfor the nearest root path of a drake project.\n — find_project","title":"Search up the file system\nfor the nearest root path of a drake project.\n — find_project","text":"Deprecated 2019-01-08.","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search up the file system\nfor the nearest root path of a drake project.\n — find_project","text":"","code":"find_project(path = getwd())"},{"path":"https://docs.ropensci.org/drake/reference/find_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search up the file system\nfor the nearest root path of a drake project.\n — find_project","text":"path Starting path search back project. subdirectory drake project.","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search up the file system\nfor the nearest root path of a drake project.\n — find_project","text":"File path nearest drake project NULL drake project found.","code":""},{"path":"https://docs.ropensci.org/drake/reference/find_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search up the file system\nfor the nearest root path of a drake project.\n — find_project","text":"works cache file system folder named .drake (default).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/from_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"from_plan  — from_plan","title":"from_plan  — from_plan","text":"from_plan() function now defunct order reduce demands memory usage.","code":""},{"path":"https://docs.ropensci.org/drake/reference/from_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"from_plan  — from_plan","text":"","code":"from_plan(column)"},{"path":"https://docs.ropensci.org/drake/reference/from_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"from_plan  — from_plan","text":"column Character, name column drake plan.","code":""},{"path":"https://docs.ropensci.org/drake/reference/from_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"from_plan  — from_plan","text":"2019-03-28","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/future_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Task passed to individual futures in the ","title":"Task passed to individual futures in the ","text":"internal use . exported make available futures.","code":""},{"path":"https://docs.ropensci.org/drake/reference/future_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Task passed to individual futures in the ","text":"","code":"future_build(target, meta, config, spec, config_tmp, protect)"},{"path":"https://docs.ropensci.org/drake/reference/future_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task passed to individual futures in the ","text":"target Name target. meta list metadata. config drake_config() list. config_tmp Internal, parts config workers need. protect Names targets still need dependencies available memory.","code":""},{"path":"https://docs.ropensci.org/drake/reference/future_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Task passed to individual futures in the ","text":"Either target value list build results.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather.html","id":null,"dir":"Reference","previous_headings":"","what":"gather  — gather","title":"gather  — gather","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gather  — gather","text":"","code":"gather(...)"},{"path":"https://docs.ropensci.org/drake/reference/gather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gather  — gather","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather multiple groupings of targets\n — gather_by","title":"Gather multiple groupings of targets\n — gather_by","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather multiple groupings of targets\n — gather_by","text":"","code":"gather_by(   plan,   ...,   prefix = \"target\",   gather = \"list\",   append = TRUE,   filter = NULL,   sep = \"_\" )"},{"path":"https://docs.ropensci.org/drake/reference/gather_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather multiple groupings of targets\n — gather_by","text":"plan Workflow plan data frame prespecified targets. ... Symbols, columns plan define target groupings. gather_plan() call applied grouping. Groupings NAs selector variables ignored. prefix Character, prefix naming new targets. Suffixes generated values columns specified .... gather Function used gather targets. one list(...), c(...), rbind(...), similar. append Logical. TRUE, output include original rows plan argument. FALSE, output include new targets commands. filter expression like pass dplyr::filter(). rows filter evaluates TRUE gathered, rest excluded gathering. just call dplyr::filter() gather_by()? gather_by(append = TRUE, filter = my_column == \"my_value\") gathers targets including original targets output. See examples demonstration. sep Character scalar, delimiter creating names new targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather multiple groupings of targets\n — gather_by","text":"workflow plan data frame.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gather multiple groupings of targets\n — gather_by","text":"Perform several calls gather_plan() based groupings columns plan, row-bind new targets plan.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/gather_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine targets\n — gather_plan","title":"Combine targets\n — gather_plan","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine targets\n — gather_plan","text":"","code":"gather_plan(plan = NULL, target = \"target\", gather = \"list\", append = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/gather_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine targets\n — gather_plan","text":"plan Workflow plan data frame prespecified targets. target Name new aggregated target. gather Function used gather targets. one list(...), c(...), rbind(...), similar. append Logical. TRUE, output include original rows plan argument. FALSE, output include new targets commands.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine targets\n — gather_plan","text":"workflow plan data frame aggregates multiple prespecified targets one additional target downstream.","code":""},{"path":"https://docs.ropensci.org/drake/reference/gather_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine targets\n — gather_plan","text":"Creates new workflow plan aggregate existing targets supplied plan.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/get_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"The default cache of a drake project.\n — get_cache","title":"The default cache of a drake project.\n — get_cache","text":"Use drake_cache() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/get_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The default cache of a drake project.\n — get_cache","text":"","code":"get_cache(   path = getwd(),   search = TRUE,   verbose = 1L,   force = FALSE,   fetch_cache = NULL,   console_log_file = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/get_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The default cache of a drake project.\n — get_cache","text":"path Character, either root file path drake project folder containing root (top-level working directory plan call make()). confusing, feel free just use storr::storr_rds() get cache. search = FALSE, path must root. search = TRUE, can specify subdirectory project. say \"/home//my_project\" root. following equivalent correct: get_cache(path = \"/home//my_project\", search = FALSE) get_cache(path = \"/home//my_project\", search = TRUE) get_cache(path = \"/home//my_project/subdir/x\", search = TRUE) get_cache(path = \"/home//my_project/.drake\", search = TRUE) get_cache(path = \"/home//my_project/.drake/keys\", search = TRUE) search Deprecated. verbose Deprecated 2019-09-11. force Deprecated. fetch_cache Deprecated. console_log_file Deprecated favor log_make.","code":""},{"path":"https://docs.ropensci.org/drake/reference/get_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The default cache of a drake project.\n — get_cache","text":"Deprecated 2019-05-25.","code":""},{"path":"https://docs.ropensci.org/drake/reference/get_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated, get a trace of a dynamic target's value.\n — get_trace","title":"Deprecated, get a trace of a dynamic target's value.\n — get_trace","text":"Deprecated 2019-12-10. Use read_trace() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/get_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated, get a trace of a dynamic target's value.\n — get_trace","text":"","code":"get_trace(trace, value)"},{"path":"https://docs.ropensci.org/drake/reference/get_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated, get a trace of a dynamic target's value.\n — get_trace","text":"trace Character, name trace want extract. trace names declared .trace argument map(), cross() group().. value Value dynamic target","code":""},{"path":"https://docs.ropensci.org/drake/reference/get_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated, get a trace of a dynamic target's value.\n — get_trace","text":"dynamic trace one target another: vector values grouping variable.","code":""},{"path":"https://docs.ropensci.org/drake/reference/id_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Name of the current target  — id_chr","title":"Name of the current target  — id_chr","text":"id_chr() gives name current target make() running. static branching drake_plan(), use .id_chr symbol instead. See examples details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/id_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name of the current target  — id_chr","text":"","code":"id_chr()"},{"path":"https://docs.ropensci.org/drake/reference/id_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Name of the current target  — id_chr","text":"name current target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/id_chr.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Name of the current target  — id_chr","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":"https://docs.ropensci.org/drake/reference/id_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Name of the current target  — id_chr","text":"","code":"try(id_chr()) # Do not use outside the plan. #> Error : Could not find the environment where drake builds targets. Functions drake_envir(), id_chr(), cancel(), and cancel_if() can only be invoked through make(). if (FALSE) { isolate_example(\"id_chr()\", { plan <- drake_plan(x = id_chr()) make(plan) readd(x) # Dynamic branching plan <- drake_plan(   x = seq_len(4),   y = target(id_chr(), dynamic = map(x)) ) make(plan) readd(y, subtargets = 1) # Static branching plan <- drake_plan(   y = target(c(x, .id_chr), transform = map(x = !!seq_len(4))) ) plan }) }"},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":null,"dir":"Reference","previous_headings":"","what":"Ignore code\n — ignore","title":"Ignore code\n — ignore","text":"Ignore sections commands imported functions.","code":""},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ignore code\n — ignore","text":"","code":"ignore(x = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ignore code\n — ignore","text":"x Code ignore.","code":""},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ignore code\n — ignore","text":"argument.","code":""},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ignore code\n — ignore","text":"user-defined functions drake_plan() commands, can wrap code chunks ignore() Tell drake search dependencies (targets etc. mentioned code) Ignore changes code downstream targets remain date. enforce (1) without (2), use no_deps().","code":""},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Ignore code\n — ignore","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/ignore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ignore code\n — ignore","text":"","code":"if (FALSE) { isolate_example(\"Contain side effects\", { # Normally, `drake` reacts to changes in dependencies. x <- 4 make(plan = drake_plan(y = sqrt(x))) x <- 5 make(plan = drake_plan(y = sqrt(x))) make(plan = drake_plan(y = sqrt(4) + x)) # But not with ignore(). make(plan = drake_plan(y = sqrt(4) + ignore(x))) # Builds y. x <- 6 make(plan = drake_plan(y = sqrt(4) + ignore(x))) # Skips y. make(plan = drake_plan(y = sqrt(4) + ignore(x + 1))) # Skips y.  # ignore() works with functions and multiline code chunks. f <- function(x) {   ignore({     x <- x + 1     x <- x + 2   })   x # Not ignored. } make(plan = drake_plan(y = f(2))) readd(x) # Changes the content of the ignore() block: f <- function(x) {   ignore({     x <- x + 1   })   x # Not ignored. } make(plan = drake_plan(x = f(2))) readd(x) }) }"},{"path":"https://docs.ropensci.org/drake/reference/imported.html","id":null,"dir":"Reference","previous_headings":"","what":"List all the imports in the drake cache.\n — imported","title":"List all the imports in the drake cache.\n — imported","text":"Deprecated 2019-01-08.","code":""},{"path":"https://docs.ropensci.org/drake/reference/imported.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all the imports in the drake cache.\n — imported","text":"","code":"imported(   files_only = FALSE,   path = getwd(),   search = TRUE,   cache = drake::get_cache(path = path, search = search, verbose = verbose),   verbose = 1L,   jobs = 1 )"},{"path":"https://docs.ropensci.org/drake/reference/imported.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all the imports in the drake cache.\n — imported","text":"files_only Logical, whether show imported files ignore imported objects. Since functions global variables imported, full list imported objects get really cumbersome. path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/imported.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all the imports in the drake cache.\n — imported","text":"Character vector naming imports cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/imported.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all the imports in the drake cache.\n — imported","text":"import non-target object processed make(). Targets workflow plan data frame (see drake_config() may depend imports.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/in_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"List the targets in progress\n — in_progress","title":"List the targets in progress\n — in_progress","text":"Deprecated 2019-01-13.","code":""},{"path":"https://docs.ropensci.org/drake/reference/in_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the targets in progress\n — in_progress","text":"","code":"in_progress(   path = getwd(),   search = TRUE,   cache = drake::get_cache(path = path, search = search, verbose = verbose),   verbose = 1L )"},{"path":"https://docs.ropensci.org/drake/reference/in_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the targets in progress\n — in_progress","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/in_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the targets in progress\n — in_progress","text":"character vector target names.","code":""},{"path":"https://docs.ropensci.org/drake/reference/in_progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List the targets in progress\n — in_progress","text":"Similar progress().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/is_function_call.html","id":null,"dir":"Reference","previous_headings":"","what":"is_function_call  — is_function_call","title":"is_function_call  — is_function_call","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/is_function_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_function_call  — is_function_call","text":"","code":"is_function_call(...)"},{"path":"https://docs.ropensci.org/drake/reference/is_function_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_function_call  — is_function_call","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/isolate_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolate the side effects of an example.\n — isolate_example","title":"Isolate the side effects of an example.\n — isolate_example","text":"Runs code temporary directory controlled environment controlled set options.","code":""},{"path":"https://docs.ropensci.org/drake/reference/isolate_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolate the side effects of an example.\n — isolate_example","text":"","code":"isolate_example(desc, code)"},{"path":"https://docs.ropensci.org/drake/reference/isolate_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolate the side effects of an example.\n — isolate_example","text":"desc Character, description example. code Code run.","code":""},{"path":"https://docs.ropensci.org/drake/reference/isolate_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolate the side effects of an example.\n — isolate_example","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Dependencies of a knitr report\n — knitr_deps","title":"Dependencies of a knitr report\n — knitr_deps","text":"Deprecated 2019-02-14 knit(\"your_report.Rmd\") knit(\"your_report.Rmd\", quiet = TRUE).","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependencies of a knitr report\n — knitr_deps","text":"","code":"knitr_deps(target)"},{"path":"https://docs.ropensci.org/drake/reference/knitr_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependencies of a knitr report\n — knitr_deps","text":"target Encoded file path","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dependencies of a knitr report\n — knitr_deps","text":"Data frame dependencies","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"knitr_in() marks individual knitr/R Markdown reports dependencies. drake, reports pieces pipeline. R Markdown great tool displaying precomputed results, running large workflow end end. reports little computation possible.","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"","code":"knitr_in(...)"},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"... Character strings. File paths knitr/rmarkdown source files supplied command workflow plan data frame.","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"character vector declared input file paths.","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"Unlike file_in() file_out(), knitr_in() work entire directories.","code":""},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/knitr_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare knitr/rmarkdown source files\nas dependencies.\n — knitr_in","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { if (requireNamespace(\"knitr\", quietly = TRUE)) { # `knitr_in()` is like `file_in()` # except that it analyzes active code chunks in your `knitr` # source file and detects non-file dependencies. # That way, updates to the right dependencies trigger rebuilds # in your report. # The mtcars example (`drake_example(\"mtcars\")`) # already has a demonstration  load_mtcars_example() make(my_plan)  # Now how did drake magically know that # `small`, `large`, and `coef_regression2_small` were # dependencies of the output file `report.md`? # because the command in the workflow plan had # `knitr_in(\"report.Rmd\")` in it, so drake knew # to analyze the active code chunks. There, it spotted # where `small`, `large`, and `coef_regression2_small` # were read from the cache using calls to `loadd()` and `readd()`. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/legend_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the nodes data frame used in the legend\nof the graph visualizations.\n — legend_nodes","title":"Create the nodes data frame used in the legend\nof the graph visualizations.\n — legend_nodes","text":"Output visNetwork-friendly data frame nodes. tells colors shapes mean graph visualizations.","code":""},{"path":"https://docs.ropensci.org/drake/reference/legend_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the nodes data frame used in the legend\nof the graph visualizations.\n — legend_nodes","text":"","code":"legend_nodes(font_size = 20)"},{"path":"https://docs.ropensci.org/drake/reference/legend_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the nodes data frame used in the legend\nof the graph visualizations.\n — legend_nodes","text":"font_size Font size node label text.","code":""},{"path":"https://docs.ropensci.org/drake/reference/legend_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the nodes data frame used in the legend\nof the graph visualizations.\n — legend_nodes","text":"data frame legend nodes graph visualizations.","code":""},{"path":"https://docs.ropensci.org/drake/reference/legend_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the nodes data frame used in the legend\nof the graph visualizations.\n — legend_nodes","text":"","code":"if (FALSE) { # Show the legend nodes used in graph visualizations. # For example, you may want to inspect the color palette more closely. if (requireNamespace(\"visNetwork\", quietly = TRUE)) { # visNetwork::visNetwork(nodes = legend_nodes()) # nolint } }"},{"path":"https://docs.ropensci.org/drake/reference/load_basic_example.html","id":null,"dir":"Reference","previous_headings":"","what":"load_basic_example  — load_basic_example","title":"load_basic_example  — load_basic_example","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_basic_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load_basic_example  — load_basic_example","text":"","code":"load_basic_example(...)"},{"path":"https://docs.ropensci.org/drake/reference/load_basic_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load_basic_example  — load_basic_example","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_main_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the main example.\n — load_main_example","title":"Load the main example.\n — load_main_example","text":"main example lives https://github.com/wlandau/drake-examples/tree/main/main. Use drake_example(\"main\") download code. function also writes/overwrites files report.Rmd raw_data.xlsx.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_main_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the main example.\n — load_main_example","text":"","code":"load_main_example(   envir = parent.frame(),   report_file = \"report.Rmd\",   overwrite = FALSE,   force = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/load_main_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the main example.\n — load_main_example","text":"envir environment load example . Defaults workspace. insulated workspace, set envir = new.env(parent = globalenv()). report_file write report file report.Rmd. overwrite Logical, whether overwrite existing file report.Rmd force Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_main_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the main example.\n — load_main_example","text":"drake_config() configuration list.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_main_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the main example.\n — load_main_example","text":"Deprecated 2018-12-31.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_mtcars_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the mtcars example.\n — load_mtcars_example","title":"Load the mtcars example.\n — load_mtcars_example","text":"association weight fuel efficiency cars? find , use mtcars example drake_example(\"mtcars\"). mtcars dataset 32 rows, generate two larger bootstrapped datasets analyze regression models. Finally, summarize regression models see association.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_mtcars_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the mtcars example.\n — load_mtcars_example","text":"","code":"load_mtcars_example(   envir = parent.frame(),   report_file = NULL,   overwrite = FALSE,   force = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/load_mtcars_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the mtcars example.\n — load_mtcars_example","text":"envir environment load example . Defaults workspace. insulated workspace, set envir = new.env(parent = globalenv()). report_file write report file. Deprecated. future release, report file always report.Rmd always written working directory (current default). overwrite Logical, whether overwrite existing file report.Rmd. force Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_mtcars_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the mtcars example.\n — load_mtcars_example","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/load_mtcars_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the mtcars example.\n — load_mtcars_example","text":"Use drake_example(\"mtcars\") get code mtcars example. function also writes/overwrites file, report.Rmd.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/load_mtcars_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the mtcars example.\n — load_mtcars_example","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { # Populate your workspace and write 'report.Rmd'. load_mtcars_example() # Get the code: drake_example(\"mtcars\") # Check the dependencies of an imported function. deps_code(reg1) # Check the dependencies of commands in the workflow plan. deps_code(my_plan$command[1]) deps_code(my_plan$command[4]) # Plot the interactive network visualization of the workflow. outdated(my_plan) # Which targets are out of date? # Run the workflow to build all the targets in the plan. make(my_plan) outdated(my_plan) # Everything should be up to date. # For the reg2() model on the small dataset, # the p-value is so small that there may be an association # between weight and fuel efficiency after all. readd(coef_regression2_small) # Clean up the example. clean_mtcars_example() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/long_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"drake now has just one hash algorithm per cache.\n — long_hash","title":"drake now has just one hash algorithm per cache.\n — long_hash","text":"Deprecated 2018-12-12","code":""},{"path":"https://docs.ropensci.org/drake/reference/long_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake now has just one hash algorithm per cache.\n — long_hash","text":"","code":"long_hash(cache = drake::get_cache(verbose = verbose), verbose = 1L)"},{"path":"https://docs.ropensci.org/drake/reference/long_hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake now has just one hash algorithm per cache.\n — long_hash","text":"cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/long_hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake now has just one hash algorithm per cache.\n — long_hash","text":"character vector naming hash algorithm.","code":""},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":null,"dir":"Reference","previous_headings":"","what":"Run your project (build the outdated targets).\n — make","title":"Run your project (build the outdated targets).\n — make","text":"central, important function drake package. runs steps workflow correct order, skipping work already date. make() tracks global functions objects dependencies targets, please restart R session pipeline runs clean reproducible environment.","code":""},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run your project (build the outdated targets).\n — make","text":"","code":"make(   plan,   targets = NULL,   envir = parent.frame(),   verbose = 1L,   hook = NULL,   cache = drake::drake_cache(),   fetch_cache = NULL,   parallelism = \"loop\",   jobs = 1L,   jobs_preprocess = 1L,   packages = rev(.packages()),   lib_loc = NULL,   prework = character(0),   prepend = NULL,   command = NULL,   args = NULL,   recipe_command = NULL,   log_progress = TRUE,   skip_targets = FALSE,   timeout = NULL,   cpu = Inf,   elapsed = Inf,   retries = 0,   force = FALSE,   graph = NULL,   trigger = drake::trigger(),   skip_imports = FALSE,   skip_safety_checks = FALSE,   config = NULL,   lazy_load = \"eager\",   session_info = NULL,   cache_log_file = NULL,   seed = NULL,   caching = \"main\",   keep_going = FALSE,   session = NULL,   pruning_strategy = NULL,   makefile_path = NULL,   console_log_file = NULL,   ensure_workers = NULL,   garbage_collection = FALSE,   template = list(),   sleep = function(i) 0.01,   hasty_build = NULL,   memory_strategy = \"speed\",   layout = NULL,   spec = NULL,   lock_envir = TRUE,   history = TRUE,   recover = FALSE,   recoverable = TRUE,   curl_handles = list(),   max_expand = NULL,   log_build_times = TRUE,   format = NULL,   lock_cache = TRUE,   log_make = NULL,   log_worker = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run your project (build the outdated targets).\n — make","text":"plan Workflow plan data frame. workflow plan data frame data frame target column command column. (See details drake_plan() help file descriptions optional columns.) Targets objects drake generates, commands pieces R code produce . can create track custom files along way (see file_in(), file_out(), knitr_in()). Use function drake_plan() generate workflow plan data frames. targets Character vector, names targets build. Dependencies built . may supply static /whole dynamic targets, sub-targets. envir Environment use. Defaults current workspace, need worry time. deep copy envir made, need worry workspace modified make. deep copy inherits global environment. Wherever necessary, objects functions imported envir global environment reproducibly tracked dependencies. verbose Integer, control printing console/terminal. 0: print nothing. 1: print target--target messages make() progresses. 2: show progress bar track many targets done far. hook Deprecated. cache drake cache created new_cache(). See also drake_cache(). fetch_cache Deprecated. parallelism Character scalar, type parallelism use. detailed explanations, see https://books.ropensci.org/drake/hpc.html. also supply scheduler function want experiment aggressively optimize. function take single config argument (produced drake_config()). Existing examples drake's internals backend_*() functions: backend_loop() backend_clustermq() backend_future() However, functionality really back door used production purposes unless really know willing suffer setbacks whenever drake's unexported core functions updated. jobs Maximum number parallel workers processing targets. can experiment predict_runtime() help decide appropriate number jobs. details, visit https://books.ropensci.org/drake/time.html. jobs_preprocess Number parallel jobs processing imports preprocessing tasks. packages Character vector packages load, order loaded. Defaults rev(.packages()), usually need set manually. Just call library() load packages make(). However, sometimes packages need strictly forced load certain order, especially parallelism \"Makefile\". , use library() require() loadNamespace() attachNamespace() load libraries beforehand. Just list packages packages argument order want loaded. lib_loc Character vector, optional. library() require(). Applies packages argument (see ). prework Expression (language object), list expressions, character vector. Code run right targets build. Called parallelism \"loop\" per target otherwise. code can used set global options, etc. prepend Deprecated. command Deprecated. args Deprecated. recipe_command Deprecated. log_progress Logical, whether log progress individual targets built. Progress logging creates extra files cache (usually .drake/ folder) slows make() little. need reduce limit number files cache, call make(log_progress = FALSE, recover = FALSE). skip_targets Logical, whether skip building targets plan just import objects files. timeout deprecated. Use elapsed cpu instead. cpu cpu argument setTimeLimit(). Seconds cpu time target times . Assign target-level cpu timeout times optional cpu column plan. elapsed elapsed argument setTimeLimit(). Seconds elapsed time target times . Assign target-level elapsed timeout times optional elapsed column plan. retries Number retries execute target fails. Assign target-level retries optional retries column plan. force Logical. FALSE (default) drake imposes checks cache created old incompatible version drake. incompatibility, make() stops give opportunity downgrade drake compatible version rather rerun targets scratch. graph Deprecated. trigger Name trigger apply targets. Ignored plan trigger column. See trigger() details. skip_imports Logical, whether totally neglect process imports jump straight targets. can useful imports massive just want test project, bad practice reproducible data analysis. argument overridden supply graph argument. skip_safety_checks Logical, whether skip safety checks workflow. Use peril. config Deprecated. lazy_load old feature, currently questioned. current recommendations memory management, see https://books.ropensci.org/drake/memory.html#memory-strategies. lazy_load argument either character vector logical. dynamic targets, behavior always \"eager\" (see ). lazy_load argument static targets . Choices lazy_load: \"eager\": lazy loading. target loaded right away assign(). \"promise\": lazy loading delayedAssign() \"bind\": lazy loading active bindings: bindr::populate_env(). TRUE: \"promise\". FALSE: \"eager\". lazy_load \"eager\", drake prunes execution environment target/stage, removing superfluous targets loading dependencies need building. words, drake prepares environment advance tries memory efficient. lazy_load \"bind\" \"promise\", drake assigns promises load dependencies last minute. Lazy loading may memory efficient use cases, may duplicate loading dependencies, costing time. session_info Logical, whether save sessionInfo() cache. Defaults TRUE. behavior recommended serious make()s sake reproducibility. argument exists speed tests. Apparently, sessionInfo() bottleneck small make()s. cache_log_file Name CSV cache log file write. TRUE, default file name used (drake_cache.CSV). NULL, file written. activated, option writes flat text file represent state cache (fingerprints targets imports). put log file version control, commit history give easy representation results change time rest project changes. Hopefully, step right direction data reproducibility. seed Integer, root pseudo-random number generator seed use project. make(), drake generates unique local seed target using global seed target name. way, different pseudo-random numbers generated different targets, pseudo-randomness reproducible. ensure reproducibility across different R sessions, set.seed() .Random.seed ignored affect drake workflows. Conversely, make() usually change .Random.seed, even pseudo-random numbers generated. exception last point make(parallelism = \"clustermq\") clustermq package needs generate random numbers set ports sockets ZeroMQ. first call make() drake_config(), drake uses random number generator seed seed argument. , seed NULL (default), drake uses seed 0. subsequent make()s existing projects, project's cached seed used order ensure reproducibility. Thus, seed argument must either NULL seed project's cache (usually .drake/ folder). reset random number generator seed project, use clean(destroy = TRUE). caching Character string, either \"main\" \"worker\". \"main\": Targets built remote workers sent back main process. , main process saves cache (config$cache, usually file system storr). Appropriate remote workers access file system calling R session. Targets cached one time, may slow situations. \"worker\": Remote workers build targets, also save cache. , caching happens parallel. However, remote workers need access file system calling R session. Transferring target data across network can slow. keep_going Logical, whether still keep running make() targets fail. session Deprecated. effect now. pruning_strategy Deprecated. See memory_strategy. makefile_path Deprecated. console_log_file Deprecated favor log_make. ensure_workers Deprecated. garbage_collection Logical, whether call gc() time target built make(). template named list values fill {{ ... }} placeholders template files (e.g. drake_hpc_template_file()). template argument clustermq::Q() clustermq::workers. Enabled clustermq (make(parallelism = \"clustermq\")), future batchtools far. information, see clustermq package: https://github.com/mschubert/clustermq. template placeholders {{ job_name }} {{ n_jobs }} set way. sleep Optional function single numeric argument . Default: function() 0.01. conserve memory, drake assigns brand new closure sleep, custom function depend -memory data except loaded packages. parallel processing, drake uses central main process check parallel workers , affected high-performance computing workflows, wait data arrive network. loop iterations, main process sleeps avoid throttling. sleep argument make() drake_config() allows customize much time main process spends sleeping. sleep argument function takes argument returns numeric scalar, number seconds supply Sys.sleep() iteration checking. (, starts 1.) checking loop something sleeping iteration , reset back 1. sleep amount time checks, might supply something like function() 0.01. avoid consuming many resources heavier longer workflows, might use exponential back-: say, function() { 0.1 + 120 * pexp(- 1, rate = 0.01) }. hasty_build Deprecated memory_strategy Character scalar, name strategy drake uses load/unload target's dependencies memory. can give target memory strategy, (e.g. drake_plan(x = 1, y = target(f(x), memory_strategy = \"lookahead\"))) override global memory strategy. Choices: \"speed\": target newly built loaded memory, just keep . choice maximizes speed hogs memory. \"autoclean\": Just building new target, unload everything memory except target's direct dependencies. target built, discard memory. (Set garbage_collection = TRUE make sure really gone.) option conserves memory, sacrifices speed new target needs reload previously unloaded targets storage. \"preclean\": Just building new target, unload everything memory except target's direct dependencies. target built, keep memory drake determines can unloaded. option conserves memory, sacrifices speed new target needs reload previously unloaded targets storage. \"lookahead\": Just building new target, search dependency graph find targets needed rest current make() session. target built, keep memory next memory management stage. mode, targets memory need loaded, avoid superfluous reads cache. However, searching graph takes time, even double computational overhead large projects. \"unload\": Just building new target, unload targets memory. target built, keep memory. mode aggressively optimizes memory speed, commands triggers, manually load dependencies need using readd(). \"none\": manage memory . load unload anything building targets. target built, keep memory. mode aggressively optimizes memory speed, commands triggers, manually load dependencies need using readd(). even direct control targets drake keeps memory, see help file examples drake_envir(). Also see garbage_collection argument make() drake_config(). layout Deprecated. spec Deprecated. lock_envir Logical, whether lock config$envir make(). TRUE, make() quits error whenever command drake plan (prework) tries add, remove, modify non-hidden variables environment/workspace/R session. extremely important ensuring purity functions reproducibility/credibility/trust can place project. lock_envir set default TRUE drake version 7.0.0 higher. Namespaces never locked, e.g. envir getNamespace(\"packagename\"). history Logical, whether record build history targets. can also supply txtq, drake records history. Must TRUE drake_history() work later. recover Logical, whether activate automated data recovery. default FALSE Automated data recovery still stable. reproducibility issues. Targets recovered distant past may generated earlier versions R earlier package environments longer exist. always possible, especially dynamic files combined dynamic branching (e.g. dynamic = map(stuff) format = \"file\" etc.) since behavior harder predict advance. works: recover TRUE, drake tries salvage old target values cache instead running commands plan. target recoverable old value somewhere cache shares command, dependencies, etc. target built. old value generated make(recoverable = TRUE). conditions met, drake Assign recently-generated admissible data target, skip target's command. Functions recoverable() r_recoverable() show upstream outdated targets recovered way next make() r_make(). recoverable Logical, whether make target values recoverable make(recover = TRUE). requires writing extra files cache, prevents old metadata removed garbage collection (clean(garbage_collection = TRUE), gc() storrs). need limit cache size number files cache, consider make(recoverable = FALSE, progress = FALSE). Recovery always possible, especially dynamic files combined dynamic branching (e.g. dynamic = map(stuff) format = \"file\" etc.) since behavior harder predict advance. curl_handles named list curl handles. value object curl::new_handle(), name URL (start \"http\", \"https\", \"ftp\"). Example: list( http://httpbin.org/basic-auth = curl::new_handle( username = \"user\", password = \"passwd\" ) ) , plan file_in(\"http://httpbin.org/basic-auth/user/passwd\") drake authenticate using username password handle http://httpbin.org/basic-auth/. drake uses partial matching text find right handle file_in() URL, name handle complete URL (\"http://httpbin.org/basic-auth/user/passwd\") part URL (e.g. \"http://httpbin.org/\" \"http://httpbin.org/basic-auth/\"). multiple handles whose names match URL, drake choose closest match. max_expand Positive integer, optional. max_expand maximum number targets generate map(), cross(), group() dynamic transform. Useful massive number dynamic sub-targets want work first sub-targets scaling . Note: max_expand argument make() drake_config() dynamic branching . static branching max_expand argument drake_plan() transform_plan(). log_build_times Logical, whether record build_times targets. Mac users may notice 20% speedup make() build_times = FALSE. format Character, optional custom storage format targets without explicit target(format = ...) plan. Details formats: https://books.ropensci.org/drake/plans.html#special-data-formats--targets # nolint lock_cache Logical, whether lock cache running make() etc. usually recommended keep cache locking . However, interrupt make() can clean , cache stay locked, need manually unlock drake::drake_cache(\"xyz\")$unlock(). Repeatedly unlocking cache hand annoying, lock_cache = FALSE prevents cache locking first place. log_make Optional character scalar file name connection object (stdout()) dump maximally verbose log information make() functions (functions accept config argument, plus drake_config()). choose use text file console log, persist multiple function calls delete manually. Fields row log file, left right: - node name (short host name) computer (Sys.info()[\"nodename\"]). - process ID (Sys.getpid()). - timestamp date time (microseconds). - brief description drake . fields separated pipe symbols (\"|\"`). log_worker Logical, log_worker argument clustermq::workers() clustermq::Q(). relevant parallelism \"clustermq\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run your project (build the outdated targets).\n — make","text":"nothing","code":""},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"interactive-mode","dir":"Reference","previous_headings":"","what":"Interactive mode","title":"Run your project (build the outdated targets).\n — make","text":"interactive sessions, consider r_make(), r_outdated(), etc. rather make(), outdated(), etc. r_*() drake functions reproducible session interactive. run make() interactively, please restart R session beforehand functions global objects get loaded clean reproducible environment. prevents targets getting invalidated unexpectedly. serious drake workflow consistent reliable, ideally help main R script. script begin fresh R session, load packages functions dependable manner, run make(). Example: https://github.com/wlandau/drake-examples/tree/main/gsp. Batch mode, especially within container, particularly helpful. Interactive R sessions still useful, easily grow stale. Targets can falsely invalidate accidentally change function data object environment.","code":""},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"self-invalidation","dir":"Reference","previous_headings":"","what":"Self-invalidation","title":"Run your project (build the outdated targets).\n — make","text":"possible construct workflow tries invalidate . Example:   , data() loads mtcars global environment, act building x changes dependencies x. words, without safeguards, x date end make(plan). Please try avoid workflows modify global environment. Functions data() belong setup scripts prior make(), functions commands get called make() . target still problematic  (e.g. https://github.com/rstudio/gt/issues/297) can safely run command special callr::r() process. Example: https://github.com/rstudio/gt/issues/297#issuecomment-497778735. # nolint fails, can run make(plan, lock_envir = FALSE) suppress environment-locking targets. However, usually recommended. legitimate use cases lock_envir = FALSE (example: https://books.ropensci.org/drake/hpc.html#parallel-computing-within-targets) # nolint workflows stick default lock_envir = TRUE.","code":"plan <- drake_plan(   x = {     data(mtcars)     mtcars$mpg   },   y = mean(x) )"},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"cache-locking","dir":"Reference","previous_headings":"","what":"Cache locking","title":"Run your project (build the outdated targets).\n — make","text":"make() runs, locks cache processes modify . goes outdated(), vis_drake_graph(), similar functions make_imports = TRUE. safety measure prevent simultaneous processes corrupting cache. get error saying cache locked, either set make_imports = FALSE manually force unlock drake_cache()$unlock().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run your project (build the outdated targets).\n — make","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). config <- drake_config(my_plan) outdated(my_plan) # Which targets need to be (re)built? make(my_plan) # Build what needs to be built. outdated(my_plan) # Everything is up to date. # Change one of your imported function dependencies. reg2 = function(d) {   d$x3 = d$x^3   lm(y ~ x3, data = d) } outdated(my_plan) # Some targets depend on reg2(). make(my_plan) # Rebuild just the outdated targets. outdated(my_plan) # Everything is up to date again. if (requireNamespace(\"visNetwork\", quietly = TRUE)) { vis_drake_graph(my_plan) # See how they fit in an interactive graph. make(my_plan, cache_log_file = TRUE) # Write a CSV log file this time. vis_drake_graph(my_plan) # The colors changed in the graph. # Run targets in parallel: # options(clustermq.scheduler = \"multicore\") # nolint # make(my_plan, parallelism = \"clustermq\", jobs = 2) # nolint } clean() # Start from scratch next time around. } # Dynamic branching # Get the mean mpg for each cyl in the mtcars dataset. plan <- drake_plan(   raw = mtcars,   group_index = raw$cyl,   munged = target(raw[, c(\"mpg\", \"cyl\")], dynamic = map(raw)),   mean_mpg_by_cyl = target(     data.frame(mpg = mean(munged$mpg), cyl = munged$cyl[1]),     dynamic = group(munged, .by = group_index)   ) ) make(plan) readd(mean_mpg_by_cyl) }) }"},{"path":"https://docs.ropensci.org/drake/reference/make_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — make_impl","title":"Internal function with a drake_config() argument — make_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — make_impl","text":"","code":"make_impl(config)"},{"path":"https://docs.ropensci.org/drake/reference/make_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — make_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_imports.html","id":null,"dir":"Reference","previous_headings":"","what":"Just process the imports\n — make_imports","title":"Just process the imports\n — make_imports","text":"Deprecated 2019-01-04","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_imports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Just process the imports\n — make_imports","text":"","code":"make_imports(config)"},{"path":"https://docs.ropensci.org/drake/reference/make_imports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Just process the imports\n — make_imports","text":"config configuration list returned drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_imports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Just process the imports\n — make_imports","text":"nothing","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/make_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Just make the targets\n — make_targets","title":"Just make the targets\n — make_targets","text":"Deprecated 2019-01-04","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Just make the targets\n — make_targets","text":"","code":"make_targets(config)"},{"path":"https://docs.ropensci.org/drake/reference/make_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Just make the targets\n — make_targets","text":"config configuration list returned drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Just make the targets\n — make_targets","text":"nothing","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/make_with_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply make() with a pre-computed config object\n — make_with_config","title":"Apply make() with a pre-computed config object\n — make_with_config","text":"Deprecated 2019-01-04","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_with_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply make() with a pre-computed config object\n — make_with_config","text":"","code":"make_with_config(config)"},{"path":"https://docs.ropensci.org/drake/reference/make_with_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply make() with a pre-computed config object\n — make_with_config","text":"config configuration list returned drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/make_with_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply make() with a pre-computed config object\n — make_with_config","text":"nothing","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/manage_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage the in-memory dependencies of a target.\n — manage_memory","title":"Manage the in-memory dependencies of a target.\n — manage_memory","text":"Load/unload target's dependencies. user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/manage_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage the in-memory dependencies of a target.\n — manage_memory","text":"","code":"manage_memory(target, config, downstream = NULL, jobs = 1)"},{"path":"https://docs.ropensci.org/drake/reference/manage_memory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage the in-memory dependencies of a target.\n — manage_memory","text":"target Character, name target. config drake_config() list. downstream Optional, character vector targets assumed downstream. jobs Number jobs local parallel computing","code":""},{"path":"https://docs.ropensci.org/drake/reference/manage_memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage the in-memory dependencies of a target.\n — manage_memory","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/map_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plan that maps a function to a grid of arguments.\n — map_plan","title":"Create a plan that maps a function to a grid of arguments.\n — map_plan","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/map_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plan that maps a function to a grid of arguments.\n — map_plan","text":"","code":"map_plan(args, fun, id = \"id\", character_only = FALSE, trace = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/map_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plan that maps a function to a grid of arguments.\n — map_plan","text":"args data frame (better yet, tibble) function arguments fun. , column names names arguments fun, row args corresponds call fun. fun Name function apply arguments row--row. Supply symbol character_only FALSE character scalar otherwise. id Name optional column args giving names targets. supplied, target names generated automatically. id symbol character_only FALSE character scalar otherwise. character_only Logical, whether interpret fun id arguments character scalars symbols. trace Logical, whether append columns args output workflow plan data frame. added columns help \"trace back\" original settings went building target. Similar trace argument drake_plan().","code":""},{"path":"https://docs.ropensci.org/drake/reference/map_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plan that maps a function to a grid of arguments.\n — map_plan","text":"workflow plan data frame.","code":""},{"path":"https://docs.ropensci.org/drake/reference/map_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a plan that maps a function to a grid of arguments.\n — map_plan","text":"map_plan() like base::Map(): takes function name grid arguments, writes commands calls apply function row arguments.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/max_useful_jobs.html","id":null,"dir":"Reference","previous_headings":"","what":"max_useful_jobs  — max_useful_jobs","title":"max_useful_jobs  — max_useful_jobs","text":"2019-05-16","code":""},{"path":"https://docs.ropensci.org/drake/reference/max_useful_jobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"max_useful_jobs  — max_useful_jobs","text":"","code":"max_useful_jobs(...)"},{"path":"https://docs.ropensci.org/drake/reference/max_useful_jobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"max_useful_jobs  — max_useful_jobs","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/migrate_drake_project.html","id":null,"dir":"Reference","previous_headings":"","what":"migrate_drake_project  — migrate_drake_project","title":"migrate_drake_project  — migrate_drake_project","text":"2019-05-16","code":""},{"path":"https://docs.ropensci.org/drake/reference/migrate_drake_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"migrate_drake_project  — migrate_drake_project","text":"","code":"migrate_drake_project(...)"},{"path":"https://docs.ropensci.org/drake/reference/migrate_drake_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"migrate_drake_project  — migrate_drake_project","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/missed.html","id":null,"dir":"Reference","previous_headings":"","what":"Report any import objects required by your drake_plan\nplan but missing from your workspace or file system.\n — missed","title":"Report any import objects required by your drake_plan\nplan but missing from your workspace or file system.\n — missed","text":"Checks workspace/environment file system.","code":""},{"path":"https://docs.ropensci.org/drake/reference/missed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report any import objects required by your drake_plan\nplan but missing from your workspace or file system.\n — missed","text":"","code":"missed(..., config = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/missed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report any import objects required by your drake_plan\nplan but missing from your workspace or file system.\n — missed","text":"... Arguments make(), plan targets. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/missed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report any import objects required by your drake_plan\nplan but missing from your workspace or file system.\n — missed","text":"Character vector names missing objects files.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/missed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report any import objects required by your drake_plan\nplan but missing from your workspace or file system.\n — missed","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { plan <- drake_plan(x = missing::fun(arg)) missed(plan) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/missed_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — missed_impl","title":"Internal function with a drake_config() argument — missed_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/missed_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — missed_impl","text":"","code":"missed_impl(config)"},{"path":"https://docs.ropensci.org/drake/reference/missed_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — missed_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a new drake cache.  — new_cache","title":"Make a new drake cache.  — new_cache","text":"Uses storr_rds() function storr package.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a new drake cache.  — new_cache","text":"","code":"new_cache(   path = NULL,   verbose = NULL,   type = NULL,   hash_algorithm = NULL,   short_hash_algo = NULL,   long_hash_algo = NULL,   ...,   console_log_file = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/new_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a new drake cache.  — new_cache","text":"path File path cache cache file system cache. verbose Deprecated 2019-09-11. type Deprecated argument. stood cache type. Use storr customize caches instead. hash_algorithm Name hash algorithm use. See algo argument digest package options. short_hash_algo Deprecated 2018-12-12. Use hash_algorithm instead. long_hash_algo Deprecated 2018-12-12. Use hash_algorithm instead. ... arguments cache constructor. console_log_file Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a new drake cache.  — new_cache","text":"newly created drake cache storr object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/new_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a new drake cache.  — new_cache","text":"","code":"if (FALSE) { isolate_example(\"Quarantine new_cache() side effects.\", { clean(destroy = TRUE) # Should not be necessary. unlink(\"not_hidden\", recursive = TRUE) # Should not be necessary. cache1 <- new_cache() # Creates a new hidden '.drake' folder. cache2 <- new_cache(path = \"not_hidden\", hash_algorithm = \"md5\") clean(destroy = TRUE, cache = cache2) }) }"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_deps constructor — new_drake_deps","title":"drake_deps constructor — new_drake_deps","text":"List class drake_deps.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_deps constructor — new_drake_deps","text":"","code":"new_drake_deps(   globals = character(0),   namespaced = character(0),   strings = character(0),   loadd = character(0),   readd = character(0),   file_in = character(0),   file_out = character(0),   knitr_in = character(0) )"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake_deps constructor — new_drake_deps","text":"globals Global symbols found expression namespaced Namespaced objects, e.g. rmarkdown::render. strings Miscellaneous strings. loadd Targets selected loadd(). readd Targets selected readd(). file_in Literal static file paths enclosed file_in(). file_out Literal static file paths enclosed file_out(). knitr_in Literal static file paths enclosed knitr_in().","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_deps constructor — new_drake_deps","text":"drake_deps object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_deps constructor — new_drake_deps","text":"","code":"if (FALSE) { # stronger than roxygen dontrun new_drake_deps() }"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps_ht.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_deps_ht constructor — new_drake_deps_ht","title":"drake_deps_ht constructor — new_drake_deps_ht","text":"List class drake_deps_ht.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps_ht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_deps_ht constructor — new_drake_deps_ht","text":"","code":"new_drake_deps_ht(   globals = ht_new(hash = TRUE),   namespaced = ht_new(hash = FALSE),   strings = ht_new(hash = FALSE),   loadd = ht_new(hash = FALSE),   readd = ht_new(hash = FALSE),   file_in = ht_new(hash = FALSE),   file_out = ht_new(hash = FALSE),   knitr_in = ht_new(hash = FALSE) )"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps_ht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_deps_ht constructor — new_drake_deps_ht","text":"drake_deps_ht object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_deps_ht.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_deps_ht constructor — new_drake_deps_ht","text":"","code":"if (FALSE) { # stronger than roxygen dontrun new_drake_deps_ht() }"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_settings constructor — new_drake_settings","title":"drake_settings constructor — new_drake_settings","text":"List class drake_settings.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_settings constructor — new_drake_settings","text":"","code":"new_drake_settings(   cache_log_file = NULL,   curl_handles = NULL,   garbage_collection = NULL,   jobs = NULL,   jobs_preprocess = NULL,   keep_going = NULL,   lazy_load = NULL,   lib_loc = NULL,   lock_envir = NULL,   lock_cache = NULL,   log_build_times = NULL,   log_progress = NULL,   memory_strategy = NULL,   parallelism = NULL,   recover = NULL,   recoverable = NULL,   seed = NULL,   session_info = NULL,   skip_imports = NULL,   skip_safety_checks = NULL,   skip_targets = NULL,   sleep = NULL,   template = NULL,   log_worker = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake_settings constructor — new_drake_settings","text":"cache_log_file Name CSV cache log file write. TRUE, default file name used (drake_cache.CSV). NULL, file written. activated, option writes flat text file represent state cache (fingerprints targets imports). put log file version control, commit history give easy representation results change time rest project changes. Hopefully, step right direction data reproducibility. curl_handles named list curl handles. value object curl::new_handle(), name URL (start \"http\", \"https\", \"ftp\"). Example: list( http://httpbin.org/basic-auth = curl::new_handle( username = \"user\", password = \"passwd\" ) ) , plan file_in(\"http://httpbin.org/basic-auth/user/passwd\") drake authenticate using username password handle http://httpbin.org/basic-auth/. drake uses partial matching text find right handle file_in() URL, name handle complete URL (\"http://httpbin.org/basic-auth/user/passwd\") part URL (e.g. \"http://httpbin.org/\" \"http://httpbin.org/basic-auth/\"). multiple handles whose names match URL, drake choose closest match. garbage_collection Logical, whether call gc() time target built make(). jobs Maximum number parallel workers processing targets. can experiment predict_runtime() help decide appropriate number jobs. details, visit https://books.ropensci.org/drake/time.html. jobs_preprocess Number parallel jobs processing imports preprocessing tasks. keep_going Logical, whether still keep running make() targets fail. lazy_load old feature, currently questioned. current recommendations memory management, see https://books.ropensci.org/drake/memory.html#memory-strategies. lazy_load argument either character vector logical. dynamic targets, behavior always \"eager\" (see ). lazy_load argument static targets . Choices lazy_load: \"eager\": lazy loading. target loaded right away assign(). \"promise\": lazy loading delayedAssign() \"bind\": lazy loading active bindings: bindr::populate_env(). TRUE: \"promise\". FALSE: \"eager\". lazy_load \"eager\", drake prunes execution environment target/stage, removing superfluous targets loading dependencies need building. words, drake prepares environment advance tries memory efficient. lazy_load \"bind\" \"promise\", drake assigns promises load dependencies last minute. Lazy loading may memory efficient use cases, may duplicate loading dependencies, costing time. lib_loc Character vector, optional. library() require(). Applies packages argument (see ). lock_envir Logical, whether lock config$envir make(). TRUE, make() quits error whenever command drake plan (prework) tries add, remove, modify non-hidden variables environment/workspace/R session. extremely important ensuring purity functions reproducibility/credibility/trust can place project. lock_envir set default TRUE drake version 7.0.0 higher. Namespaces never locked, e.g. envir getNamespace(\"packagename\"). lock_cache Logical, whether lock cache running make() etc. usually recommended keep cache locking . However, interrupt make() can clean , cache stay locked, need manually unlock drake::drake_cache(\"xyz\")$unlock(). Repeatedly unlocking cache hand annoying, lock_cache = FALSE prevents cache locking first place. log_build_times Logical, whether record build_times targets. Mac users may notice 20% speedup make() build_times = FALSE. log_progress Logical, whether log progress individual targets built. Progress logging creates extra files cache (usually .drake/ folder) slows make() little. need reduce limit number files cache, call make(log_progress = FALSE, recover = FALSE). memory_strategy Character scalar, name strategy drake uses load/unload target's dependencies memory. can give target memory strategy, (e.g. drake_plan(x = 1, y = target(f(x), memory_strategy = \"lookahead\"))) override global memory strategy. Choices: \"speed\": target newly built loaded memory, just keep . choice maximizes speed hogs memory. \"autoclean\": Just building new target, unload everything memory except target's direct dependencies. target built, discard memory. (Set garbage_collection = TRUE make sure really gone.) option conserves memory, sacrifices speed new target needs reload previously unloaded targets storage. \"preclean\": Just building new target, unload everything memory except target's direct dependencies. target built, keep memory drake determines can unloaded. option conserves memory, sacrifices speed new target needs reload previously unloaded targets storage. \"lookahead\": Just building new target, search dependency graph find targets needed rest current make() session. target built, keep memory next memory management stage. mode, targets memory need loaded, avoid superfluous reads cache. However, searching graph takes time, even double computational overhead large projects. \"unload\": Just building new target, unload targets memory. target built, keep memory. mode aggressively optimizes memory speed, commands triggers, manually load dependencies need using readd(). \"none\": manage memory . load unload anything building targets. target built, keep memory. mode aggressively optimizes memory speed, commands triggers, manually load dependencies need using readd(). even direct control targets drake keeps memory, see help file examples drake_envir(). Also see garbage_collection argument make() drake_config(). parallelism Character scalar, type parallelism use. detailed explanations, see https://books.ropensci.org/drake/hpc.html. also supply scheduler function want experiment aggressively optimize. function take single config argument (produced drake_config()). Existing examples drake's internals backend_*() functions: backend_loop() backend_clustermq() backend_future() However, functionality really back door used production purposes unless really know willing suffer setbacks whenever drake's unexported core functions updated. recover Logical, whether activate automated data recovery. default FALSE Automated data recovery still stable. reproducibility issues. Targets recovered distant past may generated earlier versions R earlier package environments longer exist. always possible, especially dynamic files combined dynamic branching (e.g. dynamic = map(stuff) format = \"file\" etc.) since behavior harder predict advance. works: recover TRUE, drake tries salvage old target values cache instead running commands plan. target recoverable old value somewhere cache shares command, dependencies, etc. target built. old value generated make(recoverable = TRUE). conditions met, drake Assign recently-generated admissible data target, skip target's command. Functions recoverable() r_recoverable() show upstream outdated targets recovered way next make() r_make(). recoverable Logical, whether make target values recoverable make(recover = TRUE). requires writing extra files cache, prevents old metadata removed garbage collection (clean(garbage_collection = TRUE), gc() storrs). need limit cache size number files cache, consider make(recoverable = FALSE, progress = FALSE). Recovery always possible, especially dynamic files combined dynamic branching (e.g. dynamic = map(stuff) format = \"file\" etc.) since behavior harder predict advance. seed Integer, root pseudo-random number generator seed use project. make(), drake generates unique local seed target using global seed target name. way, different pseudo-random numbers generated different targets, pseudo-randomness reproducible. ensure reproducibility across different R sessions, set.seed() .Random.seed ignored affect drake workflows. Conversely, make() usually change .Random.seed, even pseudo-random numbers generated. exception last point make(parallelism = \"clustermq\") clustermq package needs generate random numbers set ports sockets ZeroMQ. first call make() drake_config(), drake uses random number generator seed seed argument. , seed NULL (default), drake uses seed 0. subsequent make()s existing projects, project's cached seed used order ensure reproducibility. Thus, seed argument must either NULL seed project's cache (usually .drake/ folder). reset random number generator seed project, use clean(destroy = TRUE). session_info Logical, whether save sessionInfo() cache. Defaults TRUE. behavior recommended serious make()s sake reproducibility. argument exists speed tests. Apparently, sessionInfo() bottleneck small make()s. skip_imports Logical, whether totally neglect process imports jump straight targets. can useful imports massive just want test project, bad practice reproducible data analysis. argument overridden supply graph argument. skip_safety_checks Logical, whether skip safety checks workflow. Use peril. skip_targets Logical, whether skip building targets plan just import objects files. sleep Optional function single numeric argument . Default: function() 0.01. conserve memory, drake assigns brand new closure sleep, custom function depend -memory data except loaded packages. parallel processing, drake uses central main process check parallel workers , affected high-performance computing workflows, wait data arrive network. loop iterations, main process sleeps avoid throttling. sleep argument make() drake_config() allows customize much time main process spends sleeping. sleep argument function takes argument returns numeric scalar, number seconds supply Sys.sleep() iteration checking. (, starts 1.) checking loop something sleeping iteration , reset back 1. sleep amount time checks, might supply something like function() 0.01. avoid consuming many resources heavier longer workflows, might use exponential back-: say, function() { 0.1 + 120 * pexp(- 1, rate = 0.01) }. template named list values fill {{ ... }} placeholders template files (e.g. drake_hpc_template_file()). template argument clustermq::Q() clustermq::workers. Enabled clustermq (make(parallelism = \"clustermq\")), future batchtools far. information, see clustermq package: https://github.com/mschubert/clustermq. template placeholders {{ job_name }} {{ n_jobs }} set way. log_worker Logical, log_worker argument clustermq::workers() clustermq::Q(). relevant parallelism \"clustermq\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_settings constructor — new_drake_settings","text":"drake_settings object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_settings constructor — new_drake_settings","text":"","code":"if (FALSE) { # stronger than roxygen dontrun new_drake_settings() }"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_triggers.html","id":null,"dir":"Reference","previous_headings":"","what":"drake_triggers constructor — new_drake_triggers","title":"drake_triggers constructor — new_drake_triggers","text":"List class drake_triggers.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_triggers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake_triggers constructor — new_drake_triggers","text":"","code":"new_drake_triggers(   command = TRUE,   depend = TRUE,   file = TRUE,   seed = TRUE,   format = TRUE,   condition = FALSE,   change = NULL,   mode = \"whitelist\" )"},{"path":"https://docs.ropensci.org/drake/reference/new_drake_triggers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake_triggers constructor — new_drake_triggers","text":"command Logical, command trigger. depend Logical, depend trigger. file Logical, file trigger. seed Logical, seed trigger. format Logical, format trigger. condition Language object object coercible logical, condition trigger. change Language object literal value, change trigger. mode Character, mode condition trigger.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_triggers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake_triggers constructor — new_drake_triggers","text":"drake_triggers object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/new_drake_triggers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drake_triggers constructor — new_drake_triggers","text":"","code":"if (FALSE) { # stronger than roxygen dontrun new_drake_triggers() }"},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress dependency detection.\n — no_deps","title":"Suppress dependency detection.\n — no_deps","text":"Tell drake search dependencies chunk code.","code":""},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress dependency detection.\n — no_deps","text":"","code":"no_deps(x = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppress dependency detection.\n — no_deps","text":"x Code dependency detection suppressed.","code":""},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppress dependency detection.\n — no_deps","text":"argument.","code":""},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suppress dependency detection.\n — no_deps","text":"no_deps() similar ignore(), still lets drake track meaningful changes code .","code":""},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Suppress dependency detection.\n — no_deps","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/no_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suppress dependency detection.\n — no_deps","text":"","code":"if (FALSE) { isolate_example(\"Contain side effects\", { # Normally, `drake` reacts to changes in dependencies. x <- 4 make(plan = drake_plan(y = sqrt(x))) x <- 5 make(plan = drake_plan(y = sqrt(x))) make(plan = drake_plan(y = sqrt(4) + x)) # But not with no_deps(). make(plan = drake_plan(y = sqrt(4) + no_deps(x))) # Builds y. x <- 6 make(plan = drake_plan(y = sqrt(4) + no_deps(x))) # Skips y. # However, `drake` *does* react to changes # to the *literal code* inside `no_deps()`. make(plan = drake_plan(y = sqrt(4) + ignore(x + 1))) # Builds y.  # Like ignore(), no_deps() works with functions and multiline code chunks. z <- 1 f <- function(x) {   no_deps({     x <- z + 1     x <- x + 2   })   x } make(plan = drake_plan(y = f(2))) readd(y) z <- 2 # Changed dependency is not tracked. make(plan = drake_plan(y = f(2))) readd(y) }) }"},{"path":"https://docs.ropensci.org/drake/reference/outdated.html","id":null,"dir":"Reference","previous_headings":"","what":"List the targets that are out of date.\n — outdated","title":"List the targets that are out of date.\n — outdated","text":"Outdated targets rebuilt next make(). outdated() show dynamic sub-targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/outdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the targets that are out of date.\n — outdated","text":"","code":"outdated(..., make_imports = TRUE, do_prework = TRUE, config = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/outdated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the targets that are out of date.\n — outdated","text":"... Arguments make(), plan targets envir. make_imports Logical, whether make imports first. Set FALSE save time risk obsolete output. do_prework Whether prework normally supplied make(). config Deprecated (2019-12-21). configured workflow drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/outdated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the targets that are out of date.\n — outdated","text":"Character vector names outdated targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/outdated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the targets that are out of date.\n — outdated","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # Recopute the config list early and often to have the # most current information. Do not modify the config list by hand. outdated(my_plan) # Which targets are out of date? make(my_plan) # Run the projects, build the targets. # Now, everything should be up to date (no targets listed). outdated(my_plan) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/outdated_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — outdated_impl","title":"Internal function with a drake_config() argument — outdated_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/outdated_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — outdated_impl","text":"","code":"outdated_impl(config, make_imports = TRUE, do_prework = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/outdated_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — outdated_impl","text":"config drake_config() object. make_imports Logical, whether make imports first. Set FALSE save time risk obsolete output. do_prework Whether prework normally supplied make().","code":""},{"path":"https://docs.ropensci.org/drake/reference/parallel_stages.html","id":null,"dir":"Reference","previous_headings":"","what":"parallel_stages  — parallel_stages","title":"parallel_stages  — parallel_stages","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/parallel_stages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parallel_stages  — parallel_stages","text":"","code":"parallel_stages(...)"},{"path":"https://docs.ropensci.org/drake/reference/parallel_stages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parallel_stages  — parallel_stages","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/parallelism_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of old parallel backends\n — parallelism_choices","title":"Names of old parallel backends\n — parallelism_choices","text":"2019-01-03","code":""},{"path":"https://docs.ropensci.org/drake/reference/parallelism_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of old parallel backends\n — parallelism_choices","text":"","code":"parallelism_choices(distributed_only = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/parallelism_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of old parallel backends\n — parallelism_choices","text":"distributed_only Logical.","code":""},{"path":"https://docs.ropensci.org/drake/reference/parallelism_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of old parallel backends\n — parallelism_choices","text":"character vector","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan.html","id":null,"dir":"Reference","previous_headings":"","what":"plan  — plan","title":"plan  — plan","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plan  — plan","text":"","code":"plan(...)"},{"path":"https://docs.ropensci.org/drake/reference/plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plan  — plan","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_analyses.html","id":null,"dir":"Reference","previous_headings":"","what":"Specialized wildcard for analyses\n — plan_analyses","title":"Specialized wildcard for analyses\n — plan_analyses","text":"Use drake_plan() instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_analyses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specialized wildcard for analyses\n — plan_analyses","text":"","code":"plan_analyses(plan, datasets, sep = \"_\")"},{"path":"https://docs.ropensci.org/drake/reference/plan_analyses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specialized wildcard for analyses\n — plan_analyses","text":"plan Workflow plan data frame analysis methods. commands command column must dataset__ wildcard datasets go. example, one command lm(dataset__). , commands output include lm(your_dataset_1), lm(your_dataset_2), etc. datasets Workflow plan data frame instructions make datasets. sep character Scalar, delimiter creating names new targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_analyses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specialized wildcard for analyses\n — plan_analyses","text":"evaluated workflow plan data frame analysis targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_analyses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specialized wildcard for analyses\n — plan_analyses","text":"2019-01-13","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_drake.html","id":null,"dir":"Reference","previous_headings":"","what":"plan_drake  — plan_drake","title":"plan_drake  — plan_drake","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_drake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plan_drake  — plan_drake","text":"","code":"plan_drake(...)"},{"path":"https://docs.ropensci.org/drake/reference/plan_drake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plan_drake  — plan_drake","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_summaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Specialized wildcard for summaries\n — plan_summaries","title":"Specialized wildcard for summaries\n — plan_summaries","text":"Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_summaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specialized wildcard for summaries\n — plan_summaries","text":"","code":"plan_summaries(   plan,   analyses,   datasets,   gather = rep(\"list\", nrow(plan)),   sep = \"_\" )"},{"path":"https://docs.ropensci.org/drake/reference/plan_summaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specialized wildcard for summaries\n — plan_summaries","text":"plan Workflow plan data frame commands summaries. Use analysis__ dataset__ wildcards just like dataset__ wildcard plan_analyses(). analyses Workflow plan data frame analysis instructions. datasets Workflow plan data frame instructions make import datasets. gather Character vector, names functions gather summaries. NULL, length must number rows plan. See gather_plan() function . sep Character scalar, delimiter creating new target names.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_summaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specialized wildcard for summaries\n — plan_summaries","text":"evaluated workflow plan data frame instructions computing summaries analyses datasets. analyses multiple datasets multiple ways.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_summaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specialized wildcard for summaries\n — plan_summaries","text":"2019-01-13","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_to_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a drake plan into a plain R script file.\n — plan_to_code","title":"Turn a drake plan into a plain R script file.\n — plan_to_code","text":"code_to_plan(), plan_to_code(), plan_to_notebook() together illustrate relationships drake plans, R scripts, R Markdown documents. file generated plan_to_code(), every target/command pair becomes chunk code. Targets arranged topological order dependencies available downstream targets. Please note: still responsible loading project's packages, imported functions, etc. Triggers disappear.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_to_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a drake plan into a plain R script file.\n — plan_to_code","text":"","code":"plan_to_code(plan, con = stdout())"},{"path":"https://docs.ropensci.org/drake/reference/plan_to_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a drake plan into a plain R script file.\n — plan_to_code","text":"plan Workflow plan data frame. See drake_plan() details. con file path connection write .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/plan_to_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a drake plan into a plain R script file.\n — plan_to_code","text":"","code":"plan <- drake_plan(   raw_data = read_excel(file_in(\"raw_data.xlsx\")),   data = raw_data,   hist = create_plot(data),   fit = lm(Ozone ~ Temp + Wind, data) ) file <- tempfile() # Turn the plan into an R script a the given file path. plan_to_code(plan, file) # Here is what the script looks like. cat(readLines(file), sep = \"\\n\") #> raw_data <- read_excel(file_in(\"raw_data.xlsx\")) #> data <- raw_data #> fit <- lm(Ozone ~ Temp + Wind, data) #> hist <- create_plot(data) # Convert back to a drake plan. code_to_plan(file) #> # A tibble: 4 × 2 #>   target   command                              #>   <chr>    <expr_lst>                           #> 1 raw_data read_excel(file_in(\"raw_data.xlsx\")) #> 2 data     raw_data                             #> 3 fit      lm(Ozone ~ Temp + Wind, data)        #> 4 hist     create_plot(data)"},{"path":"https://docs.ropensci.org/drake/reference/plan_to_notebook.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a drake plan into an R notebook.\n — plan_to_notebook","title":"Turn a drake plan into an R notebook.\n — plan_to_notebook","text":"code_to_plan(), plan_to_code(), plan_to_notebook() together illustrate relationships drake plans, R scripts, R Markdown documents. file generated plan_to_code(), every target/command pair becomes chunk code. Targets arranged topological order dependencies available downstream targets. Please note: still responsible loading project's packages, imported functions, etc. Triggers disappear.","code":""},{"path":"https://docs.ropensci.org/drake/reference/plan_to_notebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a drake plan into an R notebook.\n — plan_to_notebook","text":"","code":"plan_to_notebook(plan, con)"},{"path":"https://docs.ropensci.org/drake/reference/plan_to_notebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a drake plan into an R notebook.\n — plan_to_notebook","text":"plan Workflow plan data frame. See drake_plan() details. con file path connection write .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/plan_to_notebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a drake plan into an R notebook.\n — plan_to_notebook","text":"","code":"if (suppressWarnings(require(\"knitr\"))) { plan <- drake_plan(   raw_data = read_excel(file_in(\"raw_data.xlsx\")),   data = raw_data,   hist = create_plot(data),   fit = lm(Ozone ~ Temp + Wind, data) ) file <- tempfile() # Turn the plan into an R notebook a the given file path. plan_to_notebook(plan, file) # Here is what the script looks like. cat(readLines(file), sep = \"\\n\") # Convert back to a drake plan. code_to_plan(file) } #> Loading required package: knitr #> --- #> title: \"My Notebook\" #> output: html_notebook #> --- #>  #> ```{r my_code} #> raw_data <- read_excel(file_in(\"raw_data.xlsx\")) #> data <- raw_data #> fit <- lm(Ozone ~ Temp + Wind, data) #> hist <- create_plot(data) #> ``` #> # A tibble: 4 × 2 #>   target   command                              #>   <chr>    <expr_lst>                           #> 1 raw_data read_excel(file_in(\"raw_data.xlsx\")) #> 2 data     raw_data                             #> 3 fit      lm(Ozone ~ Temp + Wind, data)        #> 4 hist     create_plot(data)"},{"path":"https://docs.ropensci.org/drake/reference/plot_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_graph  — plot_graph","title":"plot_graph  — plot_graph","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/plot_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_graph  — plot_graph","text":"","code":"plot_graph(...)"},{"path":"https://docs.ropensci.org/drake/reference/plot_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_graph  — plot_graph","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_load_balancing.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict parallel computing behavior\n — predict_load_balancing","title":"Predict parallel computing behavior\n — predict_load_balancing","text":"Deprecated 2019-02-14.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_load_balancing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict parallel computing behavior\n — predict_load_balancing","text":"","code":"predict_load_balancing(   config,   targets = NULL,   from_scratch = FALSE,   targets_only = NULL,   jobs = 1,   known_times = numeric(0),   default_time = 0,   warn = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/predict_load_balancing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict parallel computing behavior\n — predict_load_balancing","text":"config Deprecated. from_scratch Logical, whether predict make() build scratch take account fact targets may already date therefore skipped. targets_only Deprecated. known_times named numeric vector targets/imports names values hypothetical runtimes seconds. Use argument overwrite existing build times default_time. default_time Number seconds assume target import recorded runtime (build_times()) anything known_times. warn Logical, whether warn user targets available runtime, either known_times build_times(). times targets default default_time.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_load_balancing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict parallel computing behavior\n — predict_load_balancing","text":"data frame showing one likely arrangement targets assigned parallel workers.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the elapsed runtime of the next call to make()\nfor non-staged parallel backends.\n — predict_runtime","title":"Predict the elapsed runtime of the next call to make()\nfor non-staged parallel backends.\n — predict_runtime","text":"Take past recorded runtimes times build_times() use predict targets distributed among available workers next make(). , predict overall runtime runtime slowest (busiest) workers. Predictions include time takes run targets, overhead/preprocessing drake .","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the elapsed runtime of the next call to make()\nfor non-staged parallel backends.\n — predict_runtime","text":"","code":"predict_runtime(   ...,   targets_predict = NULL,   from_scratch = FALSE,   targets_only = NULL,   jobs_predict = 1L,   known_times = numeric(0),   default_time = 0,   warn = TRUE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the elapsed runtime of the next call to make()\nfor non-staged parallel backends.\n — predict_runtime","text":"... Arguments make(), plan targets. targets_predict Character vector, names targets include total runtime worker predictions. from_scratch Logical, whether predict make() build scratch take account fact targets may already date therefore skipped. targets_only Deprecated. jobs_predict jobs argument next planned make(). known_times named numeric vector targets/imports names values hypothetical runtimes seconds. Use argument overwrite existing build times default_time. default_time Number seconds assume target import recorded runtime (build_times()) anything known_times. warn Logical, whether warn user targets available runtime, either known_times build_times(). times targets default default_time. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the elapsed runtime of the next call to make()\nfor non-staged parallel backends.\n — predict_runtime","text":"Predicted total runtime next call make().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the elapsed runtime of the next call to make()\nfor non-staged parallel backends.\n — predict_runtime","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. known_times <- rep(7200, nrow(my_plan)) names(known_times) <- my_plan$target known_times # Predict the runtime if (requireNamespace(\"lubridate\", quietly = TRUE)) { predict_runtime(   my_plan,   jobs_predict = 7L,   from_scratch = TRUE,   known_times = known_times ) predict_runtime(   my_plan,   jobs_predict = 8L,   from_scratch = TRUE,   known_times = known_times ) balance <- predict_workers(   my_plan,   jobs_predict = 7L,   from_scratch = TRUE,   known_times = known_times ) balance } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — predict_runtime_impl","title":"Internal function with a drake_config() argument — predict_runtime_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — predict_runtime_impl","text":"","code":"predict_runtime_impl(   config,   targets_predict = NULL,   from_scratch = FALSE,   targets_only = NULL,   jobs_predict = 1L,   known_times = numeric(0),   default_time = 0,   warn = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/predict_runtime_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — predict_runtime_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_workers.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the load balancing of the next call to make()\nfor non-staged parallel backends.\n — predict_workers","title":"Predict the load balancing of the next call to make()\nfor non-staged parallel backends.\n — predict_workers","text":"Take past recorded runtimes times build_times() use predict targets distributed among available workers next make(). Predictions include time takes run targets, overhead/preprocessing drake .","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_workers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the load balancing of the next call to make()\nfor non-staged parallel backends.\n — predict_workers","text":"","code":"predict_workers(   ...,   targets_predict = NULL,   from_scratch = FALSE,   targets_only = NULL,   jobs_predict = 1L,   known_times = numeric(0),   default_time = 0,   warn = TRUE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/predict_workers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the load balancing of the next call to make()\nfor non-staged parallel backends.\n — predict_workers","text":"... Arguments make(), plan targets. targets_predict Character vector, names targets include total runtime worker predictions. from_scratch Logical, whether predict make() build scratch take account fact targets may already date therefore skipped. targets_only Deprecated. jobs_predict jobs argument next planned make(). known_times named numeric vector targets/imports names values hypothetical runtimes seconds. Use argument overwrite existing build times default_time. default_time Number seconds assume target import recorded runtime (build_times()) anything known_times. warn Logical, whether warn user targets available runtime, either known_times build_times(). times targets default default_time. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_workers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the load balancing of the next call to make()\nfor non-staged parallel backends.\n — predict_workers","text":"data frame showing one likely arrangement targets assigned parallel workers.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/predict_workers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the load balancing of the next call to make()\nfor non-staged parallel backends.\n — predict_workers","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. known_times <- rep(7200, nrow(my_plan)) names(known_times) <- my_plan$target known_times # Predict the runtime if (requireNamespace(\"lubridate\", quietly = TRUE)) { predict_runtime(   my_plan,   jobs_predict = 7L,   from_scratch = TRUE,   known_times = known_times ) predict_runtime(   my_plan,   jobs_predict = 8L,   from_scratch = TRUE,   known_times = known_times ) balance <- predict_workers(   my_plan,   jobs_predict = 7L,   from_scratch = TRUE,   known_times = known_times ) balance } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/predict_workers_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — predict_workers_impl","title":"Internal function with a drake_config() argument — predict_workers_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/predict_workers_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — predict_workers_impl","text":"","code":"predict_workers_impl(   config,   targets_predict = NULL,   from_scratch = FALSE,   targets_only = NULL,   jobs_predict = 1,   known_times = numeric(0),   default_time = 0,   warn = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/predict_workers_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — predict_workers_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/process_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Process an imported data object\n — process_import","title":"Process an imported data object\n — process_import","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/process_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process an imported data object\n — process_import","text":"","code":"process_import(import, config)"},{"path":"https://docs.ropensci.org/drake/reference/process_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process an imported data object\n — process_import","text":"import Character, name import process config drake_config() object","code":""},{"path":"https://docs.ropensci.org/drake/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the build progress of your targets\n — progress","title":"Get the build progress of your targets\n — progress","text":"Deprecated 2020-03-23. Use drake_progress() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the build progress of your targets\n — progress","text":"","code":"progress(   ...,   list = character(0),   no_imported_objects = NULL,   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = 1L,   jobs = 1,   progress = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the build progress of your targets\n — progress","text":"... Objects load cache, names (unquoted) character strings (quoted). tidyselect package installed, can also supply dplyr-style tidyselect commands starts_with(), ends_with(), one_of(). list Character vector naming objects loaded cache. Similar list argument remove(). no_imported_objects Logical, whether return information imported files targets commands (.e. whether ignore imported objects files). path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing. progress Character vector filtering build progress results. Defaults NULL (filtering) report progress objects. Supported filters \"done\", \"running\", \"failed\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the build progress of your targets\n — progress","text":"build progress target reached current make() far.","code":""},{"path":"https://docs.ropensci.org/drake/reference/prune_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune the graph\n — prune_drake_graph","title":"Prune the graph\n — prune_drake_graph","text":"2019-01-08","code":""},{"path":"https://docs.ropensci.org/drake/reference/prune_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune the graph\n — prune_drake_graph","text":"","code":"prune_drake_graph(graph, to = igraph::V(graph)$name, jobs = 1)"},{"path":"https://docs.ropensci.org/drake/reference/prune_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune the graph\n — prune_drake_graph","text":"graph igraph object. Character vector vertices. jobs Number jobs parallelism.","code":""},{"path":"https://docs.ropensci.org/drake/reference/prune_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune the graph\n — prune_drake_graph","text":"igraph object","code":""},{"path":"https://docs.ropensci.org/drake/reference/r_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a drake function in a fresh new R process\n — r_make","title":"Launch a drake function in a fresh new R process\n — r_make","text":"r_*() functions, r_make(), enhance reproducibility launching drake function separate R process.","code":""},{"path":"https://docs.ropensci.org/drake/reference/r_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a drake function in a fresh new R process\n — r_make","text":"","code":"r_make(source = NULL, r_fn = NULL, r_args = list())  r_drake_build(   target,   character_only = FALSE,   ...,   source = NULL,   r_fn = NULL,   r_args = list() )  r_outdated(..., source = NULL, r_fn = NULL, r_args = list())  r_recoverable(..., source = NULL, r_fn = NULL, r_args = list())  r_missed(..., source = NULL, r_fn = NULL, r_args = list())  r_deps_target(   target,   character_only = FALSE,   ...,   source = NULL,   r_fn = NULL,   r_args = list() )  r_drake_graph_info(..., source = NULL, r_fn = NULL, r_args = list())  r_vis_drake_graph(..., source = NULL, r_fn = NULL, r_args = list())  r_sankey_drake_graph(..., source = NULL, r_fn = NULL, r_args = list())  r_drake_ggraph(..., source = NULL, r_fn = NULL, r_args = list())  r_text_drake_graph(..., source = NULL, r_fn = NULL, r_args = list())  r_predict_runtime(..., source = NULL, r_fn = NULL, r_args = list())  r_predict_workers(..., source = NULL, r_fn = NULL, r_args = list())"},{"path":"https://docs.ropensci.org/drake/reference/r_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a drake function in a fresh new R process\n — r_make","text":"source Path R script file loads packages, functions, etc. returns drake_config() object. 3 ways set path. Pass explicit file path. Call options(drake_source = \"path_to_your_script.R\"). Just create file called \"_drake.R\" working directory supply nothing source. r_fn callr function callr::r callr::r_bg. Example: r_make(r_fn = callr::r). r_args List arguments r_fn, including func args. Example: r_make(r_fn = callr::r_bg, r_args = list(stdout = \"stdout.log\")). target Name target. character_only Logical, whether name treated character symbol (just like character.library()). ... Arguments inner function. example, want call r_vis_drake_graph(), inner function vis_drake_graph(), selfcontained example argument supply ellipsis.","code":""},{"path":"https://docs.ropensci.org/drake/reference/r_make.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch a drake function in a fresh new R process\n — r_make","text":"drake searches environment detect dependencies, functions like make(), outdated(), etc. designed run fresh clean R sessions. Wrappers r_make(), r_outdated(), etc. run reproducibly even current R session old stale. r_outdated() runs four steps . r_make() etc. similar. Launch new callr::r() session. fresh session, run R script source argument. script loads packages, functions, global options, etc. calls drake_config() end. drake_config() preprocessing step make(), accepts arguments make() (e.g. plan targets). session, run outdated() config argument step 2. Return result back main process (e.g. interactive R session).","code":""},{"path":"https://docs.ropensci.org/drake/reference/r_make.html","id":"recovery","dir":"Reference","previous_headings":"","what":"Recovery","title":"Launch a drake function in a fresh new R process\n — r_make","text":"make(recover = TRUE, recoverable = TRUE) powers automated data recovery. default recover FALSE targets recovered distant past may generated earlier versions R earlier package environments longer exist. works: recover TRUE, drake tries salvage old target values cache instead running commands plan. target recoverable old value somewhere cache shares command, dependencies, etc. target built. old value generated make(recoverable = TRUE). conditions met, drake Assign recently-generated admissible data target, skip target's command.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/r_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a drake function in a fresh new R process\n — r_make","text":"","code":"if (FALSE) { isolate_example(\"quarantine side effects\", { if (requireNamespace(\"knitr\", quietly = TRUE)) { writeLines(   c(     \"library(drake)\",     \"load_mtcars_example()\",     \"drake_config(my_plan, targets = c(\\\"small\\\", \\\"large\\\"))\"   ),   \"_drake.R\" # default value of the `source` argument ) cat(readLines(\"_drake.R\"), sep = \"\\n\") r_outdated() r_make() r_outdated() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/r_recipe_wildcard.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Makefile recipe wildcard\n — r_recipe_wildcard","title":"Default Makefile recipe wildcard\n — r_recipe_wildcard","text":"2019-01-02","code":""},{"path":"https://docs.ropensci.org/drake/reference/r_recipe_wildcard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Makefile recipe wildcard\n — r_recipe_wildcard","text":"","code":"r_recipe_wildcard()"},{"path":"https://docs.ropensci.org/drake/reference/r_recipe_wildcard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Makefile recipe wildcard\n — r_recipe_wildcard","text":"R recipe wildcard.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rate_limiting_times.html","id":null,"dir":"Reference","previous_headings":"","what":"rate_limiting_times  — rate_limiting_times","title":"rate_limiting_times  — rate_limiting_times","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/rate_limiting_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rate_limiting_times  — rate_limiting_times","text":"","code":"rate_limiting_times(...)"},{"path":"https://docs.ropensci.org/drake/reference/rate_limiting_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rate_limiting_times  — rate_limiting_times","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_config.html","id":null,"dir":"Reference","previous_headings":"","what":"read_config  — read_config","title":"read_config  — read_config","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_config  — read_config","text":"","code":"read_config(...)"},{"path":"https://docs.ropensci.org/drake/reference/read_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_config  — read_config","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a config object from the cache\n — read_drake_config","title":"Read a config object from the cache\n — read_drake_config","text":"drake longer stores config object, plan, etc. cache make(). change improves speed.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a config object from the cache\n — read_drake_config","text":"","code":"read_drake_config(   path = getwd(),   search = TRUE,   cache = NULL,   verbose = 1L,   jobs = 1,   envir = parent.frame() )"},{"path":"https://docs.ropensci.org/drake/reference/read_drake_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a config object from the cache\n — read_drake_config","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11. jobs Number jobs/workers parallel processing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a config object from the cache\n — read_drake_config","text":"2019-01-06","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a workflow graph from the cache\n — read_drake_graph","title":"Read a workflow graph from the cache\n — read_drake_graph","text":"drake longer stores config object, plan, etc. cache make(). change improves speed.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a workflow graph from the cache\n — read_drake_graph","text":"","code":"read_drake_graph(path = getwd(), search = TRUE, cache = NULL, verbose = 1L)"},{"path":"https://docs.ropensci.org/drake/reference/read_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a workflow graph from the cache\n — read_drake_graph","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a workflow graph from the cache\n — read_drake_graph","text":"2019-01-06","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"read_drake_meta  — read_drake_meta","title":"read_drake_meta  — read_drake_meta","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_drake_meta  — read_drake_meta","text":"","code":"read_drake_meta(...)"},{"path":"https://docs.ropensci.org/drake/reference/read_drake_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_drake_meta  — read_drake_meta","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the plan from the cache\n — read_drake_plan","title":"Read the plan from the cache\n — read_drake_plan","text":"drake longer stores config object, plan, etc. cache make(). change improves speed.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the plan from the cache\n — read_drake_plan","text":"","code":"read_drake_plan(path = getwd(), search = TRUE, cache = NULL, verbose = 1L)"},{"path":"https://docs.ropensci.org/drake/reference/read_drake_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the plan from the cache\n — read_drake_plan","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read the plan from the cache\n — read_drake_plan","text":"2019-01-06","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the pseudo-random number generator seed of the project.\n — read_drake_seed","title":"Read the pseudo-random number generator seed of the project.\n — read_drake_seed","text":"project created make() drake_config(), project's pseudo-random number generator seed cached. , unless cache destroyed, seeds targets deterministically depend one central seed. way, reproducibility protected, even randomness.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the pseudo-random number generator seed of the project.\n — read_drake_seed","text":"","code":"read_drake_seed(path = NULL, search = NULL, cache = NULL, verbose = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/read_drake_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the pseudo-random number generator seed of the project.\n — read_drake_seed","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the pseudo-random number generator seed of the project.\n — read_drake_seed","text":"integer vector.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_drake_seed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the pseudo-random number generator seed of the project.\n — read_drake_seed","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { cache <- storr::storr_environment() # Just for the examples. my_plan <- drake_plan(   target1 = sqrt(1234),   target2 = sample.int(n = 12, size = 1) + target1 ) tmp <- sample.int(1) # Needed to get a .Random.seed, but not for drake. digest::digest(.Random.seed) # Fingerprint of the current R session's seed. make(my_plan, cache = cache) # Run the project, build the targets. digest::digest(.Random.seed) # Your session's seed did not change. # drake uses a hard-coded seed if you do not supply one. read_drake_seed(cache = cache) readd(target2, cache = cache) # Randomly-generated target data. clean(target2, cache = cache) # Oops, I removed the data! tmp <- sample.int(1) # Maybe the R session's seed also changed. make(my_plan, cache = cache) # Rebuild target2. # Same as before: read_drake_seed(cache = cache) readd(target2, cache = cache) # You can also supply a seed. # If your project already exists, it must agree with the project's # preexisting seed (default: 0) clean(target2, cache = cache) make(my_plan, cache = cache, seed = 0) read_drake_seed(cache = cache) readd(target2, cache = cache) # If you want to supply a different seed than 0, # you need to destroy the cache and start over first. clean(destroy = TRUE, cache = cache) cache <- storr::storr_environment() # Just for the examples. make(my_plan, cache = cache, seed = 1234) read_drake_seed(cache = cache) readd(target2, cache = cache) }) }"},{"path":"https://docs.ropensci.org/drake/reference/read_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"read_graph  — read_graph","title":"read_graph  — read_graph","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_graph  — read_graph","text":"","code":"read_graph(...)"},{"path":"https://docs.ropensci.org/drake/reference/read_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_graph  — read_graph","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"read_plan  — read_plan","title":"read_plan  — read_plan","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_plan  — read_plan","text":"","code":"read_plan(...)"},{"path":"https://docs.ropensci.org/drake/reference/read_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_plan  — read_plan","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a trace of a dynamic target.\n — read_trace","title":"Read a trace of a dynamic target.\n — read_trace","text":"Read target's dynamic trace cache. Best used outside drake plan.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a trace of a dynamic target.\n — read_trace","text":"","code":"read_trace(   trace,   target,   cache = drake::drake_cache(path = path),   path = NULL,   character_only = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/read_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a trace of a dynamic target.\n — read_trace","text":"trace Character, name trace want extract. trace names declared .trace argument map(), cross() group(). target Symbol character, depending value character_only. target T=name dynamic target one traces defined using .trace argument dynamic map(), cross(), group(). cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL. character_only Logical, whether name treated character symbol (just like character.library()).","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a trace of a dynamic target.\n — read_trace","text":"dynamic trace one target another: vector values grouping variable.","code":""},{"path":"https://docs.ropensci.org/drake/reference/read_trace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a trace of a dynamic target.\n — read_trace","text":"dynamic branching, trace keeps track sub-targets generated. reminds us values grouping variables go individual sub-targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/read_trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a trace of a dynamic target.\n — read_trace","text":"","code":"if (FALSE) { isolate_example(\"demonstrate dynamic trace\", { plan <- drake_plan(   w = LETTERS[seq_len(3)],   x = letters[seq_len(2)],    # The first trace lets us see the values of w   # that go with the sub-targets of y.   y = target(paste0(w, x), dynamic = cross(w, x, .trace = w)),    # We can use the trace as a grouping variable for the next   # group().   w_tr = read_trace(\"w\", y),    # Now, we use the trace again to keep track of the   # values of w corresponding to the sub-targets of z.   z = target(     paste0(y, collapse = \"-\"),     dynamic = group(y, .by = w_tr, .trace = w_tr)   ) ) make(plan)  # We can read the trace outside make(). # That way, we know which values of `w` correspond # to the sub-targets of `y`. readd(y) read_trace(\"w\", y)  # And we know which values of `w_tr` (and thus `w`) # match up with the sub-targets of `y`. readd(z) read_trace(\"w_tr\", z) }) }"},{"path":"https://docs.ropensci.org/drake/reference/readd.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and return a drake target/import from the cache.\n — readd","title":"Read and return a drake target/import from the cache.\n — readd","text":"readd() returns object cache, loadd() loads one objects cache environment session. objects usually targets built make(). target dynamic, readd() loadd() retrieve list sub-target values. can restrict sub-targets include using subtargets argument.","code":""},{"path":"https://docs.ropensci.org/drake/reference/readd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and return a drake target/import from the cache.\n — readd","text":"","code":"readd(   target,   character_only = FALSE,   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   namespace = NULL,   verbose = 1L,   show_source = FALSE,   subtargets = NULL,   subtarget_list = FALSE )  loadd(   ...,   list = character(0),   imported_only = NULL,   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   namespace = NULL,   envir = parent.frame(),   jobs = 1,   verbose = 1L,   deps = FALSE,   lazy = \"eager\",   graph = NULL,   replace = TRUE,   show_source = FALSE,   tidyselect = !deps,   config = NULL,   subtargets = NULL,   subtarget_list = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/readd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and return a drake target/import from the cache.\n — readd","text":"target character_only TRUE, target character string naming object read. Otherwise, target unquoted symbol name object. character_only Logical, whether name treated character symbol (just like character.library()). path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. namespace Optional character string, name storr namespace read . verbose Deprecated 2019-09-11. show_source Logical, option show command produced target indicate object imported (using show_source()). subtargets numeric vector indices. target dynamic, loadd() readd() retrieve list sub-targets. can restrict sub-targets retrieve subtargets argument. example, readd(x, subtargets = seq_len(3)) retrieves first 3 sub-targets dynamic target x. subtarget_list Logical, dynamic targets . TRUE, dynamic target loaded named list sub-target values. FALSE, drake attempts concatenate sub-targets vctrs::vec_c() (returns unnamed list concatenation possible). ... Targets load cache: names (symbols) character strings. tidyselect package installed, can also supply dplyr-style tidyselect commands starts_with(), ends_with(), one_of(). list Character vector naming targets loaded cache. Similar list argument remove(). imported_only Logical, deprecated. envir Environment load objects . Defaults calling environment (current workspace). jobs Number parallel jobs loading objects. non-Windows systems, loading process multiple objects can lightly parallelized via parallel::mclapply(). just set jobs integer greater 1. Windows, jobs automatically demoted 1. deps Logical, whether load cached dependencies targets instead targets . Important note: deps = TRUE disables tidyselect functionality. example, loadd(starts_with(\"model_\"), config = config, deps = TRUE) work. selection mechanism work, model_* targets need already cache, always case debugging projects. help drake understand mean, must name targets explicitly deps TRUE, e.g. loadd(model_A, model_B, config = config, deps = TRUE). lazy Either string logical. Choices: \"eager\": lazy loading. target loaded right away assign(). \"promise\": lazy loading delayedAssign() \"bind\": lazy loading active bindings: bindr::populate_env(). TRUE: \"promise\". FALSE: \"eager\". graph Deprecated. replace Logical. FALSE, items already environment replaced. tidyselect Logical, whether enable tidyselect expressions ... like starts_with(\"prefix\") ends_with(\"suffix\"). config Optional drake_config() object. supply one deps TRUE.","code":""},{"path":"https://docs.ropensci.org/drake/reference/readd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and return a drake target/import from the cache.\n — readd","text":"cached value target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/readd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and return a drake target/import from the cache.\n — readd","text":"three uses loadd() readd() functions: Exploring results outside drake/make() pipeline. call make() run project, drake puts targets cache, usually folder called .drake. may want inspect targets afterwards, possibly interactive R session. However, files .drake folder organized special format created storr package, exactly human-readable. retrieve target manual viewing, use readd(). load one targets session, use loadd(). knitr / R Markdown reports. can borrow drake targets active code chunks right calls loadd() readd(). reports can either run outside drake pipeline, better yet, part pipeline . call knitr_in(\"your_report.Rmd\") inside drake_plan() command, make() scan \"your_report.Rmd\" calls loadd() readd() active code chunks, treat loaded targets dependencies. way, make() automatically (re)run report dependencies change. using make(memory_strategy = \"none\") make(memory_strategy = \"unload\"), loadd() readd() can manually load dependencies memory target built. , must carefully inspect deps_target() vis_drake_graph() running make() sure dependency relationships among targets correct. wish incur extra dependencies loadd() readd(), need use ignore(), e.g. drake_plan(x = 1, y = ignore(readd(x))) drake_plan(x = 1, y = readd(ignore(\"x\"), character_only = TRUE)). Compare plans drake_plan(x = 1, y = readd(x)) drake_plan(x = 1, y = readd(\"x\", character_only = TRUE)) using vis_drake_graph() deps_target().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/readd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and return a drake target/import from the cache.\n — readd","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build the targets. readd(reg1) # Return imported object 'reg1' from the cache. readd(small) # Return targets 'small' from the cache. readd(\"large\", character_only = TRUE) # Return 'large' from the cache. # For external files, only the fingerprint/hash is stored. readd(file_store(\"report.md\"), character_only = TRUE) } }) } if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the projects, build the targets. config <- drake_config(my_plan) loadd(small) # Load target 'small' into your workspace. small # For many targets, you can parallelize loadd() # using the 'jobs' argument. loadd(list = c(\"small\", \"large\"), jobs = 2) ls() # Load the dependencies of the target, coef_regression2_small loadd(coef_regression2_small, deps = TRUE, config = config) ls() # Load all the targets listed in the workflow plan # of the previous `make()`. # If you do not supply any target names, `loadd()` loads all the targets. # Be sure your computer has enough memory. loadd() ls() } }) }"},{"path":"https://docs.ropensci.org/drake/reference/recover_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or create a drake cache\n — recover_cache","title":"Load or create a drake cache\n — recover_cache","text":"Deprecated 2019-01-13.","code":""},{"path":"https://docs.ropensci.org/drake/reference/recover_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or create a drake cache\n — recover_cache","text":"","code":"recover_cache(   path = NULL,   hash_algorithm = NULL,   short_hash_algo = NULL,   long_hash_algo = NULL,   force = FALSE,   verbose = 1L,   fetch_cache = NULL,   console_log_file = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/recover_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or create a drake cache\n — recover_cache","text":"path File path cache. hash_algorithm Name hash algorithm use. See algo argument digest package options. short_hash_algo Deprecated 2018-12-12. Use hash_algorithm instead. long_hash_algo Deprecated 2018-12-12. Use hash_algorithm instead. force Logical, whether load cache despite back compatibility issues running version drake. verbose Deprecated 2019-09-11. fetch_cache Deprecated. console_log_file Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/recover_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load or create a drake cache\n — recover_cache","text":"drake/storr cache.","code":""},{"path":"https://docs.ropensci.org/drake/reference/recover_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load or create a drake cache\n — recover_cache","text":"work -memory caches storr_environment().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/recoverable.html","id":null,"dir":"Reference","previous_headings":"","what":"List the most upstream recoverable outdated targets.\n — recoverable","title":"List the most upstream recoverable outdated targets.\n — recoverable","text":"shows upstream updated targets. Whether downstream targets recoverable depends eventual values upstream targets next make().","code":""},{"path":"https://docs.ropensci.org/drake/reference/recoverable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the most upstream recoverable outdated targets.\n — recoverable","text":"","code":"recoverable(..., make_imports = TRUE, do_prework = TRUE, config = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/recoverable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the most upstream recoverable outdated targets.\n — recoverable","text":"... Arguments make(), plan targets envir. make_imports Logical, whether make imports first. Set FALSE save time risk obsolete output. do_prework Whether prework normally supplied make(). config Deprecated (2019-12-21). configured workflow drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/recoverable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the most upstream recoverable outdated targets.\n — recoverable","text":"Character vector names recoverable targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/recoverable.html","id":"recovery","dir":"Reference","previous_headings":"","what":"Recovery","title":"List the most upstream recoverable outdated targets.\n — recoverable","text":"make(recover = TRUE, recoverable = TRUE) powers automated data recovery. default recover FALSE targets recovered distant past may generated earlier versions R earlier package environments longer exist. works: recover TRUE, drake tries salvage old target values cache instead running commands plan. target recoverable old value somewhere cache shares command, dependencies, etc. target built. old value generated make(recoverable = TRUE). conditions met, drake Assign recently-generated admissible data target, skip target's command.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/recoverable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the most upstream recoverable outdated targets.\n — recoverable","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) clean() outdated(my_plan) # Which targets are outdated? recoverable(my_plan) # Which of these are recoverable and upstream? # The report still builds because clean() removes report.md, # but make() recovers the rest. make(my_plan, recover = TRUE) outdated(my_plan) # When was the *recovered* small data actually built (first stored)? # (Was I using a different version of R back then?) diagnose(small)$date # If you set the same seed as before, you can even # rename targets without having to build them again. # For an example, see # the \"Reproducible data recovery and renaming\" section of # https://github.com/ropensci/drake/blob/main/README.md. } }) }"},{"path":"https://docs.ropensci.org/drake/reference/recoverable_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — recoverable_impl","title":"Internal function with a drake_config() argument — recoverable_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/recoverable_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — recoverable_impl","text":"","code":"recoverable_impl(config = NULL, make_imports = TRUE, do_prework = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/recoverable_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — recoverable_impl","text":"config drake_config() object. make_imports Logical, whether make imports first. Set FALSE save time risk obsolete output. do_prework Whether prework normally supplied make().","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce multiple groupings of targets\n — reduce_by","title":"Reduce multiple groupings of targets\n — reduce_by","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce multiple groupings of targets\n — reduce_by","text":"","code":"reduce_by(   plan,   ...,   prefix = \"target\",   begin = \"\",   op = \" + \",   end = \"\",   pairwise = TRUE,   append = TRUE,   filter = NULL,   sep = \"_\" )"},{"path":"https://docs.ropensci.org/drake/reference/reduce_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce multiple groupings of targets\n — reduce_by","text":"plan Workflow plan data frame prespecified targets. ... Symbols, columns plan define target groupings. reduce_plan() call applied grouping. Groupings NAs selector variables ignored. prefix Character, prefix naming new targets. Suffixes generated values columns specified .... begin Character, code place beginning step reduction. op Binary operator apply reduction end Character, code place end step reduction. pairwise Logical, whether create multiple new targets, one pair/step reduction (TRUE), reduction one command. append Logical. TRUE, output include original rows plan argument. FALSE, output include new targets commands. filter expression like pass dplyr::filter(). rows filter evaluates TRUE gathered, rest excluded gathering. just call dplyr::filter() gather_by()? gather_by(append = TRUE, filter = my_column == \"my_value\") gathers targets including original targets output. See examples demonstration. sep Character scalar, delimiter creating names new targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce multiple groupings of targets\n — reduce_by","text":"workflow plan data frame.","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduce multiple groupings of targets\n — reduce_by","text":"Perform several calls reduce_plan() based groupings columns plan, row-bind new targets plan.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/reduce_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Write commands to reduce several targets down to one.\n — reduce_plan","title":"Write commands to reduce several targets down to one.\n — reduce_plan","text":"Deprecated 2019-05-16. Use drake_plan() transformations instead. See https://books.ropensci.org/drake/plans.html#large-plans details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write commands to reduce several targets down to one.\n — reduce_plan","text":"","code":"reduce_plan(   plan = NULL,   target = \"target\",   begin = \"\",   op = \" + \",   end = \"\",   pairwise = TRUE,   append = FALSE,   sep = \"_\" )"},{"path":"https://docs.ropensci.org/drake/reference/reduce_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write commands to reduce several targets down to one.\n — reduce_plan","text":"plan Workflow plan data frame prespecified targets. target Name new reduced target. begin Character, code place beginning step reduction. op Binary operator apply reduction end Character, code place end step reduction. pairwise Logical, whether create multiple new targets, one pair/step reduction (TRUE), reduction one command. append Logical. TRUE, output include original rows plan argument. FALSE, output include new targets commands. sep Character scalar, delimiter creating new target names.","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write commands to reduce several targets down to one.\n — reduce_plan","text":"workflow plan data frame aggregates multiple prespecified targets one additional target downstream.","code":""},{"path":"https://docs.ropensci.org/drake/reference/reduce_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write commands to reduce several targets down to one.\n — reduce_plan","text":"Creates new workflow plan data frame commands reduction (.e. repeatedly apply binary operator pairs targets produce one target).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_drake_ggraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the workflow with ggplot2/ggraph using\ndrake_graph_info() output.\n — render_drake_ggraph","title":"Visualize the workflow with ggplot2/ggraph using\ndrake_graph_info() output.\n — render_drake_ggraph","text":"function requires packages ggplot2 ggraph. Install install.packages(c(\"ggplot2\", \"ggraph\")).","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_drake_ggraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the workflow with ggplot2/ggraph using\ndrake_graph_info() output.\n — render_drake_ggraph","text":"","code":"render_drake_ggraph(   graph_info,   main = graph_info$default_title,   label_nodes = FALSE,   transparency = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/render_drake_ggraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the workflow with ggplot2/ggraph using\ndrake_graph_info() output.\n — render_drake_ggraph","text":"graph_info List data frames generated drake_graph_info(). 3 data frames: nodes, edges, legend_nodes. main Character string, title graph. label_nodes Logical, whether label nodes. FALSE, graph text next nodes, recommended large graphs lots targets. transparency Logical, whether allow transparency rendered graph. Set FALSE get warnings like \"semi-transparency supported device\".","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_drake_ggraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the workflow with ggplot2/ggraph using\ndrake_graph_info() output.\n — render_drake_ggraph","text":"ggplot2 object, can modify layers, show plot(), save file ggsave().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/render_drake_ggraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the workflow with ggplot2/ggraph using\ndrake_graph_info() output.\n — render_drake_ggraph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). if (requireNamespace(\"ggraph\", quietly = TRUE)) {   # Instead of jumpting right to vis_drake_graph(), get the data frames   # of nodes, edges, and legend nodes.   drake_ggraph(my_plan) # Jump straight to the static graph.   # Get the node and edge info that vis_drake_graph() just plotted:   graph <- drake_graph_info(my_plan)   render_drake_ggraph(graph) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/render_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","title":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","text":"function called inside vis_drake_graph(), typical users call often.","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","text":"","code":"render_drake_graph(   graph_info,   file = character(0),   layout = NULL,   direction = NULL,   hover = TRUE,   main = graph_info$default_title,   selfcontained = FALSE,   navigationButtons = TRUE,   ncol_legend = 1,   collapse = TRUE,   on_select = NULL,   level_separation = NULL,   ... )"},{"path":"https://docs.ropensci.org/drake/reference/render_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","text":"graph_info List data frames generated drake_graph_info(). 3 data frames: nodes, edges, legend_nodes. file Name file save graph. NULL character(0), file saved graph rendered displayed within R. file ends .png, .jpg, .jpeg, .pdf extension, static image saved. case, webshot package PhantomJS required: install.packages(\"webshot\"); webshot::install_phantomjs(). file end .png, .jpg, .jpeg, .pdf extension, HTML file saved, can open interactive graph using web browser. layout Deprecated. direction Deprecated. hover Logical, whether show command generated target hover node mouse. imports, label change hovering. main Character string, title graph. selfcontained Logical, whether save file self-contained HTML file (external resources base64 encoded) file external resources placed adjacent directory. TRUE, pandoc required. selfcontained argument applies HTML files. words, file PNG, PDF, JPEG file, instance, point moot. navigationButtons Logical, whether add navigation buttons visNetwork::visInteraction(navigationButtons = TRUE) ncol_legend Number columns legend nodes. remove legend entirely, set ncol_legend NULL 0. collapse Logical, whether allow nodes collapse double click . Analogous visNetwork::visOptions(collapse = TRUE). on_select defines node selection event handling. Either string valid JavaScript may passed visNetwork::visEvents(), one following: TRUE, NULL/FALSE. TRUE , enables default behavior opening link specified on_select_col given drake_graph_info(). NULL/FALSE disables behavior. level_separation Numeric, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider setting aspect ratio graph far 1. Defaults 150 visNetwork. ... Arguments passed visNetwork().","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","text":"visNetwork graph.","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_drake_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","text":"enhanced interactivity graph, see mandrake package.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/render_drake_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a visualization using the data frames\ngenerated by drake_graph_info().\n — render_drake_graph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). if (requireNamespace(\"visNetwork\", quietly = TRUE)) { # Instead of jumping right to vis_drake_graph(), get the data frames # of nodes, edges, and legend nodes. vis_drake_graph(my_plan) # Jump straight to the interactive graph. # Get the node and edge info that vis_drake_graph() just plotted: graph <- drake_graph_info(my_plan) # You can pass the data frames right to render_drake_graph() # (as in vis_drake_graph()) or you can create # your own custom visNewtork graph. render_drake_graph(graph) } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/render_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"render_graph  — render_graph","title":"render_graph  — render_graph","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"render_graph  — render_graph","text":"","code":"render_graph(...)"},{"path":"https://docs.ropensci.org/drake/reference/render_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"render_graph  — render_graph","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_sankey_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Sankey diagram from drake_graph_info().\n — render_sankey_drake_graph","title":"Render a Sankey diagram from drake_graph_info().\n — render_sankey_drake_graph","text":"function called inside sankey_drake_graph(), typical users call often. legend unfortunately unavailable graph , can see colors mean visNetwork::visNetwork(drake::legend_nodes()).","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_sankey_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Sankey diagram from drake_graph_info().\n — render_sankey_drake_graph","text":"","code":"render_sankey_drake_graph(   graph_info,   file = character(0),   selfcontained = FALSE,   ... )"},{"path":"https://docs.ropensci.org/drake/reference/render_sankey_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Sankey diagram from drake_graph_info().\n — render_sankey_drake_graph","text":"graph_info List data frames generated drake_graph_info(). 3 data frames: nodes, edges, legend_nodes. file Name file save graph. NULL character(0), file saved graph rendered displayed within R. file ends .png, .jpg, .jpeg, .pdf extension, static image saved. case, webshot package PhantomJS required: install.packages(\"webshot\"); webshot::install_phantomjs(). file end .png, .jpg, .jpeg, .pdf extension, HTML file saved, can open interactive graph using web browser. selfcontained Logical, whether save file self-contained HTML file (external resources base64 encoded) file external resources placed adjacent directory. TRUE, pandoc required. ... Arguments passed networkD3::sankeyNetwork().","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_sankey_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Sankey diagram from drake_graph_info().\n — render_sankey_drake_graph","text":"visNetwork graph.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/render_sankey_drake_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a Sankey diagram from drake_graph_info().\n — render_sankey_drake_graph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). if (suppressWarnings(require(\"knitr\"))) { if (requireNamespace(\"networkD3\", quietly = TRUE)) { if (requireNamespace(\"visNetwork\", quietly = TRUE)) { # Instead of jumpting right to sankey_drake_graph(), get the data frames # of nodes, edges, and legend nodes. sankey_drake_graph(my_plan) # Jump straight to the interactive graph. # Show the legend separately. visNetwork::visNetwork(nodes = drake::legend_nodes()) # Get the node and edge info that sankey_drake_graph() just plotted: graph <- drake_graph_info(my_plan) # You can pass the data frames right to render_sankey_drake_graph() # (as in sankey_drake_graph()) or you can create # your own custom visNewtork graph. render_sankey_drake_graph(graph) } } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/render_static_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: render a ggraph/ggplot2 representation\nof your drake project.\n — render_static_drake_graph","title":"Deprecated: render a ggraph/ggplot2 representation\nof your drake project.\n — render_static_drake_graph","text":"Use render_drake_ggraph() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_static_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: render a ggraph/ggplot2 representation\nof your drake project.\n — render_static_drake_graph","text":"","code":"render_static_drake_graph(graph_info, main = graph_info$default_title)"},{"path":"https://docs.ropensci.org/drake/reference/render_static_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: render a ggraph/ggplot2 representation\nof your drake project.\n — render_static_drake_graph","text":"graph_info List data frames generated drake_graph_info(). 3 data frames: nodes, edges, legend_nodes. main Character string, title graph.","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_static_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: render a ggraph/ggplot2 representation\nof your drake project.\n — render_static_drake_graph","text":"ggplot2 object, can modify layers, show plot(), save file ggsave().","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_static_drake_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: render a ggraph/ggplot2 representation\nof your drake project.\n — render_static_drake_graph","text":"Deprecated 2018-07-25.","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_text_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a workflow graph as text in your terminal window\nusing drake_graph_info() output.\n — render_text_drake_graph","title":"Show a workflow graph as text in your terminal window\nusing drake_graph_info() output.\n — render_text_drake_graph","text":"function called inside text_drake_graph(), typical users call often. See ?text_drake_graph details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_text_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a workflow graph as text in your terminal window\nusing drake_graph_info() output.\n — render_text_drake_graph","text":"","code":"render_text_drake_graph(graph_info, nchar = 1L, print = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/render_text_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a workflow graph as text in your terminal window\nusing drake_graph_info() output.\n — render_text_drake_graph","text":"graph_info List data frames generated drake_graph_info(). 3 data frames: nodes, edges, legend_nodes. nchar node, maximum number characters node label show. Can 0, case node colored box instead node label. Caution: nchar > 0 mess layout. print Logical. TRUE, graph print console via message(). FALSE, nothing printed. However, still visualization text_drake_graph() render_text_drake_graph() still invisibly return character string can print message().","code":""},{"path":"https://docs.ropensci.org/drake/reference/render_text_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a workflow graph as text in your terminal window\nusing drake_graph_info() output.\n — render_text_drake_graph","text":"lines text visualization.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/render_text_drake_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a workflow graph as text in your terminal window\nusing drake_graph_info() output.\n — render_text_drake_graph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). pkgs <- requireNamespace(\"txtplot\", quietly = TRUE) &&   requireNamespace(\"visNetwork\", quietly = TRUE) if (pkgs) { # Instead of jumpting right to vis_drake_graph(), get the data frames # of nodes, edges, and legend nodes. text_drake_graph(my_plan) # Jump straight to the interactive graph. # Get the node and edge info that vis_drake_graph() just plotted: graph <- drake_graph_info(my_plan) # You can pass the data frames right to render_text_drake_graph(). render_text_drake_graph(graph) } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/rescue_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to repair a drake cache that is prone\nto throwing storr-related errors.\n — rescue_cache","title":"Try to repair a drake cache that is prone\nto throwing storr-related errors.\n — rescue_cache","text":"Sometimes, storr caches may dangling orphaned files prevent loading cleaning. function tries remove files can use cache normally .","code":""},{"path":"https://docs.ropensci.org/drake/reference/rescue_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to repair a drake cache that is prone\nto throwing storr-related errors.\n — rescue_cache","text":"","code":"rescue_cache(   targets = NULL,   path = NULL,   search = NULL,   verbose = NULL,   force = FALSE,   cache = drake::drake_cache(path = path),   jobs = 1,   garbage_collection = FALSE )"},{"path":"https://docs.ropensci.org/drake/reference/rescue_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to repair a drake cache that is prone\nto throwing storr-related errors.\n — rescue_cache","text":"targets Character vector, names targets rescue. many drake utility functions, word target defined generally case, encompassing imports well true targets. targets NULL, everything cache rescued. path Character. Set path path storr::storr_rds() cache retrieve specific cache generated storr::storr_rds() drake::new_cache(). path argument NULL, drake_cache() searches parent directories find folder called .drake/. search Deprecated. verbose Deprecated 2019-09-11. force Deprecated. cache storr cache object. jobs Number jobs light parallelism (disabled Windows). garbage_collection Logical, whether garbage collection final step. See drake_gc() clean() details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rescue_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try to repair a drake cache that is prone\nto throwing storr-related errors.\n — rescue_cache","text":"Nothing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/rescue_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try to repair a drake cache that is prone\nto throwing storr-related errors.\n — rescue_cache","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). make(my_plan) # Run the project, build targets. This creates the cache. # Remove dangling cache files that could cause errors. rescue_cache(jobs = 2) # Alternatively, just rescue targets 'small' and 'large'. # Rescuing specific targets is usually faster. rescue_cache(targets = c(\"small\", \"large\")) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_loadd.html","id":null,"dir":"Reference","previous_headings":"","what":"Loadd target at cursor into global environment\n — rs_addin_loadd","title":"Loadd target at cursor into global environment\n — rs_addin_loadd","text":"function provides RStudio addin load target current cursor location cache global environment. convenient pipeline development building established targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_loadd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loadd target at cursor into global environment\n — rs_addin_loadd","text":"","code":"rs_addin_loadd(context = NULL)"},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_loadd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loadd target at cursor into global environment\n — rs_addin_loadd","text":"context RStudio document context. Read active document supplied. used testing purposes.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_loadd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loadd target at cursor into global environment\n — rs_addin_loadd","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_loadd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loadd target at cursor into global environment\n — rs_addin_loadd","text":"using non-standard drake cache, must supply \"rstudio_drake_cache\" global option, e.g. options(rstudio_drake_cache = storr::storr_rds(\"my_cache\")).","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_make.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin for r_make()\n — rs_addin_r_make","title":"RStudio addin for r_make()\n — rs_addin_r_make","text":"Call r_make() RStudio addin.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin for r_make()\n — rs_addin_r_make","text":"","code":"rs_addin_r_make(r_args = list())"},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio addin for r_make()\n — rs_addin_r_make","text":"r_args List arguments r_fn, including func args. Example: r_make(r_fn = callr::r_bg, r_args = list(stdout = \"stdout.log\")).","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RStudio addin for r_make()\n — rs_addin_r_make","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_outdated.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin for r_outdated()\n — rs_addin_r_outdated","title":"RStudio addin for r_outdated()\n — rs_addin_r_outdated","text":"Call r_outdated() RStudio addin.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_outdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin for r_outdated()\n — rs_addin_r_outdated","text":"","code":"rs_addin_r_outdated(r_args = list(), .print = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_outdated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio addin for r_outdated()\n — rs_addin_r_outdated","text":"r_args List arguments r_fn, including func args. Example: r_make(r_fn = callr::r_bg, r_args = list(stdout = \"stdout.log\")). .print Logical, whether print() result console. Required addin.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_outdated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RStudio addin for r_outdated()\n — rs_addin_r_outdated","text":"character vector outdated targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_vis_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin for r_vis_drake_graph()\n — rs_addin_r_vis_drake_graph","title":"RStudio addin for r_vis_drake_graph()\n — rs_addin_r_vis_drake_graph","text":"Call r_vis_drake_graph() RStudio addin.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_vis_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin for r_vis_drake_graph()\n — rs_addin_r_vis_drake_graph","text":"","code":"rs_addin_r_vis_drake_graph(r_args = list(), .print = TRUE)"},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_vis_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio addin for r_vis_drake_graph()\n — rs_addin_r_vis_drake_graph","text":"r_args List arguments r_fn, including func args. Example: r_make(r_fn = callr::r_bg, r_args = list(stdout = \"stdout.log\")). .print Logical, whether print() result console. Required addin.","code":""},{"path":"https://docs.ropensci.org/drake/reference/rs_addin_r_vis_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RStudio addin for r_vis_drake_graph()\n — rs_addin_r_vis_drake_graph","text":"visNetwork graph.","code":""},{"path":"https://docs.ropensci.org/drake/reference/running.html","id":null,"dir":"Reference","previous_headings":"","what":"List running targets.\n — running","title":"List running targets.\n — running","text":"Deprecated 2020-03-23. Use drake_running() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List running targets.\n — running","text":"","code":"running(   path = NULL,   search = NULL,   cache = drake::drake_cache(path = path),   verbose = 1L )"},{"path":"https://docs.ropensci.org/drake/reference/running.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List running targets.\n — running","text":"path Path drake cache (usually hidden .drake/ folder) NULL. search Deprecated. cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/running.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List running targets.\n — running","text":"character vector target names.","code":""},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a Sankey graph of your drake project.\n — sankey_drake_graph","title":"Show a Sankey graph of your drake project.\n — sankey_drake_graph","text":"save time repeated plotting, function divided drake_graph_info() render_sankey_drake_graph(). legend unfortunately unavailable graph , can see colors mean visNetwork::visNetwork(drake::legend_nodes()).","code":""},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a Sankey graph of your drake project.\n — sankey_drake_graph","text":"","code":"sankey_drake_graph(   ...,   file = character(0),   selfcontained = FALSE,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   make_imports = TRUE,   from_scratch = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a Sankey graph of your drake project.\n — sankey_drake_graph","text":"... Arguments make(), plan targets. file Name file save graph. NULL character(0), file saved graph rendered displayed within R. file ends .png, .jpg, .jpeg, .pdf extension, static image saved. case, webshot package PhantomJS required: install.packages(\"webshot\"); webshot::install_phantomjs(). file end .png, .jpg, .jpeg, .pdf extension, HTML file saved, can open interactive graph using web browser. selfcontained Logical, whether save file self-contained HTML file (external resources base64 encoded) file external resources placed adjacent directory. TRUE, pandoc required. build_times Character string logical. character, choices 1. \"build\": runtime command plus time take store target import. 2. \"command\": just runtime command. 3. \"none\": build times. logical, build_times selects whether show times `build_times(..., type = \"build\")`` use build times . See build_times() details. digits Number digits rounding build times targets_only Logical, whether skip imports include targets workflow plan. Optional collection target/import names. nonempty, graph restrict neighborhood . Control neighborhood mode order. mode direction branch graph create neighborhood around . Use \"\" go upstream, \"\" go downstream, \"\" go ways disregard edge direction altogether. order far branch create neighborhood around . Defaults far possible. target neighborhood, custom file_out() files show_output_files TRUE. means actual graph order may slightly greater might expect, ensures consistency show_output_files = TRUE show_output_files = FALSE. subset Optional character vector. Subset targets/imports display graph. Applied , mode, order. advised: edges kept adjacent nodes subset. select intermediate nodes, edges drop graph. make_imports Logical, whether make imports first. Set FALSE increase speed risk using obsolete information. from_scratch Logical, whether assume targets made scratch next make(). Makes targets outdated, keeps information build progress previous make()s. group Optional character scalar, name column used group nodes columns. columns names original drake plan choices. choices (\"status\") column names nodes . group nodes clusters graph, must also supply clusters argument. clusters Optional character vector values cluster . values must elements column nodes data frame specify group argument drake_graph_info(). show_output_files Logical, whether include file_out() files graph. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a Sankey graph of your drake project.\n — sankey_drake_graph","text":"visNetwork graph.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a Sankey graph of your drake project.\n — sankey_drake_graph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). if (requireNamespace(\"networkD3\", quietly = TRUE)) { if (requireNamespace(\"visNetwork\", quietly = TRUE)) { # Plot the network graph representation of the workflow. sankey_drake_graph(my_plan) # Show the legend separately. visNetwork::visNetwork(nodes = drake::legend_nodes()) make(my_plan) # Run the project, build the targets. sankey_drake_graph(my_plan) # The black nodes from before are now green. # Plot a subgraph of the workflow. sankey_drake_graph(my_plan, from = c(\"small\", \"reg2\")) } } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — sankey_drake_graph_impl","title":"Internal function with a drake_config() argument — sankey_drake_graph_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — sankey_drake_graph_impl","text":"","code":"sankey_drake_graph_impl(   config,   file = character(0),   selfcontained = FALSE,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   make_imports = TRUE,   from_scratch = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/sankey_drake_graph_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — sankey_drake_graph_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/session.html","id":null,"dir":"Reference","previous_headings":"","what":"session  — session","title":"session  — session","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"session  — session","text":"","code":"session(...)"},{"path":"https://docs.ropensci.org/drake/reference/session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"session  — session","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/shell_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Shell file for Makefile parallelism\n — shell_file","title":"Shell file for Makefile parallelism\n — shell_file","text":"2019-01-03","code":""},{"path":"https://docs.ropensci.org/drake/reference/shell_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shell file for Makefile parallelism\n — shell_file","text":"","code":"shell_file(path = \"shell.sh\", overwrite = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/shell_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shell file for Makefile parallelism\n — shell_file","text":"path Character. overwrite Logical.","code":""},{"path":"https://docs.ropensci.org/drake/reference/shell_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shell file for Makefile parallelism\n — shell_file","text":"logical","code":""},{"path":"https://docs.ropensci.org/drake/reference/short_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"drake now only uses one hash algorithm per cache.\n — short_hash","title":"drake now only uses one hash algorithm per cache.\n — short_hash","text":"Deprecated 2018-12-12.","code":""},{"path":"https://docs.ropensci.org/drake/reference/short_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drake now only uses one hash algorithm per cache.\n — short_hash","text":"","code":"short_hash(cache = drake::get_cache(verbose = verbose), verbose = 1L)"},{"path":"https://docs.ropensci.org/drake/reference/short_hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drake now only uses one hash algorithm per cache.\n — short_hash","text":"cache drake cache. See new_cache(). supplied, path ignored. verbose Deprecated 2019-09-11.","code":""},{"path":"https://docs.ropensci.org/drake/reference/short_hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drake now only uses one hash algorithm per cache.\n — short_hash","text":"character vector naming hash algorithm.","code":""},{"path":"https://docs.ropensci.org/drake/reference/show_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Show how a target/import was produced.\n — show_source","title":"Show how a target/import was produced.\n — show_source","text":"Show command produced target indicate object file imported.","code":""},{"path":"https://docs.ropensci.org/drake/reference/show_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show how a target/import was produced.\n — show_source","text":"","code":"show_source(target, config, character_only = FALSE)"},{"path":"https://docs.ropensci.org/drake/reference/show_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show how a target/import was produced.\n — show_source","text":"target Symbol denoting target import character vector character_only TRUE. config drake_config() list. character_only Logical, whether interpret target symbol (FALSE) character vector (TRUE).","code":""},{"path":"https://docs.ropensci.org/drake/reference/show_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show how a target/import was produced.\n — show_source","text":"","code":"if (FALSE) { isolate_example(\"contain side effects\", { plan <- drake_plan(x = sample.int(15)) cache <- storr::storr_environment() # custom in-memory cache make(plan, cache = cache) config <- drake_config(plan, cache = cache, history = FALSE) show_source(x, config) }) }"},{"path":"https://docs.ropensci.org/drake/reference/static_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: show a ggraph/ggplot2 representation\nof your drake project.\n — static_drake_graph","title":"Deprecated: show a ggraph/ggplot2 representation\nof your drake project.\n — static_drake_graph","text":"Use drake_ggraph() instead.","code":""},{"path":"https://docs.ropensci.org/drake/reference/static_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: show a ggraph/ggplot2 representation\nof your drake project.\n — static_drake_graph","text":"","code":"static_drake_graph(   config,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   main = NULL,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   make_imports = TRUE,   from_scratch = FALSE,   full_legend = FALSE,   group = NULL,   clusters = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/static_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: show a ggraph/ggplot2 representation\nof your drake project.\n — static_drake_graph","text":"config Deprecated. build_times Character string logical. character, choices 1. \"build\": runtime command plus time take store target import. 2. \"command\": just runtime command. 3. \"none\": build times. logical, build_times selects whether show times `build_times(..., type = \"build\")`` use build times . See build_times() details. digits Number digits rounding build times targets_only Logical, whether skip imports include targets workflow plan. main Character string, title graph. Optional collection target/import names. nonempty, graph restrict neighborhood . Control neighborhood mode order. mode direction branch graph create neighborhood around . Use \"\" go upstream, \"\" go downstream, \"\" go ways disregard edge direction altogether. order far branch create neighborhood around . Defaults far possible. target neighborhood, custom file_out() files show_output_files TRUE. means actual graph order may slightly greater might expect, ensures consistency show_output_files = TRUE show_output_files = FALSE. subset Optional character vector. Subset targets/imports display graph. Applied , mode, order. advised: edges kept adjacent nodes subset. select intermediate nodes, edges drop graph. make_imports Logical, whether make imports first. Set FALSE increase speed risk using obsolete information. from_scratch Logical, whether assume targets made scratch next make(). Makes targets outdated, keeps information build progress previous make()s. full_legend Logical. TRUE, node types printed legend. FALSE, node types used printed legend. group Optional character scalar, name column used group nodes columns. columns names original drake plan choices. choices (\"status\") column names nodes . group nodes clusters graph, must also supply clusters argument. clusters Optional character vector values cluster . values must elements column nodes data frame specify group argument drake_graph_info().","code":""},{"path":"https://docs.ropensci.org/drake/reference/static_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: show a ggraph/ggplot2 representation\nof your drake project.\n — static_drake_graph","text":"ggplot2 object, can modify layers, show plot(), save file ggsave().","code":""},{"path":"https://docs.ropensci.org/drake/reference/static_drake_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: show a ggraph/ggplot2 representation\nof your drake project.\n — static_drake_graph","text":"Deprecated 2018-07-25.","code":""},{"path":"https://docs.ropensci.org/drake/reference/subtargets.html","id":null,"dir":"Reference","previous_headings":"","what":"List sub-targets  — subtargets","title":"List sub-targets  — subtargets","text":"List sub-targets dynamic target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/subtargets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List sub-targets  — subtargets","text":"","code":"subtargets(   target = NULL,   character_only = FALSE,   cache = drake::drake_cache(path = path),   path = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/subtargets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List sub-targets  — subtargets","text":"target Character string symbol, depending character_only. Name dynamic target. character_only Logical, whether target treated character symbol. Just like character.library(). cache drake cache. See new_cache(). supplied, path ignored. path Path drake cache (usually hidden .drake/ folder) NULL.","code":""},{"path":"https://docs.ropensci.org/drake/reference/subtargets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List sub-targets  — subtargets","text":"Character vector sub-target names","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/subtargets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List sub-targets  — subtargets","text":"","code":"if (FALSE) { isolate_example(\"dynamic branching\", { plan <- drake_plan(   w = c(\"a\", \"a\", \"b\", \"b\"),   x = seq_len(4),   y = target(x + 1, dynamic = map(x)),   z = target(sum(x) + sum(y), dynamic = group(x, y, .by = w)) ) make(plan) subtargets(y) subtargets(z) readd(x) readd(y) readd(z) }) }"},{"path":"https://docs.ropensci.org/drake/reference/summaries.html","id":null,"dir":"Reference","previous_headings":"","what":"summaries  — summaries","title":"summaries  — summaries","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/summaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summaries  — summaries","text":"","code":"summaries(...)"},{"path":"https://docs.ropensci.org/drake/reference/summaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summaries  — summaries","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize a target in drake_plan().\n — target","title":"Customize a target in drake_plan().\n — target","text":"target() function way configure individual targets drake plan. common use invoke static branching dynamic branching, can also set values custom columns format, elapsed, retries, max_expand. Details https://books.ropensci.org/drake/plans.html#special-columns. Note: drake_plan(my_target = my_command()) equivalent drake_plan(my_target = target(my_command()).","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize a target in drake_plan().\n — target","text":"","code":"target(command = NULL, transform = NULL, dynamic = NULL, ...)"},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize a target in drake_plan().\n — target","text":"command command build target. transform call map(), split(), cross(), combine() apply static transformation. Details: https://books.ropensci.org/drake/static.html dynamic call map(), cross(), group() apply dynamic transformation. Details: https://books.ropensci.org/drake/dynamic.html ... Optional columns plan given target. See Columns section help file selection special columns drake understands.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customize a target in drake_plan().\n — target","text":"one-row workflow plan data frame named arguments columns.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Customize a target in drake_plan().\n — target","text":"target() must called inside drake_plan(). invalid otherwise.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"columns","dir":"Reference","previous_headings":"","what":"Columns","title":"Customize a target in drake_plan().\n — target","text":"drake_plan() creates special data frame. minimum, data frame must columns target command target names R code chunks build , respectively. can add custom columns , either target() (e.g. drake_plan(y = target(f(x), transform = map(c(1, 2)), format = \"fst\"))) appending columns post-hoc (e.g. plan$col <- vals). custom columns special. optional, drake looks various points workflow. transform: call map(), split(), cross(), combine() create manipulate large collections targets. Details: (https://books.ropensci.org/drake/plans.html#large-plans). # nolint format: set storage format save big targets efficiently. See \"Formats\" section help file details. trigger: rule decide whether target needs run. recommended define one target(). Details: https://books.ropensci.org/drake/triggers.html. hpc: logical values (TRUE/FALSE/NA) whether send target parallel workers. Visit https://books.ropensci.org/drake/hpc.html#selectivity learn . resources: target-specific lists resources computing cluster. See https://books.ropensci.org/drake/hpc.html#advanced-options details. caching: overrides caching argument make() target individually. Possible values: \"main\": tell main process store target cache. \"worker\": tell HPC worker store target cache. NA: default caching argument make(). elapsed cpu: number seconds wait target build timing (elapsed elapsed time cpu CPU time). retries: number times retry building target event error. seed: optional pseudo-random number generator (RNG) seed target. drake usually comes unique reproducible target-specific seeds using global seed (seed argument make() drake_config()) target names, can overwrite automatic seeds. NA entries default back drake's automatic seeds. max_expand: dynamic branching . max_expand argument make(), target--target basis. Limits number sub-targets created given target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"Customize a target in drake_plan().\n — target","text":"drake_plan() understands special keyword functions commands. exception target(), one proper function help file. target(): give target just command. Using target(), can apply transformation (examples: https://books.ropensci.org/drake/plans.html#large-plans), # nolint supply trigger (https://books.ropensci.org/drake/triggers.html), # nolint set number custom columns. file_in(): declare input file dependency. file_out(): declare output file produced target built. knitr_in(): declare knitr file dependency R Markdown (*.Rmd) R LaTeX (*.Rnw) file. ignore(): force drake entirely ignore piece code: track changes analyze dependencies. no_deps(): tell drake track dependencies piece code. drake still tracks code changes. id_chr(): Get name current target. drake_envir(): get environment drake builds targets. Intended advanced custom memory management.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"formats","dir":"Reference","previous_headings":"","what":"Formats","title":"Customize a target in drake_plan().\n — target","text":"Specialized target formats increase efficiency flexibility. allow save specialized objects like keras models, others increase speed conserving storage memory. can declare target-specific formats plan (e.g. drake_plan(x = target(big_data_frame, format = \"fst\"))) supply global default format targets make(). Either way, formats specialized installation requirements (e.g. R packages) installed drake default. need install separately . Available formats: \"file\": Dynamic files. use format, simply create local files directories return character vector paths target's value. , drake watch changes files subsequent calls make(). flexible alternative file_in() file_out(), compatible dynamic branching. See https://github.com/ropensci/drake/pull/1178 example. \"fst\": save big data frames fast. Requires fst package. Note: format strips non-data-frame attributes \"fst_tbl\": Like \"fst\", tibble objects. Requires fst tibble packages. Strips away non-data-frame non-tibble attributes. \"fst_dt\": Like \"fst\" format, data.table objects. Requires fst data.table packages. Strips away non-data-frame non-data-table attributes. \"diskframe\": Stores disk.frame objects, potentially larger memory. Requires fst disk.frame packages. Coerces objects disk.frames. Note: disk.frame objects get moved drake cache (subfolder .drake/ workflows). ensure data transfer fast, best save disk.frame objects physical storage drive drake cache, .disk.frame(your_dataset, outdir = drake_tempfile()). \"keras\": save Keras models HDF5 files. Requires keras package. \"qs\": save R object can properly serialized qs package. Requires qs package. Uses qsave() qread(). Uses default settings qs version 0.20.2. \"rds\": save R object can properly serialized. Requires R version >= 3.5.0 due ALTREP. Note: \"rds\" format uses gzip compression, slow. \"qs\" superior format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customize a target in drake_plan().\n — target","text":"","code":"# Use target() to create your own custom columns in a drake plan. # See ?triggers for more on triggers. drake_plan(   website_data = target(     download_data(\"www.your_url.com\"),     trigger = \"always\",     custom_column = 5   ),   analysis = analyze(website_data) ) #> # A tibble: 2 × 4 #>   target       command                           trigger       custom_column #>   <chr>        <expr_lst>                        <expr_lst>            <dbl> #> 1 website_data download_data(\"www.your_url.com\") \"always\"                  5 #> 2 analysis     analyze(website_data)             NA_character_            NA models <- c(\"glm\", \"hierarchical\") plan <- drake_plan(   data = target(     get_data(x),     transform = map(x = c(\"simulated\", \"survey\"))   ),   analysis = target(     analyze_data(data, model),     transform = cross(data, model = !!models, .id = c(x, model))   ),   summary = target(     summarize_analysis(analysis),     transform = map(analysis, .id = c(x, model))   ),   results = target(     bind_rows(summary),     transform = combine(summary, .by = data)   ) ) plan #> # A tibble: 12 × 2 #>    target                          command                                       #>    <chr>                           <expr_lst>                                    #>  1 analysis_simulated_glm          analyze_data(data_simulated, \"glm\")         … #>  2 analysis_simulated_hierarchical analyze_data(data_simulated, \"hierarchical\")… #>  3 analysis_survey_glm             analyze_data(data_survey, \"glm\")            … #>  4 analysis_survey_hierarchical    analyze_data(data_survey, \"hierarchical\")   … #>  5 data_simulated                  get_data(\"simulated\")                       … #>  6 data_survey                     get_data(\"survey\")                          … #>  7 results_data_simulated          bind_rows(summary_simulated_glm, summary_sim… #>  8 results_data_survey             bind_rows(summary_survey_glm, summary_survey… #>  9 summary_simulated_glm           summarize_analysis(analysis_simulated_glm)  … #> 10 summary_simulated_hierarchical  summarize_analysis(analysis_simulated_hierar… #> 11 summary_survey_glm              summarize_analysis(analysis_survey_glm)     … #> 12 summary_survey_hierarchical     summarize_analysis(analysis_survey_hierarchi… if (requireNamespace(\"styler\", quietly = TRUE)) {   print(drake_plan_source(plan)) } #> drake_plan( #>   analysis_simulated_glm = analyze_data(data_simulated, \"glm\"), #>   analysis_simulated_hierarchical = analyze_data(data_simulated, \"hierarchical\"), #>   analysis_survey_glm = analyze_data(data_survey, \"glm\"), #>   analysis_survey_hierarchical = analyze_data(data_survey, \"hierarchical\"), #>   data_simulated = get_data(\"simulated\"), #>   data_survey = get_data(\"survey\"), #>   results_data_simulated = bind_rows(summary_simulated_glm, summary_simulated_hierarchical), #>   results_data_survey = bind_rows(summary_survey_glm, summary_survey_hierarchical), #>   summary_simulated_glm = summarize_analysis(analysis_simulated_glm), #>   summary_simulated_hierarchical = summarize_analysis(analysis_simulated_hierarchical), #>   summary_survey_glm = summarize_analysis(analysis_survey_glm), #>   summary_survey_hierarchical = summarize_analysis(analysis_survey_hierarchical) #> )"},{"path":"https://docs.ropensci.org/drake/reference/target_namespaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Storr namespaces for targets\n — target_namespaces","title":"Storr namespaces for targets\n — target_namespaces","text":"Deprecated 2019-01-13.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target_namespaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Storr namespaces for targets\n — target_namespaces","text":"","code":"target_namespaces(default = storr::storr_environment()$default_namespace)"},{"path":"https://docs.ropensci.org/drake/reference/target_namespaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storr namespaces for targets\n — target_namespaces","text":"default Name default storr namespace.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target_namespaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Storr namespaces for targets\n — target_namespaces","text":"character vector storr namespaces store target-level information.","code":""},{"path":"https://docs.ropensci.org/drake/reference/target_namespaces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Storr namespaces for targets\n — target_namespaces","text":"Ordinary users need worry function. just another window drake's internals.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a workflow graph as text in your terminal window.\n — text_drake_graph","title":"Show a workflow graph as text in your terminal window.\n — text_drake_graph","text":"low-tech version vis_drake_graph() friends. designed access usual graphics devices viewing visuals interactive R session: example, logged remote machine SSH access X Window support.","code":""},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a workflow graph as text in your terminal window.\n — text_drake_graph","text":"","code":"text_drake_graph(   ...,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   targets_only = FALSE,   make_imports = TRUE,   from_scratch = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   nchar = 1L,   print = TRUE,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a workflow graph as text in your terminal window.\n — text_drake_graph","text":"... Arguments make(), plan targets. Optional collection target/import names. nonempty, graph restrict neighborhood . Control neighborhood mode order. mode direction branch graph create neighborhood around . Use \"\" go upstream, \"\" go downstream, \"\" go ways disregard edge direction altogether. order far branch create neighborhood around . Defaults far possible. target neighborhood, custom file_out() files show_output_files TRUE. means actual graph order may slightly greater might expect, ensures consistency show_output_files = TRUE show_output_files = FALSE. subset Optional character vector. Subset targets/imports display graph. Applied , mode, order. advised: edges kept adjacent nodes subset. select intermediate nodes, edges drop graph. targets_only Logical, whether skip imports include targets workflow plan. make_imports Logical, whether make imports first. Set FALSE increase speed risk using obsolete information. from_scratch Logical, whether assume targets made scratch next make(). Makes targets outdated, keeps information build progress previous make()s. group Optional character scalar, name column used group nodes columns. columns names original drake plan choices. choices (\"status\") column names nodes . group nodes clusters graph, must also supply clusters argument. clusters Optional character vector values cluster . values must elements column nodes data frame specify group argument drake_graph_info(). show_output_files Logical, whether include file_out() files graph. nchar node, maximum number characters node label show. Can 0, case node colored box instead node label. Caution: nchar > 0 mess layout. print Logical. TRUE, graph print console via message(). FALSE, nothing printed. However, still visualization text_drake_graph() render_text_drake_graph() still invisibly return character string can print message(). config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a workflow graph as text in your terminal window.\n — text_drake_graph","text":"visNetwork graph.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a workflow graph as text in your terminal window.\n — text_drake_graph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # Plot the network graph representation of the workflow. pkg <- requireNamespace(\"txtplot\", quietly = TRUE) &&   requireNamespace(\"visNetwork\", quietly = TRUE) if (pkg) { text_drake_graph(my_plan) make(my_plan) # Run the project, build the targets. text_drake_graph(my_plan) # The black nodes from before are now green. } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — text_drake_graph_impl","title":"Internal function with a drake_config() argument — text_drake_graph_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — text_drake_graph_impl","text":"","code":"text_drake_graph_impl(   config,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   targets_only = FALSE,   make_imports = TRUE,   from_scratch = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   nchar = 1L,   print = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/text_drake_graph_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — text_drake_graph_impl","text":"config drake_config() object. make_imports Logical, whether make imports first. Set FALSE save time risk obsolete output.","code":""},{"path":"https://docs.ropensci.org/drake/reference/this_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cache at the exact file path specified.\n — this_cache","title":"Get the cache at the exact file path specified.\n — this_cache","text":"function apply -memory caches storr_environment().","code":""},{"path":"https://docs.ropensci.org/drake/reference/this_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cache at the exact file path specified.\n — this_cache","text":"","code":"this_cache(   path = NULL,   force = FALSE,   verbose = 1L,   fetch_cache = NULL,   console_log_file = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/this_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cache at the exact file path specified.\n — this_cache","text":"path File path cache. force Deprecated. verbose Deprecated 2019-09-11. fetch_cache Deprecated. console_log_file Deprecated favor log_make.","code":""},{"path":"https://docs.ropensci.org/drake/reference/this_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cache at the exact file path specified.\n — this_cache","text":"drake/storr cache specified path, exists.","code":""},{"path":"https://docs.ropensci.org/drake/reference/tracked.html","id":null,"dir":"Reference","previous_headings":"","what":"List the targets and imports that are reproducibly tracked.\n — tracked","title":"List the targets and imports that are reproducibly tracked.\n — tracked","text":"List spec project's dependency network.","code":""},{"path":"https://docs.ropensci.org/drake/reference/tracked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the targets and imports that are reproducibly tracked.\n — tracked","text":"","code":"tracked(config)"},{"path":"https://docs.ropensci.org/drake/reference/tracked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the targets and imports that are reproducibly tracked.\n — tracked","text":"config output list drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/reference/tracked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the targets and imports that are reproducibly tracked.\n — tracked","text":"character vector names reproducibly-tracked targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/tracked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the targets and imports that are reproducibly tracked.\n — tracked","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Load the canonical example for drake. # List all the targets/imports that are reproducibly tracked. config <- drake_config(my_plan) tracked(config) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/transform_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a plan\n — transform_plan","title":"Transform a plan\n — transform_plan","text":"Evaluate map(), cross(), split() combine() operations transform column drake plan.","code":""},{"path":"https://docs.ropensci.org/drake/reference/transform_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a plan\n — transform_plan","text":"","code":"transform_plan(   plan,   envir = parent.frame(),   trace = FALSE,   max_expand = NULL,   tidy_eval = TRUE )"},{"path":"https://docs.ropensci.org/drake/reference/transform_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a plan\n — transform_plan","text":"plan drake plan transform column envir Environment tidy evaluation. trace Logical, whether add columns show happens target transformations. max_expand Positive integer, optional. max_expand maximum number targets generate map(), split(), cross() transform. Useful massive plan want test visualize strategic subset targets scaling . Note: max_expand argument drake_plan() transform_plan() static branching . dynamic branching max_expand argument make() drake_config(). tidy_eval Logical, whether use tidy evaluation (e.g. unquoting/!!) resolving commands. Tidy evaluation transformations always turned regardless value supply argument.","code":""},{"path":"https://docs.ropensci.org/drake/reference/transform_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform a plan\n — transform_plan","text":"https://books.ropensci.org/drake/plans.html#large-plans # nolint","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/transform_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a plan\n — transform_plan","text":"","code":"plan1 <- drake_plan(   y = target(     f(x),     transform = map(x = c(1, 2))   ),   transform = FALSE ) plan2 <- drake_plan(   z = target(     g(y),     transform = map(y, .id = x)   ),   transform = FALSE ) plan <- bind_plans(plan1, plan2) transform_plan(plan) #> # A tibble: 4 × 2 #>   target command    #>   <chr>  <expr_lst> #> 1 y_1    f(1)       #> 2 y_2    f(2)       #> 3 z_1    g(y_1)     #> 4 z_2    g(y_2)     models <- c(\"glm\", \"hierarchical\") plan <- drake_plan(   data = target(     get_data(x),     transform = map(x = c(\"simulated\", \"survey\"))   ),   analysis = target(     analyze_data(data, model),     transform = cross(data, model = !!models, .id = c(x, model))   ),   summary = target(     summarize_analysis(analysis),     transform = map(analysis, .id = c(x, model))   ),   results = target(     bind_rows(summary),     transform = combine(summary, .by = data)   ) ) plan #> # A tibble: 12 × 2 #>    target                          command                                       #>    <chr>                           <expr_lst>                                    #>  1 analysis_simulated_glm          analyze_data(data_simulated, \"glm\")         … #>  2 analysis_simulated_hierarchical analyze_data(data_simulated, \"hierarchical\")… #>  3 analysis_survey_glm             analyze_data(data_survey, \"glm\")            … #>  4 analysis_survey_hierarchical    analyze_data(data_survey, \"hierarchical\")   … #>  5 data_simulated                  get_data(\"simulated\")                       … #>  6 data_survey                     get_data(\"survey\")                          … #>  7 results_data_simulated          bind_rows(summary_simulated_glm, summary_sim… #>  8 results_data_survey             bind_rows(summary_survey_glm, summary_survey… #>  9 summary_simulated_glm           summarize_analysis(analysis_simulated_glm)  … #> 10 summary_simulated_hierarchical  summarize_analysis(analysis_simulated_hierar… #> 11 summary_survey_glm              summarize_analysis(analysis_survey_glm)     … #> 12 summary_survey_hierarchical     summarize_analysis(analysis_survey_hierarchi… if (requireNamespace(\"styler\", quietly = TRUE)) {   print(drake_plan_source(plan)) } #> drake_plan( #>   analysis_simulated_glm = analyze_data(data_simulated, \"glm\"), #>   analysis_simulated_hierarchical = analyze_data(data_simulated, \"hierarchical\"), #>   analysis_survey_glm = analyze_data(data_survey, \"glm\"), #>   analysis_survey_hierarchical = analyze_data(data_survey, \"hierarchical\"), #>   data_simulated = get_data(\"simulated\"), #>   data_survey = get_data(\"survey\"), #>   results_data_simulated = bind_rows(summary_simulated_glm, summary_simulated_hierarchical), #>   results_data_survey = bind_rows(summary_survey_glm, summary_survey_hierarchical), #>   summary_simulated_glm = summarize_analysis(analysis_simulated_glm), #>   summary_simulated_hierarchical = summarize_analysis(analysis_simulated_hierarchical), #>   summary_survey_glm = summarize_analysis(analysis_survey_glm), #>   summary_survey_hierarchical = summarize_analysis(analysis_survey_hierarchical) #> ) # Tags: drake_plan(   x = target(     command,     transform = map(y = c(1, 2), .tag_in = from, .tag_out = c(to, out))   ),   trace = TRUE ) #> # A tibble: 2 × 7 #>   target command    y     x     from  to    out   #>   <chr>  <expr_lst> <chr> <chr> <chr> <chr> <chr> #> 1 x_1    command    1     x_1   x     x_1   x_1   #> 2 x_2    command    2     x_2   x     x_2   x_2   plan <- drake_plan(   survey = target(     survey_data(x),     transform = map(x = c(1, 2), .tag_in = source, .tag_out = dataset)   ),   download = target(     download_data(),     transform = map(y = c(5, 6), .tag_in = source, .tag_out = dataset)   ),   analysis = target(     analyze(dataset),     transform = map(dataset)   ),   results = target(     bind_rows(analysis),     transform = combine(analysis, .by = source)   ) ) plan #> # A tibble: 10 × 2 #>    target              command                                             #>    <chr>               <expr_lst>                                          #>  1 analysis_survey_1   analyze(survey_1)                                   #>  2 analysis_survey_2   analyze(survey_2)                                   #>  3 analysis_download_5 analyze(download_5)                                 #>  4 analysis_download_6 analyze(download_6)                                 #>  5 download_5          download_data()                                     #>  6 download_6          download_data()                                     #>  7 results_download    bind_rows(analysis_download_5, analysis_download_6) #>  8 results_survey      bind_rows(analysis_survey_1, analysis_survey_2)     #>  9 survey_1            survey_data(1)                                      #> 10 survey_2            survey_data(2)                                      if (requireNamespace(\"styler\", quietly = TRUE)) {   print(drake_plan_source(plan)) } #> drake_plan( #>   analysis_survey_1 = analyze(survey_1), #>   analysis_survey_2 = analyze(survey_2), #>   analysis_download_5 = analyze(download_5), #>   analysis_download_6 = analyze(download_6), #>   download_5 = download_data(), #>   download_6 = download_data(), #>   results_download = bind_rows(analysis_download_5, analysis_download_6), #>   results_survey = bind_rows(analysis_survey_1, analysis_survey_2), #>   survey_1 = survey_data(1), #>   survey_2 = survey_data(2) #> )"},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformations in drake_plan().  — transformations","title":"Transformations in drake_plan().  — transformations","text":"drake_plan(), can define whole batches targets transformations map(), split(), cross(), combine().","code":""},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformations in drake_plan().  — transformations","text":"... Grouping variables. New grouping variables must supplied names values, existing grouping variables can given symbols without values assigned. dynamic branching, entries ... must unnamed symbols values supplied, must names targets. .data data frame new grouping variables grouping variable names column names values elements. .names Literal character vector names targets. Must length targets generated. .id Symbol vector symbols naming grouping variables incorporate target names. Useful creating short target names. Set .id = FALSE use integer indices target name suffixes. .tag_in symbol vector symbols. Tags assign targets grouping variables. Use .tag_in assign untransformed targets grouping variables. .tag_out Just like .tag_in, except .tag_out assigns transformed targets grouping variables. slice Number slices split() partitions data. margin margin take slices split(). meaning MARGIN argument apply(). drop Logical, whether drop dimension length 1. meaning mtcars[, 1L, drop = TRUE] versus mtcars[, 1L, drop = TRUE]. .Symbol vector symbols grouping variables. combine() aggregates/groups targets grouping variables .. dynamic branching, .can take one variable time, variable must vector. Ideally, take little space memory. .trace Symbol vector symbols dynamic trace. dynamic trace allows keep track values dynamic dependencies associated individual sub-targets. combine(), .trace must either empty variable given .. See get_trace() read_trace() examples details.","code":""},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transformations in drake_plan().  — transformations","text":"details, see https://books.ropensci.org/drake/plans.html#large-plans.","code":""},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":"transformations","dir":"Reference","previous_headings":"","what":"Transformations","title":"Transformations in drake_plan().  — transformations","text":"drake special syntax generating large plans. code look something like drake_plan(y = target(f(x), transform = map(x = c(1, 2, 3))) can read interface https://books.ropensci.org/drake/plans.html#large-plans. # nolint","code":""},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":"static-branching","dir":"Reference","previous_headings":"","what":"Static branching","title":"Transformations in drake_plan().  — transformations","text":"static branching, define batches targets based information know advance. Overall usage looks like drake_plan(<x> = target(<...>, transform = <call>), <x> name target group targets. <...> optional arguments target(). <call> call one transformation functions. Transformation function usage: map(..., .data, .names, .id, .tag_in, .tag_out) split(..., slices, margin = 1L, drop = FALSE, .names, .tag_in, .tag_out) # nolint cross(..., .data, .names, .id, .tag_in, .tag_out) combine(..., ., .names, .id, .tag_in, .tag_out)","code":""},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":"dynamic-branching","dir":"Reference","previous_headings":"","what":"Dynamic branching","title":"Transformations in drake_plan().  — transformations","text":"map(..., .trace) cross(..., .trace) group(..., ., .trace) map() cross() create dynamic sub-targets variables supplied dots. static branching, variables supplied map() must equal length. group(f(data), .= x) makes new dynamic sub-targets data. , data can either static dynamic. data dynamic, group() aggregates existing sub-targets. data static, group() splits data multiple subsets based groupings .. Differences static branching: ... must contain unnamed symbols values supplied, must names targets. Arguments .id, .tag_in, .tag_out longer apply.","code":""},{"path":"https://docs.ropensci.org/drake/reference/transformations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transformations in drake_plan().  — transformations","text":"","code":"# Static branching models <- c(\"glm\", \"hierarchical\") plan <- drake_plan(   data = target(     get_data(x),     transform = map(x = c(\"simulated\", \"survey\"))   ),   analysis = target(     analyze_data(data, model),     transform = cross(data, model = !!models, .id = c(x, model))   ),   summary = target(     summarize_analysis(analysis),     transform = map(analysis, .id = c(x, model))   ),   results = target(     bind_rows(summary),     transform = combine(summary, .by = data)   ) ) plan #> # A tibble: 12 × 2 #>    target                          command                                       #>    <chr>                           <expr_lst>                                    #>  1 analysis_simulated_glm          analyze_data(data_simulated, \"glm\")         … #>  2 analysis_simulated_hierarchical analyze_data(data_simulated, \"hierarchical\")… #>  3 analysis_survey_glm             analyze_data(data_survey, \"glm\")            … #>  4 analysis_survey_hierarchical    analyze_data(data_survey, \"hierarchical\")   … #>  5 data_simulated                  get_data(\"simulated\")                       … #>  6 data_survey                     get_data(\"survey\")                          … #>  7 results_data_simulated          bind_rows(summary_simulated_glm, summary_sim… #>  8 results_data_survey             bind_rows(summary_survey_glm, summary_survey… #>  9 summary_simulated_glm           summarize_analysis(analysis_simulated_glm)  … #> 10 summary_simulated_hierarchical  summarize_analysis(analysis_simulated_hierar… #> 11 summary_survey_glm              summarize_analysis(analysis_survey_glm)     … #> 12 summary_survey_hierarchical     summarize_analysis(analysis_survey_hierarchi… if (requireNamespace(\"styler\")) {   print(drake_plan_source(plan)) } #> drake_plan( #>   analysis_simulated_glm = analyze_data(data_simulated, \"glm\"), #>   analysis_simulated_hierarchical = analyze_data(data_simulated, \"hierarchical\"), #>   analysis_survey_glm = analyze_data(data_survey, \"glm\"), #>   analysis_survey_hierarchical = analyze_data(data_survey, \"hierarchical\"), #>   data_simulated = get_data(\"simulated\"), #>   data_survey = get_data(\"survey\"), #>   results_data_simulated = bind_rows(summary_simulated_glm, summary_simulated_hierarchical), #>   results_data_survey = bind_rows(summary_survey_glm, summary_survey_hierarchical), #>   summary_simulated_glm = summarize_analysis(analysis_simulated_glm), #>   summary_simulated_hierarchical = summarize_analysis(analysis_simulated_hierarchical), #>   summary_survey_glm = summarize_analysis(analysis_survey_glm), #>   summary_survey_hierarchical = summarize_analysis(analysis_survey_hierarchical) #> ) # Static splitting plan <- drake_plan(   analysis = target(     analyze(data),     transform = split(data, slices = 3L, margin = 1L, drop = FALSE)   ) ) print(plan) #> # A tibble: 3 × 2 #>   target     command                                                             #>   <chr>      <expr_lst>                                                          #> 1 analysis_1 analyze(drake_slice(data = data, slices = 3L, index = 1, margin = … #> 2 analysis_2 analyze(drake_slice(data = data, slices = 3L, index = 2, margin = … #> 3 analysis_3 analyze(drake_slice(data = data, slices = 3L, index = 3, margin = … if (requireNamespace(\"styler\", quietly = TRUE)) {   print(drake_plan_source(plan)) } #> drake_plan( #>   analysis_1 = analyze(drake_slice( #>     data = data, slices = 3L, index = 1, margin = 1L, #>     drop = FALSE #>   )), #>   analysis_2 = analyze(drake_slice( #>     data = data, slices = 3L, index = 2, margin = 1L, #>     drop = FALSE #>   )), #>   analysis_3 = analyze(drake_slice( #>     data = data, slices = 3L, index = 3, margin = 1L, #>     drop = FALSE #>   )) #> ) # Static tags: drake_plan(   x = target(     command,     transform = map(y = c(1, 2), .tag_in = from, .tag_out = c(to, out))   ),   trace = TRUE ) #> # A tibble: 2 × 7 #>   target command    y     x     from  to    out   #>   <chr>  <expr_lst> <chr> <chr> <chr> <chr> <chr> #> 1 x_1    command    1     x_1   x     x_1   x_1   #> 2 x_2    command    2     x_2   x     x_2   x_2   plan <- drake_plan(   survey = target(     survey_data(x),     transform = map(x = c(1, 2), .tag_in = source, .tag_out = dataset)   ),   download = target(     download_data(),     transform = map(y = c(5, 6), .tag_in = source, .tag_out = dataset)   ),   analysis = target(     analyze(dataset),     transform = map(dataset)   ),   results = target(     bind_rows(analysis),     transform = combine(analysis, .by = source)   ) ) plan #> # A tibble: 10 × 2 #>    target              command                                             #>    <chr>               <expr_lst>                                          #>  1 analysis_survey_1   analyze(survey_1)                                   #>  2 analysis_survey_2   analyze(survey_2)                                   #>  3 analysis_download_5 analyze(download_5)                                 #>  4 analysis_download_6 analyze(download_6)                                 #>  5 download_5          download_data()                                     #>  6 download_6          download_data()                                     #>  7 results_download    bind_rows(analysis_download_5, analysis_download_6) #>  8 results_survey      bind_rows(analysis_survey_1, analysis_survey_2)     #>  9 survey_1            survey_data(1)                                      #> 10 survey_2            survey_data(2)                                      if (requireNamespace(\"styler\", quietly = TRUE)) {   print(drake_plan_source(plan)) } #> drake_plan( #>   analysis_survey_1 = analyze(survey_1), #>   analysis_survey_2 = analyze(survey_2), #>   analysis_download_5 = analyze(download_5), #>   analysis_download_6 = analyze(download_6), #>   download_5 = download_data(), #>   download_6 = download_data(), #>   results_download = bind_rows(analysis_download_5, analysis_download_6), #>   results_survey = bind_rows(analysis_survey_1, analysis_survey_2), #>   survey_1 = survey_data(1), #>   survey_2 = survey_data(2) #> )"},{"path":"https://docs.ropensci.org/drake/reference/trigger.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize the decision rules for rebuilding targets\n — trigger","title":"Customize the decision rules for rebuilding targets\n — trigger","text":"Use function inside target's command drake_plan() trigger argument make() drake_config(). details, see chapter triggers user manual: https://books.ropensci.org/drake/triggers.html","code":""},{"path":"https://docs.ropensci.org/drake/reference/trigger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize the decision rules for rebuilding targets\n — trigger","text":"","code":"trigger(   command = TRUE,   depend = TRUE,   file = TRUE,   seed = TRUE,   format = TRUE,   condition = FALSE,   change = NULL,   mode = c(\"whitelist\", \"blacklist\", \"condition\") )"},{"path":"https://docs.ropensci.org/drake/reference/trigger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize the decision rules for rebuilding targets\n — trigger","text":"command Logical, whether rebuild target drake_plan() command changes. depend Logical, whether rebuild non-file dependency changes. file Logical, whether rebuild target file_in()/file_out()/knitr_in() file changes. Also applies external data tracked target(format = \"file\"). seed Logical, whether rebuild target seed changes. makes difference set custom seed column drake_plan() point workflow. format Logical, whether rebuild target choice specialized data format changes: example, use target(format = \"qs\") one instance target(format = \"fst\") next. See https://books.ropensci.org/drake/plans.html#special-data-formats--targets # nolint details formats. condition R code (expression language object) returns logical. target rebuild code evaluates TRUE. change R code (expression language object) returns value. target rebuild value different last time already cached. mode character scalar equal \"whitelist\" (default) \"blacklist\" \"condition\". mode argument, can choose condition trigger factors decision build skip target. options. \"whitelist\" (default): rebuild target whenever condition evaluates TRUE. Otherwise, defer triggers. behavior decision rule described \"Details\" section help file. \"blacklist\": skip target whenever condition evaluates FALSE. Otherwise, defer triggers. \"condition\": , condition trigger decider, ignore triggers. rebuild target whenever condition evaluates TRUE skip whenever condition evaluates FALSE.","code":""},{"path":"https://docs.ropensci.org/drake/reference/trigger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customize the decision rules for rebuilding targets\n — trigger","text":"list trigger specification details drake processes internally comes time decide whether build target.","code":""},{"path":"https://docs.ropensci.org/drake/reference/trigger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Customize the decision rules for rebuilding targets\n — trigger","text":"target always builds built . Triggers allow customize conditions pre-existing target rebuilds. default, target rebuild : command, depend, file TRUE, condition evaluates TRUE, change evaluates value different last time. steps correspond \"whitelist\" decision rule. can select decision rules mode argument described help file. another note, may slight efficiency loss set complex triggers change /condition drake needs load required dependencies memory evaluating triggers.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/trigger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customize the decision rules for rebuilding targets\n — trigger","text":"","code":"# A trigger is just a set of decision rules # to decide whether to build a target. trigger() #> drake_triggers #>  $ command  : logi TRUE #>  $ depend   : logi TRUE #>  $ file     : logi TRUE #>  $ seed     : logi TRUE #>  $ format   : logi TRUE #>  $ condition: logi FALSE #>  $ change   : NULL #>  $ mode     : chr \"whitelist\" # This trigger will build a target on Tuesdays # and when the value of an online dataset changes. trigger(condition = today() == \"Tuesday\", change = get_online_dataset()) #> drake_triggers #>  $ command  : logi TRUE #>  $ depend   : logi TRUE #>  $ file     : logi TRUE #>  $ seed     : logi TRUE #>  $ format   : logi TRUE #>  $ condition: language today() == \"Tuesday\" #>  $ change   : language get_online_dataset() #>  $ mode     : chr \"whitelist\" if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # You can use a global trigger argument: # for example, to always run everything. make(my_plan, trigger = trigger(condition = TRUE)) make(my_plan, trigger = trigger(condition = TRUE)) # You can also define specific triggers for each target. plan <- drake_plan(   x = sample.int(15),   y = target(     command = x + 1,     trigger = trigger(depend = FALSE)   ) ) # Now, when x changes, y will not. make(plan) make(plan) plan$command[1] <- \"sample.int(16)\" # change x make(plan) } }) }"},{"path":"https://docs.ropensci.org/drake/reference/triggers.html","id":null,"dir":"Reference","previous_headings":"","what":"List the old drake triggers.\n — triggers","title":"List the old drake triggers.\n — triggers","text":"Triggers target-level rules tell make() know target outdated date.","code":""},{"path":"https://docs.ropensci.org/drake/reference/triggers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the old drake triggers.\n — triggers","text":"","code":"triggers()"},{"path":"https://docs.ropensci.org/drake/reference/triggers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the old drake triggers.\n — triggers","text":"character vector names old triggers.","code":""},{"path":"https://docs.ropensci.org/drake/reference/triggers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List the old drake triggers.\n — triggers","text":"Deprecated 2018-07-22.","code":""},{"path":"https://docs.ropensci.org/drake/reference/type_sum.expr_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Type summary printing\n — type_sum.expr_list","title":"Type summary printing\n — type_sum.expr_list","text":"Ensures <expr> printed top drake plan column list language objects (e.g. plan$command).","code":""},{"path":"https://docs.ropensci.org/drake/reference/type_sum.expr_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type summary printing\n — type_sum.expr_list","text":"","code":"type_sum.expr_list(x)"},{"path":"https://docs.ropensci.org/drake/reference/type_sum.expr_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type summary printing\n — type_sum.expr_list","text":"x List language objects.","code":""},{"path":"https://docs.ropensci.org/drake/reference/use_drake.html","id":null,"dir":"Reference","previous_headings":"","what":"Use drake in a project\n — use_drake","title":"Use drake in a project\n — use_drake","text":"Add top-level R script files use drake data analysis project. details, read https://books.ropensci.org/drake/projects.html","code":""},{"path":"https://docs.ropensci.org/drake/reference/use_drake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use drake in a project\n — use_drake","text":"","code":"use_drake(open = interactive())"},{"path":"https://docs.ropensci.org/drake/reference/use_drake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use drake in a project\n — use_drake","text":"open Logical, whether open make.R editing.","code":""},{"path":"https://docs.ropensci.org/drake/reference/use_drake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use drake in a project\n — use_drake","text":"Files written: make.R: suggested main R script batch mode. _drake.R: configuration R script r_*() functions documented # nolint https://books.ropensci.org/drake/projects.html#safer-interactivity. # nolint Remarks: nothing magical name, make.R. can call whatever want. supporting scripts, R/packages.R, R/functions.R, R/plan.R, included. can find examples https://github.com/wlandau/drake-examples download examples drake_example() (e.g. drake_example(\"main\")).","code":""},{"path":"https://docs.ropensci.org/drake/reference/use_drake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use drake in a project\n — use_drake","text":"","code":"if (FALSE) { # use_drake(open = FALSE) # nolint }"},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","title":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","text":"good practice visualize dependency graph running targets.","code":""},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","text":"","code":"vis_drake_graph(   ...,   file = character(0),   selfcontained = FALSE,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   font_size = 20,   layout = NULL,   main = NULL,   direction = NULL,   hover = FALSE,   navigationButtons = TRUE,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   ncol_legend = 1,   full_legend = FALSE,   make_imports = TRUE,   from_scratch = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   collapse = TRUE,   on_select_col = NULL,   on_select = NULL,   level_separation = NULL,   config = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","text":"... Arguments make(), plan targets. file Name file save graph. NULL character(0), file saved graph rendered displayed within R. file ends .png, .jpg, .jpeg, .pdf extension, static image saved. case, webshot package PhantomJS required: install.packages(\"webshot\"); webshot::install_phantomjs(). file end .png, .jpg, .jpeg, .pdf extension, HTML file saved, can open interactive graph using web browser. selfcontained Logical, whether save file self-contained HTML file (external resources base64 encoded) file external resources placed adjacent directory. TRUE, pandoc required. selfcontained argument applies HTML files. words, file PNG, PDF, JPEG file, instance, point moot. build_times Character string logical. character, choices 1. \"build\": runtime command plus time take store target import. 2. \"command\": just runtime command. 3. \"none\": build times. logical, build_times selects whether show times `build_times(..., type = \"build\")`` use build times . See build_times() details. digits Number digits rounding build times targets_only Logical, whether skip imports include targets workflow plan. font_size Numeric, font size node labels graph layout Deprecated. main Character string, title graph. direction Deprecated. hover Logical, whether show text (file contents, commands, etc.) hover cursor node. navigationButtons Logical, whether add navigation buttons visNetwork::visInteraction(navigationButtons = TRUE) Optional collection target/import names. nonempty, graph restrict neighborhood . Control neighborhood mode order. mode direction branch graph create neighborhood around . Use \"\" go upstream, \"\" go downstream, \"\" go ways disregard edge direction altogether. order far branch create neighborhood around . Defaults far possible. target neighborhood, custom file_out() files show_output_files TRUE. means actual graph order may slightly greater might expect, ensures consistency show_output_files = TRUE show_output_files = FALSE. subset Optional character vector. Subset targets/imports display graph. Applied , mode, order. advised: edges kept adjacent nodes subset. select intermediate nodes, edges drop graph. ncol_legend Number columns legend nodes. remove legend entirely, set ncol_legend NULL 0. full_legend Logical. TRUE, node types printed legend. FALSE, node types used printed legend. make_imports Logical, whether make imports first. Set FALSE increase speed risk using obsolete information. from_scratch Logical, whether assume targets made scratch next make(). Makes targets outdated, keeps information build progress previous make()s. group Optional character scalar, name column used group nodes columns. columns names original drake plan choices. choices (\"status\") column names nodes . group nodes clusters graph, must also supply clusters argument. clusters Optional character vector values cluster . values must elements column nodes data frame specify group argument drake_graph_info(). show_output_files Logical, whether include file_out() files graph. collapse Logical, whether allow nodes collapse double click . Analogous visNetwork::visOptions(collapse = TRUE). on_select_col Optional string corresponding column name plan provide data on_select event. on_select defines node selection event handling. Either string valid JavaScript may passed visNetwork::visEvents(), one following: TRUE, NULL/FALSE. TRUE , enables default behavior opening link specified on_select_col given drake_graph_info(). NULL/FALSE disables behavior. level_separation Numeric, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider setting aspect ratio graph far 1. Defaults 150 visNetwork. config Deprecated.","code":""},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","text":"visNetwork graph.","code":""},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","text":"enhanced interactivity graph, see mandrake package.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an interactive visual network representation\nof your drake project.\n — vis_drake_graph","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { if (suppressWarnings(require(\"knitr\"))) { load_mtcars_example() # Get the code with drake_example(\"mtcars\"). # Plot the network graph representation of the workflow. if (requireNamespace(\"visNetwork\", quietly = TRUE)) { vis_drake_graph(my_plan) make(my_plan) # Run the project, build the targets. vis_drake_graph(my_plan) # The red nodes from before are now green. # Plot a subgraph of the workflow. vis_drake_graph(   my_plan,   from = c(\"small\", \"reg2\") ) } } }) }"},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function with a drake_config() argument — vis_drake_graph_impl","title":"Internal function with a drake_config() argument — vis_drake_graph_impl","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function with a drake_config() argument — vis_drake_graph_impl","text":"","code":"vis_drake_graph_impl(   config,   file = character(0),   selfcontained = FALSE,   build_times = \"build\",   digits = 3,   targets_only = FALSE,   font_size = 20,   layout = NULL,   main = NULL,   direction = NULL,   hover = FALSE,   navigationButtons = TRUE,   from = NULL,   mode = c(\"out\", \"in\", \"all\"),   order = NULL,   subset = NULL,   ncol_legend = 1,   full_legend = FALSE,   make_imports = TRUE,   from_scratch = FALSE,   group = NULL,   clusters = NULL,   show_output_files = TRUE,   collapse = TRUE,   on_select_col = NULL,   on_select = NULL,   level_separation = NULL )"},{"path":"https://docs.ropensci.org/drake/reference/vis_drake_graph_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function with a drake_config() argument — vis_drake_graph_impl","text":"config drake_config() object.","code":""},{"path":"https://docs.ropensci.org/drake/reference/walk_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Static code analysis — walk_code","title":"Static code analysis — walk_code","text":"Static code analysis.","code":""},{"path":"https://docs.ropensci.org/drake/reference/walk_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static code analysis — walk_code","text":"","code":"walk_code(expr, results, locals, restrict)"},{"path":"https://docs.ropensci.org/drake/reference/walk_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static code analysis — walk_code","text":"expr function expression. results drake_deps object. locals environment, hash table local variables. restrict environment, hash table whitelisting global symbols.","code":""},{"path":"https://docs.ropensci.org/drake/reference/which_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Which targets will clean() invalidate?\n — which_clean","title":"Which targets will clean() invalidate?\n — which_clean","text":"which_clean() safety check clean(). shows targets clean() invalidate (remove garbage_collection TRUE). helps avoid accidentally removing targets care .","code":""},{"path":"https://docs.ropensci.org/drake/reference/which_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which targets will clean() invalidate?\n — which_clean","text":"","code":"which_clean(   ...,   list = character(0),   path = NULL,   cache = drake::drake_cache(path = path) )"},{"path":"https://docs.ropensci.org/drake/reference/which_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which targets will clean() invalidate?\n — which_clean","text":"... Targets remove cache: names (symbols) character strings. tidyselect package installed, can also supply dplyr-style tidyselect commands starts_with(), ends_with(), one_of(). list Character vector naming targets removed cache. Similar list argument remove(). path Path drake cache (usually hidden .drake/ folder) NULL. cache drake cache. See new_cache(). supplied, path ignored.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/reference/which_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which targets will clean() invalidate?\n — which_clean","text":"","code":"if (FALSE) { isolate_example(\"Quarantine side effects.\", { plan <- drake_plan(x = 1, y = 2, z = 3) make(plan) cached() which_clean(x, y) # [1] \"x\" \"y\" clean(x, y)       # Invalidates targets x and y. cached()          # [1] \"z\" }) }"},{"path":"https://docs.ropensci.org/drake/reference/workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"workflow  — workflow","title":"workflow  — workflow","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"workflow  — workflow","text":"","code":"workflow(...)"},{"path":"https://docs.ropensci.org/drake/reference/workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"workflow  — workflow","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/reference/workplan.html","id":null,"dir":"Reference","previous_headings":"","what":"workplan  — workplan","title":"workplan  — workplan","text":"2019-02-15","code":""},{"path":"https://docs.ropensci.org/drake/reference/workplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"workplan  — workplan","text":"","code":"workplan(...)"},{"path":"https://docs.ropensci.org/drake/reference/workplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"workplan  — workplan","text":"... Arguments","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7139","dir":"Changelog","previous_headings":"","what":"Version 7.13.9","title":"Version 7.13.9","text":"Avoid .R().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7138","dir":"Changelog","previous_headings":"","what":"Version 7.13.8","title":"Version 7.13.8","text":"CRAN release: 2023-11-06 Fix CRAN note.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7137","dir":"Changelog","previous_headings":"","what":"Version 7.13.7","title":"Version 7.13.7","text":"Fix test CRAN.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7136","dir":"Changelog","previous_headings":"","what":"Version 7.13.6","title":"Version 7.13.6","text":"CRAN release: 2023-10-17 Migrate new interface clustermq 0.9.0 (@mschubert).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7135","dir":"Changelog","previous_headings":"","what":"Version 7.13.5","title":"Version 7.13.5","text":"CRAN release: 2023-03-24 Always pass character vector rm() remove().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7134","dir":"Changelog","previous_headings":"","what":"Version 7.13.4","title":"Version 7.13.4","text":"CRAN release: 2022-08-19 Fix HTML documentation files.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7133","dir":"Changelog","previous_headings":"","what":"Version 7.13.3","title":"Version 7.13.3","text":"CRAN release: 2021-09-21 Improve error messages static code analysis malformed code (#1371, @billdenney). Handle invalid language objects commands (#1372, @gorgitko). lock namespaces (#1373, @gorgitko). Compatibility rlang PR 1255.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7132","dir":"Changelog","previous_headings":"","what":"Version 7.13.2","title":"Version 7.13.2","text":"CRAN release: 2021-04-22 Update SLURM batchtools template file can brewed (#1359, @pat-s). Change start-message tip targets.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7131","dir":"Changelog","previous_headings":"","what":"Version 7.13.1","title":"Version 7.13.1","text":"CRAN release: 2021-02-03 Add files NOTICE inst/NOTICE explicitly credit code included open source projects. (Previously drake just comments source links various projects.)","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7130","dir":"Changelog","previous_headings":"","what":"Version 7.13.0","title":"Version 7.13.0","text":"CRAN release: 2021-01-04","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-13-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.13.0","text":"Avoid checking printed output test testing infrastructure. Use dsl_sym() instead .symbol() constructing commands combine() (#1340, @vkehayas).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-13-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.13.0","text":"Add new level_separation argument vis_drake_graph() render_drake_graph() control aspect ratio visNetwork graphs (#1303, @matthewstrasiotto, @matthiasgomolka, @robitalec).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7127","dir":"Changelog","previous_headings":"","what":"Version 7.12.7","title":"Version 7.12.7","text":"CRAN release: 2020-10-27","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-12-7","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.12.7","text":"Deprecate caching = \"master\" favor caching = \"main\". Improve error message valid plan supplied (#1334, @robitalec).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7126","dir":"Changelog","previous_headings":"","what":"Version 7.12.6","title":"Version 7.12.6","text":"CRAN release: 2020-10-10","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-12-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.12.6","text":"Fix defunct functions error message using namespace (#1310, @malcolmbarrett). Preserve names list elements .data DSL (#1323, @shirdekel). Use identical() compare file hashes (#1324, @shirdekel). Set seed = TRUE future::future(). Manually relay warnings parallelism = \"clustermq\" caching = \"worker\" (@richardbayes).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-12-6","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.12.6","text":"Make logs machine-readable sanitizing messages preventing race conditions (#1331, @Plebejer).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7125","dir":"Changelog","previous_headings":"","what":"Version 7.12.5","title":"Version 7.12.5","text":"CRAN release: 2020-08-26","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-12-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.12.5","text":"Sanitize empty symbols language columns (#1299, @odaniel1). Handle cases NROW() throws error (#1300, julian-tagell Stack Overflow). Prohibit dynamic branching non-branching dynamic files (#1302, @djbirke).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-12-5","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.12.5","text":"Transition updated lifecycle require badges man/figures. Improve error message empty dynamic grouping variables (#1308, @saadaslam). Expose log_worker argument clustermq::workers() make() drake_config() (#1305, @billdenney, @mschubert). Set .TRUE utils::type.convert() (#1309, @bbolker).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7124","dir":"Changelog","previous_headings":"","what":"Version 7.12.4","title":"Version 7.12.4","text":"CRAN release: 2020-06-29 Fix CRAN warning docs.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-12-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.12.3","text":"cached_planned() cached_unplanned() now work non-standard cache locations (#1268, @Plebejer). Set use_cache FALSE often (#1257, @Plebejer). Use namespaced function calls mtcars example instead loading packages. Replace iris dataset airquality dataset documentation, examples, tests (#1271). Assign functions created code_to_function() proper environment (#1275, @robitalec). Store tracebacks character vectors restrict contents error objects try prevent accidental storage large data environment (#1276, @billdenney). Strongly depend tidyselect (#1274, @dernst). Avoid txtq lockfiles (#1232, #1239, #1280, @danwwilson, @pydupont, @mattwarkentin).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-12-3","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.12.3","text":"Add new drake_script() function write _drake.R files r_make() (#1282).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-12-3","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.12.3","text":"Deprecate expose_imports() favor make(envir = getNamespace(\"yourPackage\") (#1286, @mvarewyck). Suppress message recommending r_make() getOption(\"drake_r_make_message\") FALSE (#1238, @januz). Improve appearance visNetwork graph using hierarchical layout visEdges(smooth = list(type = \"cubicBezier\", forceDirection = TRUE)) (#1289, @mstr3336).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7122","dir":"Changelog","previous_headings":"","what":"Version 7.12.2","title":"Version 7.12.2","text":"CRAN release: 2020-06-02","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-12-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.12.2","text":"Invalidate old sub-targets finalizing dynamic target (@richardbayes). Solves major reproducibility bug (#1260). Prevent splice_inner() dropping formal arguments shared c() (#1262, @bart1).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7121","dir":"Changelog","previous_headings":"","what":"Version 7.12.1","title":"Version 7.12.1","text":"CRAN release: 2020-05-14","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-12-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.12.1","text":"Repair subtarget_hashes.cross() crosses single grouping variable. Repair dynamic group() used specialized formats (#1236, @adamaltmejd). Enforce tidyselect >= 1.0.0.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-12-1","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.12.1","text":"Allow user-defined target names static branching .names argument (#1240, @maciejmotyka, @januz).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-12-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.12.1","text":"analyze dependencies calls drake_plan() (#1237, @januz). Error message locked cache gives paste-able error message Windows (#1243, @billdenney). Prevent stack traces accidentally storing large amounts data (#1253, @sclewis23).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7120","dir":"Changelog","previous_headings":"","what":"Version 7.12.0","title":"Version 7.12.0","text":"CRAN release: 2020-03-25","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.12.0","text":"Ensure --date sub-targets skipped even dynamic parent get chance finalize (#1209, #1211, @psadil, @kendonB). Restrict static transforms use upstream part plan (#1199, #1200, @bart1). Correctly match names values dynamic cross() sub-targets (#1204, @psadil). Expansion order , names correctly matched now. Stop trying remove file_out() files clean(), even garbage_collection TRUE (#521, @-Hull). Fix keep_going = TRUE formatted targets (#1206). Use correct variable names logger helper (progress_bar instead progress) drake works without progress package (#1208, @mbaccou). Avoid conflict formats upstream dynamic targets (#1210, @psadil). Always compute trigger metadata front recovery keys need . Deprecate remove hasty mode custom parallel backends (#1222). Compartmentalize fixed runtime parameters config$settings (#965).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-12-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.12.0","text":"Add new functions drake_done() drake_cancelled() (#1205).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"speedups-7-12-0","dir":"Changelog","previous_headings":"","what":"Speedups","title":"Version 7.12.0","text":"Avoid reading build times dynamic sub-targets drake_graph_info() (#1207).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-12-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.12.0","text":"Show empty progress bar just targets start build verbose 2 (#1203, @kendonB). Deprecate jobs argument clean(). Show informative error message empty dynamic grouping variables (#1212, @kendonB). Throw error messages users supply dynamic targets drake_build() drake_debug() (#1214, @kendonB). Log sub-target name index failing sub-target metadata sub-target parent (#1214, @kendonB). Shorten call stack error metadata. Deprecate remove custom schedulers (#1222). Deprecate hasty_build (#1222). Migrate constant runtime parameters config$settings (#965). Warn user file_in()/file_out()/knitr_in() files literal strings (#1229). Prohibit file_out() knitr_in() imported functions (#1229). Prohibit knitr_in() dynamic branching (#1229). Improve help file target(). Deprecate rename progress functions avoid potential name conflicts (progress() => drake_progress(), running() => drake_running(), failed() => drake_failed()) (#1205).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7110","dir":"Changelog","previous_headings":"","what":"Version 7.11.0","title":"Version 7.11.0","text":"CRAN release: 2020-03-01","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.11.0","text":"Sanitize internal S3 classes target storage (#1159, @rsangole). Bump digest version require 0.6.21 (#1166, @boshek) Actually store output file sizes metadata. Use depend trigger toggle invalidation dynamic-dependencies, including max_expand argument make(). Repair session_info argument parsing (reduce calls utils::sessionInfo() tests). Ensure compatibility tibble 3.0.0.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-11-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.11.0","text":"Allow dynamic files target(format = \"file\") (#1168, #1127). Implement dynamic max_expand target--target basis via target() (#1175, @kendonB).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-11-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.11.0","text":"Assert dependencies formats beginning make(), drake_config() (#1156). make(verbose = 2), remove spinner use progress bar track many targets done far. Reduce logging utility functions. Improve aesthetics console messages using cli (optional package). Deprecate console_log_file favor log_make argument make() drake_config(). Immediately relay warnings messages \"loop\" \"future\" parallel backends (#400). Warn converting trailing dots (#1147). Warn imports trailing dots Windows (#1147). Allow user-defined caches loadd() RStudio addin new rstudio_drake_cache global option (#1169, @joelnitta). Change dynamic target finalization message “finalize” instead “aggregate” (#1176, @kendonB). Describe limits recoverable(), e.g. dynamic branching + dynamic files. Throw error instead warning drake_plan() grouping variable undefined invalid (#1182, @kendonB). Rigorous S3 framework static code analysis objects type drake_deps drake_deps_ht (#1183). Use rlang::trace_back() make diagnose()$error$calls nicer (#1198).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-7100","dir":"Changelog","previous_headings":"","what":"Version 7.10.0","title":"Version 7.10.0","text":"CRAN release: 2020-02-01","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"unavoidable-but-minor-breaking-changes-7-10-0","dir":"Changelog","previous_headings":"","what":"Unavoidable but minor breaking changes","title":"Version 7.10.0","text":"changes invalidate targets workflows, necessary bug fixes. Remove spurious local variables detected $<-() @<-() (#1144). Avoid target names trailing dots (#1147, @Plebejer).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.10.0","text":"Handle unequal list columns bind_plans() (#1136, @jennysjaarda). Handle non-vector sub-targets dynamic branching (#1138). Handle calls analyze_assign() (#1119, @jennysjaarda). Restore correct environment locking (#1143, @kuriwaki). Log \"running\" progress dynamic targets. Log dynamic targets failed sub-target fails (#1158).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.10.0","text":"Add new \"fst_tbl\" format large tibble targets (#1154, @kendonB). Add new format argument make(), optional custom storage format targets without explicit target(format = ...) plan (#1124). Add new lock_cache argument make() optionally suppress cache locking (#1129). (can annoying interrupt make() repeatedly unlock cache manually every time.) Add new functions cancel() cancel_if() function cancel targets mid-build (#1131). Add new subtarget_list argument loadd() readd() optionally load dynamic target list sub-targets (#1139, @MilesMcBain). Prohibit dynamic file_out() (#1141).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-10-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.10.0","text":"Check illegal formats early drake_config() level (#1156, @MilesMcBain). make() outdated() drake_build() drake_debug() recoverable() missed() deps_target() deps_profile() drake_graph_info() vis_drake_graph() sankey_drake_graph() drake_graph() text_drake_graph() predict_runtime(). Needed rename targets argument targets_predict jobs jobs_predict. predict_workers(). argument name changes predict_runtime(). #1118, remaining user-side purpose drake_config() serve functions r_make() friends. Document limitations grouping variables (#1128). Handle @ operator. example, static code analysis x@y, register y dependency (#1130, @famuvie). Remove superfluous/incorrect information imports output deps_profile() (#1134, @kendonB). Append hashes deps_target() output (#1134, @kendonB). Add S3 class pretty print method drake_meta_() objects objects. Use call stacks instead environment inheritance power drake_envir() id_chr() (#1132). Allow drake_envir() select environment imports (#882). Improve visualization labels dynamic targets: clarify listed runtime total runtime sub-targets list number sub-targets.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-790","dir":"Changelog","previous_headings":"","what":"Version 7.9.0","title":"Version 7.9.0","text":"CRAN release: 2020-01-08","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"breaking-changes-in-dynamic-branching-7-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes in dynamic branching","title":"Version 7.9.0","text":"Embrace vctrs paradigm type stability dynamic branching (#1105, #1106). Accept target symbol default read_trace(). Required trace make sense #1107.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.9.0","text":"Repair reference custom HPC resources \"future\" backend (#1083, @jennysjaarda). Properly copy data importing targets one cache another (#1120, @brendanf). Prevent dynamic vector sizes conflicting file sizes metadata.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.9.0","text":"Add new log_build_times argument make() drake_config(). Allows users disable recording build times. Produces speedup 20% Macs (#1078). Implement cache locking prohibit concurrent calls make(), outdated(make_imports = TRUE), recoverable(make_imports = TRUE), vis_drake_graph(make_imports = TRUE), clean(), etc. cache. Add new format trigger invalidate targets specialized data format changes (#1104, @kendonB). Add new functions cache_planned() cache_unplanned() help selectively clean workflows dynamic targets (#1110, @kendonB). Add S3 classes pretty print methods drake_config() objects analyze_code() objects. Add new \"qs\" format (#1121, @kendonB).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"speedups-7-9-0","dir":"Changelog","previous_headings":"","what":"Speedups","title":"Version 7.9.0","text":"Avoid setting seeds imports (#1086, @adamkski). Avoid working directly POSIXct times (#1086, @adamkski) Avoid excessive calls %||% (%|||% faster). (#1089, @billdenney) Remove %||NA due slowness (#1089, @billdenney). Use hash tables speed is_dynamic() is_subtarget() (#1089, @billdenney). Use getVDigest() instead digest() (#1089, #1092, https://github.com/eddelbuettel/digest/issues/139#issuecomment-561870289, @eddelbuettel, @billdenney). Pre-compute backtick .deparseOpts() speed deparse() (#1086, https://stackoverflow.com/users/516548/g-grothendieck, @adamkski). Pre-compute targets exist advance (#1095). Avoid gratuitous cache interactions data frame operations build_times() (#1098). Use mget_hash() progress() (#1098). Get target progress info drake_graph_info() (#1098). Speed retrieval old metadata outdated() (#1098). make(), avoid checking nonexistent metadata missing targets. Reduce logging drake_config().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-9-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.9.0","text":"Write complete project structure use_drake() (#1097, @lorenzwalthert, @tjmahr). Add minor logger note say many dynamic sub-targets registered time (#1102, @kendonB). Handle dependencies dynamic targets declared current target (#1107). Internally, “layout” data structure now called “workflow specification”, “spec” short. spec drake’s interpretation plan. plan, dependency relationships among targets files implicit. spec, explicit. get plan spec using static code analysis, e.g. analyze_code().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-780","dir":"Changelog","previous_headings":"","what":"Version 7.8.0","title":"Version 7.8.0","text":"CRAN release: 2019-12-02","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.8.0","text":"Prevent drake::drake_plan(x = target(...)) throwing error drake loaded (#1039, @mstr3336). Move transformations lifecycle badge proper location docstring (#1040, @jeroen). Prevent readd() / loadd() turning imported function target (#1067). Align -memory disk.frame targets stored values (#1077, @brendanf).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.8.0","text":"Implement dynamic branching (#685). Add new subtargets() function get cached names sub-targets dynamic target. Add new subtargets arguments loadd() readd() retrieve specific sub-targets parent dynamic target. Add new get_trace() read_trace() functions help track values grouping variables go making dynamic sub-targets. Add new id_chr() function get name target make() running. Implement plot(plan) (#1036). vis_drake_graph(), drake_graph_info(), render_drake_graph() now take arguments allow behavior defined upon selection nodes. (#1031,@mstr3336). Add new max_expand argument make() drake_config() scale dynamic branching (#1050, @hansvancalster).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-8-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.8.0","text":"Document transformation functions way avoids create true functions (#979). Avoid always invalidating memoized layout set knitr hash. Change names environments drake_config() objects. Assert prework language object, list language objects, character vector (#1 pat-s/multicore-debugging GitHub, @pat-s). Use environment instead list config$layout. Supports internal modifications reference. Required #685. Clean code parallel backends. Make dynamic formal argument target(). Always lock/unlock environment target target, allowing informative error messages appear readily (#1062, @PedramNavid) Automatically ignore storrs decorated storrs (#1071). Speed memory management avoiding call setdiff() avoiding names(config$envir_targets).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-770","dir":"Changelog","previous_headings":"","what":"Version 7.7.0","title":"Version 7.7.0","text":"CRAN release: 2019-10-15","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.7.0","text":"Take sum instead max dir_size(). Incurs rehashing workflows, invalidate targets.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.7.0","text":"Add new which_clean() function preview targets invalidated clean() (#1014, @pat-s). Add serious import export methods decorated storr (#1015, @billdenney, @noamross). Add new \"diskframe\" format larger--memory data (#1004, @xiaodaigh). Add new drake_tempfile() function help \"diskframe\" format. makes sure copying large datasets across different physical storage media (#1004, @xiaodaigh). Add new function code_to_function() allow parsing script based workflows functions drake_plan() can begin manage workflow track dependencies. (#994, @thebioengineer)","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-7-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.7.0","text":"Coerce seeds integers seed_trigger() (#1013, @CreRecombinase). Hard wrap long labels graph visuals (#1017). Nest history txtq API inside decorated storr API (#1020). Reduce cyclomatic complexity internal functions. Reduce retrievals old target metadata try improve performance (#1027).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-762","dir":"Changelog","previous_headings":"","what":"Version 7.6.2","title":"Version 7.6.2","text":"CRAN release: 2019-09-14","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-6-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.6.2","text":"Remove README.md CRAN altogether. Also remove links news vignette. links trigger many CRAN notes, made automated checks brittle. Serialize formats need serialization (like “keras”) sending data HPC workers main process (#989). Check custom-formatted files checking checksums. Force fst-formatted targets plain data frames. goes new “fst_dt” format. Change meaning behavior max_expand drake_plan(). max_expand now maximum number targets produced map(), split(), cross(). cross(), reduces number targets (less cumbersome) makes subsample targets representative complete grid. also. ensures consistent target naming .id FALSE (#1002). Note: max_expand production workflows anyway, change break anything important. Unfortunately, lose speed boost drake_plan() originally due max_expand, drake_plan() still fast, bad. Drop specialized formats NULL targets (#998). Prevent false grouping variables partially tagging along cross() (#1009). fix apply map() split() . Respect graph topology recovering old grouping variables map() (#1010).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-6-2","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.6.2","text":"Add new “fst_dt” format fst-powered saving data.table objects. Support custom “caching” column plan select main vs worker caching target individually (#988). Make transform formal argument target() users type “transform =” time drake_plan() (#993). Migrate documentation website ropensci.github.io/drake docs.ropensci.org/drake.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-6-2","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.6.2","text":"Document HPC limitations target(format = \"keras\") (#989). Remove now-superfluous vignette. Wrap console text file logging functionality reference class (#964). Deprecate verbose argument various caching functions. location cache now printed make(). made previous feature easier implement. Carry forward nested grouping variables combine() (#1008). Improve encapsulation hash tables decorated storr (#968).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-761","dir":"Changelog","previous_headings":"","what":"Version 7.6.1","title":"Version 7.6.1","text":"CRAN release: 2019-08-19","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-6-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.6.1","text":"CRAN hotfix: remove broken link README.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.6.0","text":"Make drake_plan(transform = slice()) understand .id grouping variables (#963). Repair clean(garbage_collection = TRUE, destroy = TRUE). Previously destroyed cache trying collect garbage. Ensure r_make() passes informative error messages back calling process (#969). Avoid downloading full contents URLs rehashing (#982) Retain upstream grouping variables map() cross() topologically side--side targets (#983). Manually enforce correct ordering dsl_left_outer_join() cross() selects right combinations existing targets (#986). bug probably introduced solution #983. Make output progress() consistent, less dependent whether tidyselect installed.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.6.0","text":"Support specialized data storage via decorated cache format argument target() (#971). allows users leverage faster ways save load targets, write_fst() data frames save_model_hdf5() Keras models. also improves memory prevents storr making serialized -memory copy large data objects. Add tidyselect functionality ... progress(), analogous loadd(), build_times(), clean(). Support S3 user-defined generics (#959). generic do_stuff() method stuff.your_class() defined envir, do_stuff() call UseMethod(\"stuff\"), drake’s code analysis detect stuff.your_class() dependency do_stuff(). Add authentication support file_in() URLs. Requires new curl_handles argument make() drake_config() (#981).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-6-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.6.0","text":"Document DSL keywords true functions: target(), map(), split(), cross(), combine() (#979). garbage collection unloading loading phases memory management. Keep file_out() files clean() unless garbage_collection TRUE. way, make(recover = TRUE) true “undo button” clean(). clean(garbage_collection = TRUE) still removes data cache, well file_out() files targets currently cleaned. menu clean() appears garbage_collection TRUE. Also, menu added rescue_cache(garbage_collection = TRUE). Reorganize internal code files functions make development easier. Move history inside cache folder .drake/. old .drake_history/ folder awkward. Old histories migrated drake_config(), drake_history(). Add lifecycle badges exported functions.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-752","dir":"Changelog","previous_headings":"","what":"Version 7.5.2","title":"Version 7.5.2","text":"CRAN release: 2019-07-21","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-5-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.5.2","text":"Eliminate accidental creations .drake_history plan_to_code(), plan_to_notebook(), examples help files.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.5.1","text":"Change .drake_history$ ^.drake_history$ .Rbuildignore appease CRAN checks. Repair help file examples.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.5.0","text":"Add automated data recovery (#945). still experimental disabled default. Requires make(recover = TRUE). Add new functions recoverable() r_recoverable() show targets outdated recoverable via make(recover = TRUE). Track history provenance targets, viewable drake_history(). Powered txtq (#918, #920). Add new no_deps() function, similar ignore(). no_deps() suppresses dependency detection still tracks changes literal code (#910). Add new “autoclean” memory strategy (#917). Export transform_plan(). Allow custom seed column drake plans set custom seeds (#947). Add new seed trigger optionally ignore changes target seed (#947).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-5-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.5.0","text":"drake_plan(), interpret custom columns non-language objects (#942). Suggest assert clustermq >= 0.8.8. Log target name special column console log file (#909). Rename “memory” memory strategy “preclean” (deprecation; #917). Deprecate ensure_workers drake_config() make(). Warn user supplies additional arguments make() config already supplied. Prevent users running make() inside cache (#927). Add CITATION file JOSS paper. deps_profile(), include seed change names. Allow user set different seed make(). invalidate old targets. Use set_hash() get_hash() storr double speed progress tracking.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.5.0","text":"static code analysis dependency detection, ignore list elements referenced $ (#938). Minor: handle strings embedded language objects (#934). Minor: supply xxhash64 default hash algorithm non-storr hashing driver hash algorithm.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-740","dir":"Changelog","previous_headings":"","what":"Version 7.4.0","title":"Version 7.4.0","text":"CRAN release: 2019-06-07","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"mildly-breaking-changes-7-4-0","dir":"Changelog","previous_headings":"","what":"Mildly breaking changes","title":"Version 7.4.0","text":"changes technically breaking changes, affect advanced users. rescue_cache() longer returns value.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.4.0","text":"Restore compatibility clustermq (#898). Suggest version >= 0.8.8 allow 0.8.7 well. Ensure drake recomputes config$layout knitr reports change (#887). rehash large imported files every make() (#878). Repair parsing long tidy eval inputs DSL (#878). Clear cache confusion custom cache exists adjacent default cache (#883). Accept targets symbols r_drake_build(). Log progress r_make() (#889). Repair expose_imports(): environment<- trick unless object non-primitive function. Use different static analyses assign() vs delayedAssign(). Fix superfluous code analysis warning incurred multiple file_in() files strings (#896). Make ignore() work inside loadd(), readd(), file_in(), file_out(), knitr_in().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.4.0","text":"Add experimental support URLs file_in() file_out(). drake now treats file_in()/file_out() files URLS begin “http://”, “https://”, “ftp://”. fingerprint concatenation ETag last-modified timestamp. neither can found internet connection, drake throws error. Implement new memory management strategies \"unload\" \"none\", attempt load target’s dependencies memory (#897). Allow users give target memory strategy (#897). Add drake_slice() help split data across multiple targets. Related: #77, #685, #833. Introduce new drake_cache() function, now recommended instead get_cache() (#883). Introduce new r_deps_target() function. Add RStudio addins r_make(), r_vis_drake_graph(), r_outdated() (#892).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-4-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.4.0","text":"Deprecate get_cache() favor drake_cache(). Show path cache clean() menu prompt. Stop removing console log file call drake_config(). Log node name (short host name) process ID console log file. Log name calling function console log file, e.g. “begin make()” “end make()”. Applies functions accept config argument. Memory management: set use_cache FALSE storr function calls saving loading targets. Also, end make(), call flush_cache() (gc() garbage collection enabled). Mention callr::r() within commands safe alternative lock_envir = FALSE self-invalidation section make() help file. Use file size help decide rehash file_in()/file_out()/knitr_in() files. now rehash files file less 100 KB time stamp changed file size changed.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-730","dir":"Changelog","previous_headings":"","what":"Version 7.3.0","title":"Version 7.3.0","text":"CRAN release: 2019-05-19","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.3.0","text":"Accommodate rlang’s new interpolation operator {{, causing make() fail drake_plan() commands enclosed curly braces (#864). Move “config$lock_envir <- FALSE” loop_build() backend_loop(). makes sure config$envir correctly locked make(parallelism = \"clustermq\"). Convert factors characters optional .data argument map() cross() DSL. DSL drake_plan(), repair cross(.data = !!args), args optional data frame grouping variables. Handle trailing slashes file_in()/file_out() directories Windows (#855). Make .id_chr work combine() DSL (#867). try make_spinner() unless version cli least 1.1.0.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.3.0","text":"Add functions text_drake_graph() (r_text_drake_graph() render_text_drake_graph()). Uses text art print dependency graph terminal window. Handy users SSH remote machines without X Window support. Add new max_expand argument drake_plan(), optional upper bound lengths grouping variables map() cross() DSL. Comes handy massive number targets want test miniature version workflow scale production.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-3-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.3.0","text":"Delay initialization clustermq workers long possible. launching , build/check targets locally reach outdated target hpc equal FALSE. words, targets actually require clustermq workers, workers get created. make(parallelism = \"future\"), reset config$sleep() backoff interval whenever new target gets checked. Add “done” message console log file workflow completed. Replace CodeDepends base R solution code_to_plan(). Fixes CRAN note. DSL (transformations drake_plan()) longer experimental. callr API (r_make() friends) longer experimental. Deprecate wildcard/text-based functions creating plans: evaluate_plan(), expand_plan(), map_plan(), gather_plan(), gather_by(), reduce_plan(), reduce_by(). Change deprecated functions defunct: deps(), max_useful_jobs(), migrate_drake_project().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-720","dir":"Changelog","previous_headings":"","what":"Version 7.2.0","title":"Version 7.2.0","text":"CRAN release: 2019-04-19","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"mildly-breaking-changes-7-2-0","dir":"Changelog","previous_headings":"","what":"Mildly breaking changes","title":"Version 7.2.0","text":"DSL (e.g. drake_plan(x = target(..., transform = map(...))) avoid inserting extra dots target names grouping variables character vectors (#847). Target names come much nicer way, name changes invalidate targets (.e. need rebuilt make()).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.2.0","text":"Use config$jobs_preprocess (local jobs) several places drake incorrectly using config$jobs (meant targets). Allow loadd(x, deps = TRUE, config = your_config) work even x cached (#830). Required disabling tidyselect functionality deps TRUE. new note help file , informative console message prints loadd(deps = TRUE, tidyselect = TRUE). default value tidyselect now !deps. Minor: avoid printing messages warnings twice console (#829). Ensure compatibility testthat >= 2.0.1.9000.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.2.0","text":"drake_plan() transformations, allow user refer target’s name using special .id_chr symbol, treated like character string. Add transparency argument drake_ggraph() render_drake_ggraph() disable transparency rendered graph. Useful R installations without transparency support.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.2.0","text":"Use custom layout improve node positions aspect ratios vis_drake_graph() drake_ggraph() displays. activated vis_drake_graph() least 10 nodes distributed vertical horizontal directions. Allow nodes dragged vertically horizontally vis_drake_graph() render_drake_graph(). Prevent dots showing target names supply grouping variables transforms drake_plan() (#847). keep drake plans (drake_plan()) inside drake_config() objects. bottlenecks removed, reduce burden memory (re #800). retain targets argument inside drake_config() objects. reduce memory consumption. Deprecate layout direction arguments vis_drake_graph() render_drake_graph(). Direction now always left right layout always Sugiyama. Write cache log file CSV format (now drake_cache.csv default) avoid issues spaces (e.g. entry names spaces , “file report.Rmd”)`.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-710","dir":"Changelog","previous_headings":"","what":"Version 7.1.0","title":"Version 7.1.0","text":"CRAN release: 2019-04-07","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.1.0","text":"drake 7.0.0, run make() interactive mode respond menu prompt option 1 2, targets still build. Make sure file outputs show drake_graph(). bug came append_output_file_nodes(), utility function drake_graph_info(). Repair r_make(r_fn = callr::r_bg()) re #799. Allow drake_ggraph() sankey_drake_graph() work graph edges.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.1.0","text":"Add new use_drake() function write make.R _drake.R files “main example”. write supporting scripts. optional logical hpc column drake_plan(), can now select targets deploy HPC run locally. Add list argument build_times(), just like loadd(). Add new RStudio addin: ‘loadd target cursor’ can bound keyboard shortcut load target identified symbol cursor position global environment.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-1-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.1.0","text":"file_in() file_out() can now handle entire directories, e.g. file_in(\"your_folder_of_input_data_files\") file_out(\"directory_with_a_bunch_of_output_files\"). Send less data config HPC workers. Hide node labels default render arrows behind nodes. Print informative error message user supplies drake plan config argument function. default, use gray arrows black--white background gridlines. map() cross() transformations DSL, prevent accidental sorting targets name (#786). Needed merge(sort = FALSE) dsl_left_outer_join(). Simplify verbosity. verbose argument make() now takes values 0, 1, 2, maximum verbosity console prints targets, retries, failures, spinner. console log file, hand, dumps maximally verbose runtime info regardless verbose argument. previous versions, functions generated f <- Rcpp::cppFunction(...) stay date session session addresses corresponding anonymous pointers showing deparse(f). Now, drake ignores pointers, Rcpp functions compiled inline appear stay date. problem edge case bug. Prepend time stamps sub-second times lines console log file. drake_plan(), deprecate tidy_evaluation argument favor new concise tidy_eval. preserve back compatibility now, supply non-NULL value tidy_evaluation, overwrites tidy_eval. Reduce object size drake_config() objects assigning closure config$sleep baseenv().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-700","dir":"Changelog","previous_headings":"","what":"Version 7.0.0","title":"Version 7.0.0","text":"CRAN release: 2019-03-10","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"breaking-changes-7-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"Version 7.0.0","text":"enhancements increase cache access speed also invalidate targets old projects. Workflows built drake <= 6.2.1 need run scratch . drake plans, command trigger columns now lists language objects instead character vectors. make() friends still work character columns, default output drake_plan() changed new format. parallel backends (parallelism argument make()) except “clustermq” “future” removed. new “loop” backend covers local serial execution. large amount deprecated functionality now defunct, including several functions (built(), find_project(), imported(), parallel_stages(); full list #564) single-quoted file API. Set default value lock_envir TRUE make() drake_config(). make() automatically quit error act building target tries change upstream dependencies. make() longer returns value. Users need call drake_config() separately get old return value make(). Require jobs argument length 1 (make() drake_config()). parallelize imports preprocessing steps, use jobs_preprocess, also length 1. Get rid “kernels” storr namespace. result, drake faster, users longer able load imported functions using loadd() readd(). target(), users must now explicitly name arguments except command, e.g. target(f(x), trigger = trigger(condition = TRUE)) instead target(f(x), trigger(condition = TRUE)). Fail right away bind_plans() result duplicated target names. makes drake’s API predictable helps users catch malformed workflows earlier. loadd() loads targets listed plan. longer loads imports file hashes. return values progress(), deps_code(), deps_target(), predict_workers() now data frames. Change default value hover FALSE visualization functions. Improves speed.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-7-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 7.0.0","text":"Allow bind_plans() work lists plans (bind_plans(list(plan1, plan2)) returning NULL drake 6.2.0 6.2.1). Ensure get_cache(path = \"non/default/path\", search = FALSE) looks cache \"non/default/path\" instead getwd(). Remove strict dependencies package tibble. Pass correct data structure ensure_loaded() meta.R triggers.R ensuring dependencies condition change triggers loaded. Require config argument drake_build() loadd(deps = TRUE).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-7-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 7.0.0","text":"Introduce new experimental domain-specific language generating large plans (#233). Details “Plans” chapter manual. Implement lock_envir argument safeguard reproducibility. discussion: #619, #620. new from_plan() function allows users reference custom plan columns within commands. Changes values columns columns invalidate targets. Add menu prompt (#762) safeguard make() pitfalls interactive mode (#761). Appears per session. Disable options(drake_make_menu = FALSE). Add new API functions r_make(), r_outdated(), etc. run drake functions reproducibly clean session. See help file r_make() details. progress() gains progress argument filtering results. example, progress(progress = \"failed\") report targets failed.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-7-0-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 7.0.0","text":"Large speed boost: move away storr’s key mangling favor drake’s encoding file paths namespaced functions storr keys. Exclude symbols ., .., .gitignore target names (consequence ). Use one hash algorithm per drake cache, user can set hash_algorithm argument new_cache(), storr::storr_rds(), various cache functions. Thus, concepts “short hash algorithm” “long hash algorithm” deprecated, functions long_hash(), short_hash(), default_long_hash_algo(), default_short_hash_algo(), available_hash_algos() deprecated. Caches still back-compatible drake > 5.4.0 <= 6.2.1. Allow magrittr dot symbol appear commands sometimes. Deprecate fetch_cache argument functions. Remove packages DBI RSQLite “Suggests”. Define special config$eval <- new.env(parent = config$envir) storing built targets evaluating commands plan. Now, make() longer modifies user’s environment. move long-overdue step toward purity. Remove dependency codetools package. Deprecate remove session argument make() drake_config(). Details: #623. Deprecate graph layout arguments make() drake_config(). change simplifies internals, memoization allows us . Warn user running make() subdirectory drake project root (determined location .drake folder relation working directory). code analysis, explicitly prohibit targets dependencies imported functions. Increase options verbose argument, including option print execution total build times. Separate building targets processing imports. Imports processed rudimentary staged parallelism (mclapply() parLapply(), depending operating system). Ignore imports comes build times. Functions build_times(), predict_runtime(), etc. focus targets. Deprecate many API functions, including plan_analyses(), plan_summaries(), analysis_wildcard(), cache_namespaces(), cache_path(), check_plan(), dataset_wildcard(), drake_meta(), drake_palette(), drake_tip(), recover_cache(), cleaned_namespaces(), target_namespaces(), read_drake_config(), read_drake_graph(), read_drake_plan(). Deprecate target() user-side function. now , called within drake_plan(). drake_envir() now throws error, warning, called incorrect context. called inside commands user’s drake plan. Replace *expr*() rlang functions *quo*() counterparts. still keep rlang::expr() places know expressions need evaluated config$eval. prework argument make() drake_config() can now expression (language object) list expressions. Character vectors still acceptable. end make(), print messages triggers etc. verbose >= 2L. Deprecate rename in_progress() running(). Deprecate rename knitr_deps() deps_knitr(). Deprecate rename dependency_profile() deps_profile(). Deprecate rename predict_load_balancing() predict_workers(). Deprecate this_cache() defer get_cache() storr::storr_rds() simplicity. Change default value hover FALSE visualization functions. Improves speed. Also breaking change. Deprecate drake_cache_log_file(). recommend using make() cache_log_file argument create cache log. way ensures log always date make() results.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-621","dir":"Changelog","previous_headings":"","what":"Version 6.2.1","title":"Version 6.2.1","text":"CRAN release: 2018-12-10 Version 6.2.1 hotfix address failing automated CRAN checks 6.2.0. Chiefly, CRAN’s Debian R-devel (2018-12-10) check platform, errors form “length > 1 coercion logical” occurred either argument && || length 1 (e.g. nzchar(letters) && length(letters)). addition fixing errors, version 6.2.1 also removes problematic link vignette.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-6-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 6.2.0","text":"Add sep argument gather_by(), reduce_by(), reduce_plan(), evaluate_plan(), expand_plan(), plan_analyses(), plan_summaries(). Allows user set delimiter generating new target names. Expose hasty_build argument make() drake_config(). , user can set function builds targets “hasty mode” (make(parallelism = \"hasty\")). Add new drake_envir() function returns environment drake builds targets. Can accessed inside commands workflow plan data frame. primary use case allow users remove individual targets memory predetermined build steps.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-6-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 6.2.0","text":"Ensure compatibility tibble 2.0.0. Stop returning 0s predict_runtime(targets_only = TRUE) targets outdated others . Remove sort(NULL) warnings create_drake_layout(). (Affects R-3.3.x.)","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-6-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 6.2.0","text":"Remove strict dependencies packages evaluate, formatR, fs, future, parallel, R.utils, stats, stringi. Large speed boost: reduce repeated calls parse() code_dependencies(). Large speed boost: change default value memory_strategy (previously pruning_strategy) \"speed\" (previously \"lookahead\"). Compute special data structure drake_config() (config$layout) just store code analysis results. intermediate structure workflow plan data frame graph. help clean internals future development. Improve memoized preprocessing: deparse functions environment memoization react spurious changes R internals. Related: #345. Use label argument future() inside make(parallelism = \"future\"). way , job names target names default job.name used correctly batchtools template file. Remove strict dependencies packages dplyr, evaluate, fs, future, magrittr, parallel, R.utils, stats, stringi, tidyselect, withr. Remove package rprojroot “Suggests”. Deprecate force argument functions except make() drake_config(). Change name prune_envir() manage_memory(). Deprecate rename pruning_strategy argument memory_strategy (make() drake_config()). Print warnings messages console_log_file real time (#588). Use HTML line breaks vis_drake_graph() hover text display commands drake plan elegantly. Speed predict_load_balancing() remove reliance internals go away 2019 via #561. Remove support worker column config$plan predict_runtime() predict_load_balancing(). functionality go away 2019 via #561. Change names return value predict_load_balancing() time workers. Bring documentation predict_runtime() predict_load_balancing() date. Deprecate drake_session() rename drake_get_session_info(). Deprecate timeout argument API make() drake_config(). value timeout can still passed functions without error, elapsed cpu arguments impose actual timeouts now.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-610","dir":"Changelog","previous_headings":"","what":"Version 6.1.0","title":"Version 6.1.0","text":"CRAN release: 2018-10-26","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-6-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 6.1.0","text":"Add new map_plan() function easily create workflow plan data frame execute function call grid arguments. Add new plan_to_code() function turn drake plans generic R scripts. New users can use function better understand relationship plans code, unsatisfied customers can use disentangle projects drake altogether. Similarly, plan_to_notebook() generates R notebook drake plan. Add new drake_debug() function run target’s command debug mode. Analogous drake_build(). Add mode argument trigger() control condition trigger factors decision build skip target. See ?trigger details. Add new sleep argument make() drake_config() help main process consume fewer resources parallel processing. Enable caching argument \"clustermq\" \"clustermq_staged\" parallel backends. Now, make(parallelism = \"clustermq\", caching = \"main\") caching main process, make(parallelism = \"clustermq\", caching = \"worker\") caching workers. true parallelism = \"clustermq_staged\". Add new append argument gather_plan(), gather_by(), reduce_plan(), reduce_by(). append argument control whether output includes original plan addition newly generated rows. Add new functions load_main_example(), clean_main_example(), clean_mtcars_example(). Add filter argument gather_by() reduce_by() order restrict gather even append TRUE. Add hasty mode: make(parallelism = \"hasty\") skips drake’s expensive caching checking. targets run every single time responsible saving results custom output files, almost -target overhead gone.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-6-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 6.1.0","text":"Ensure commands plan re-analyzed dependencies new imports added (#548). bug version 6.0.0 . Call path.expand() file argument render_drake_graph() render_sankey_drake_graph(). way, tildes file paths longer interfere rendering static image files. Skip tests examples required “Suggests” packages installed. Stop checking non-standard columns. Previously, warnings non-standard columns incorrectly triggered evaluate_plan(trace = TRUE) followed expand_plan(), gather_plan(), reduce_plan(), gather_by(), reduce_by(). relaxed behavior also gives users options construct maintain workflow plan data frames. Use checksums \"future\" parallelism make sure files travel network file systems proceeding downstream targets. Refactor clean checksum code. Skip tests checks optional visNetwork package installed.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-6-1-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 6.1.0","text":"Stop earlier make_targets() targets already date. Improve documentation seed argument make() drake_config(). Set default caching argument make() drake_config() \"main\" rather \"worker\". default option lower-overhead option small workflows. Users option make different set tradeoffs larger workflows. Allow condition trigger evaluate non-logical values long values can coerced logicals. Require condition trigger evaluate vector length 1. Keep non-standard columns drake_plan_source(). make(verbose = 4) now prints console target stored. gather_by() reduce_by() now gather/reduce everything columns specified. Change default parallelization imports. Previously, make(jobs = 4) equivalent make(jobs = c(imports = 4, targets = 4)). Now, make(jobs = 4) equivalent make(jobs = c(imports = 1, targets = 4)). See issue #553 details. Add console message building priority queue verbose least 2. Condense load_mtcars_example(). Deprecate hook argument make() drake_config(). gather_by() reduce_by(), exclude targets NA gathering variables.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-600","dir":"Changelog","previous_headings":"","what":"Version 6.0.0","title":"Version 6.0.0","text":"CRAN release: 2018-09-30","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"breaking-changes-6-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"Version 6.0.0","text":"Avoid serialization digest() wherever possible. puts old drake projects date, improves speed. Require R version >= 3.3.0 rather >= 3.2.0. Tests checks still run fine 3.3.0, required version stringi package longer compiles 3.2.0. discerning detecting dependencies. code_dependencies(), restrict possible global variables ones mentioned new globals argument (turned NULL. practical workflows, global dependencies restricted items envir proper targets plan. deps_code(), globals slot output list now list candidate globals, necessarily actual globals (may targets variables envir).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"bug-fixes-6-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Version 6.0.0","text":"call unlink() clean(), set recursive force FALSE. prevent accidental deletion whole directories. Previously, clean() deleted input-files targets plan cached. patch unit test included release. loadd(not_a_target) longer loads every target cache. Exclude target dependency metadata “deps” igraph vertex attribute (fixes #503). Detect inline code dependencies knitr_in() file code chunks. Remove calls sort(NULL) caused warnings R 3.3.3. Fix bug R 3.3.3 analyze_loadd() sometimes quitting “Error: attempt set attribute NULL”. call digest::digest(file = TRUE) directories. Instead, set hashes directories NA. Users still directories file dependencies. files declared dependencies custom triggers (“condition” “change”) include vis_drake_graph(). Previously, files missing visualization, actual workflows worked just fine. Work around mysterious codetools failures R 3.3 (add tryCatch() statement find_globals()).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"new-features-6-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Version 6.0.0","text":"Add proper clustermq-based parallel backend: make(parallelism = \"clustermq\"). evaluate_plan(trace = TRUE) now adds *_from column show origins evaluated targets. Try evaluate_plan(drake_plan(x = rnorm(n__), y = rexp(n__)), wildcard = \"n__\", values = 1:2, trace = TRUE). Add functions gather_by() reduce_by(), gather custom columns plan (columns generated evaluate_plan(trace = TRUE)) append new targets previous plan. Expose template argument clustermq functions (e.g. Q() workers()) argument make() drake_config(). Add new code_to_plan() function turn R scripts R Markdown reports workflow plan data frames. Add new drake_plan_source() function, generates lines code drake_plan() call. drake_plan() call produces plan passed drake_plan_source(). main purpose visual inspection (even syntax highlighting via prettycode) users may also save output script file sake reproducibility simple reference. Deprecate deps_targets() favor new deps_target() function (singular) behaves like deps_code().","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"enhancements-6-0-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"Version 6.0.0","text":"Smooth edges vis_drake_graph() render_drake_graph(). Make hover text slightly readable vis_drake_graph() render_drake_graph(). Align hover text properly vis_drake_graph() using “title” node column. Optionally collapse nodes clusters vis_drake_graph(collapse = TRUE). Improve dependency_profile() show major trigger hashes side--side tell user command, dependency, input file, output file changed since last make(). Choose appropriate places check txtq package installed. Improve help files loadd() readd(), giving specific usage guidance prose. Memoize steps build_drake_graph() print console ones execute. Skip tests txtq installed.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-540","dir":"Changelog","previous_headings":"","what":"Version 5.4.0","title":"Version 5.4.0","text":"CRAN release: 2018-08-07 Overhaul interface triggers add new trigger types (“condition” “change”). Offload drake’s code examples drake-examples GitHub repository make make drake_example() drake_examples() download examples . Optionally show output files graph visualizations. See show_output_files argument vis_drake_graph() friends. Repair output file checksum operations distributed backends like \"clustermq_staged\" \"future_lapply\". Internally refactor igraph attributes dependency graph allow smarter dependency/memory management make(). Enable vis_drake_graph() sankey_drake_graph() save static image files via webshot. Deprecate static_drake_graph() render_static_drake_graph() favor drake_ggraph() render_drake_ggraph(). Add columns argument evaluate_plan() users can evaluate wildcards columns command column plan. Name arguments target() users (explicitly). Lay groundwork special pretty print method workflow plan data frames.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-530","dir":"Changelog","previous_headings":"","what":"Version 5.3.0","title":"Version 5.3.0","text":"CRAN release: 2018-07-19 Allow multiple output files per command. Add Sankey diagram visuals: sankey_drake_graph() render_sankey_drake_graph(). Add static_drake_graph() render_static_drake_graph() ggplot2/ggraph static graph visualizations. Add group clusters arguments vis_drake_graph(), static_drake_graph(), drake_graph_info() optionally condense nodes clusters. Implement trace argument evaluate_plan() optionally add indicator columns show targets got expanded/evaluated wildcard values. Rename always_rename argument rename evaluate_plan(). Add rename argument expand_plan(). Implement make(parallelism = \"clustermq_staged\"), clustermq-based staged parallelism backend (see #452). Implement make(parallelism = \"future_lapply_staged\"), future-based staged parallelism backend (see #450). Depend codetools rather CodeDepends finding global variables. Detect loadd() readd() dependencies knitr reports referenced knitr_in() inside imported functions. Previously, feature available explicit knitr_in() calls commands. Skip tests CRAN. White-list tests instead blacklisting order try keep check time official 10-minute cap. Disallow wildcard names grep-match wildcard names replacement values. prevent careless mistakes confusion generating drake_plan()s. Prevent persistent workers hanging target fails. Move example template files inst/hpc_template_files. Deprecate drake_batchtools_tmpl_file() favor drake_hpc_template_file() drake_hpc_template_files(). Add garbage_collection argument make(). TRUE, gc() called every new build target. Remove redundant calls sanitize_plan() make(). Change tracked() accept drake_config() object argument. Yes, technically breaking change, small break, correct API choice. Move visualization hpc package dependencies “Suggests:” rather “Imports:” DESCRIPTION file. Allow processing codeless knitr reports without warnings.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-521","dir":"Changelog","previous_headings":"","what":"Version 5.2.1","title":"Version 5.2.1","text":"CRAN release: 2018-06-19 Skip several long-running low-priority tests CRAN.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-520","dir":"Changelog","previous_headings":"","what":"Version 5.2.0","title":"Version 5.2.0","text":"Sequester staged parallelism backends “mclapply_staged” “parLapply_staged”. lapply-like backends, drake uses persistent workers main process. case \"future_lapply\" parallelism, main process separate background process called Rscript. Remove appearance staged parallelism single-job make()’s. (Previously, “check” messages call staged_parallelism().) Remove remnants staged parallelism internals. Allow different parallel backends imports vs targets. example, make(parallelism = c(imports = \"mclapply_staged\", targets = \"mclapply\"). Fix bug environment pruning. Previously, dependencies downstream targets dropped memory make(jobs = 1). Now, kept memory downstream target needs (make(jobs = 1)). Improve predict_runtime(). sensible way go predicting runtimes multiple jobs. Likely accurate. Calls make() longer leave targets user’s environment. Attempt fix Solaris CRAN check error. test previously failing CRAN’s Solaris machine (R 3.5.0). test, one threads deliberately quits error, R/Solaris installation handle properly. test work now longer uses parallelism. Deprecate imports_only argument make() drake_config() favor skip_targets. Deprecate migrate_drake_project(). Deprecate max_useful_jobs(). non-distributed parallel backends, stop waiting imports finish targets begin. Add upstream_only argument failed() users can list failed targets failed dependencies. Naturally accompanies make(keep_going = TRUE). Add RStudio R Markdown template. Remove plyr dependency. Handle duplicated targets better drake_plan() bind_plans(). Add true function target() help create drake plans custom columns. drake_gc(), clean disruptive files storrs mangled keys (re: #198). Move vignettes coming user manual. Rename “basic example” “mtcars example”. Deprecate load_basic_example() favor load_mtcars_example(). Refocus README.md file main example rather mtcars example. Use README.Rmd file generate README.md. Add function deps_targets(). Deprecate function deps() favor deps_code() Add pruning_strategy argument make() drake_config() user can decide drake keeps non-import dependencies memory builds target. Add optional custom (experimental) “workers” “priorities” columns drake plans help users customize scheduling. Add makefile_path argument make() drake_config() avoid potential conflicts user-side custom Makefiles one written make(parallelism = \"Makefile\"). Document batch mode long workflows HPC guide. Add console argument make() drake_config() users can redirect console output file. Make easier user find target cache came : show_source(), readd(show_source = TRUE), loadd(show_source = TRUE).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-512","dir":"Changelog","previous_headings":"","what":"Version 5.1.2","title":"Version 5.1.2","text":"CRAN release: 2018-04-10 R 3.5.0, !! operator tidyeval rlang parsed differently R <= 3.4.4. change broke one tests tests/testthat/tidy-eval.R main purpose drake’s 5.1.2 release fix broken test. Fix elusive R CMD check error building pdf manual LaTeX. drake_plan(), allow users customize target-level columns using target() inside commands. Add new bind_plans() function concatenate rows drake plans sanitize aggregate plan. Add optional session argument tell make() build targets separate, isolated main R session. example, make(session = callr::r_vanilla).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-510","dir":"Changelog","previous_headings":"","what":"Version 5.1.0","title":"Version 5.1.0","text":"CRAN release: 2018-03-22 Add reduce_plan() function pairwise reductions collections targets. Forcibly exclude dot (.) dependency target import. enforces consistent behavior face current static code analysis functionality, sometimes detects . sometimes . Force drake track dependencies some_code, Ignore changes some_code comes deciding target date. Force drake look imports environments inheriting envir make() (plus explicitly namespaced functions). Force loadd() ignore foreign imports (imports explicitly found envir make() last imported ). Reduce default verbosity. targets printed default. Verbosity levels integers ranging 0 4. Change loadd() targets (imports) loaded ... list arguments empty. Add check drake_plan() check duplicate targets Add .gitignore file containing \"*\" default .drake/ cache folder every time new_cache() called. means cache automatically committed git. Users need remove .gitignore file allow unforced commits, subsequent make()s cache respect user’s wishes add another .gitignore. works default cache. supported manual storrs. Add new experimental \"future\" backend manual scheduler. Implement dplyr-style tidyselect functionality loadd(), clean(), build_times(). build_times(), API change: tidyselect work, needed insert new ... argument first argument build_times(). file_in() file inputs commands imported functions (imported functions, input file needs imported file, target). file_out() output file targets (ignored used imported functions). knitr_in() knitr/rmarkdown reports. tells drake look inside source file target dependencies code chunks (explicitly referenced loadd() readd()). Treated file_in() used imported functions. Change drake_plan() automatically fills target names user supply. Also, file_out()s become target names automatically (double-quoted internally). Make read_drake_plan() (rather empty drake_plan()) default plan argument functions accept plan. Add support active bindings: loadd(..., lazy = \"bind\"). way, target loaded one R session hit make() another R session, target first session automatically update. Use tibbles workflow plan data frames output dataframes_graph(). Return warnings, errors, context build, wrapped usual metadata. diagnose() take role returning metadata. Deprecate read_drake_meta() function favor diagnose(). Add new expose_imports() function optionally force drake detect deeply nested functions inside specific packages. Move “quickstart.Rmd” vignette “example-basic.Rmd”. -called “quickstart” didn’t end quick, basic example anyway. Move drake_build() exclusively user-side function. Add replace argument loadd() objects already user’s environment need replaced. graph cyclic, print cycles. Prune self-referential loops (duplicate edges) workflow graph. way, recursive functions allowed. Add seed argument make(), drake_config(), load_basic_example(). Also hard-code default seed 0. way, pseudo-randomness projects reproducible across R sessions. Cache pseudo-random seed time project created use seed build targets cache destroyed. Add new drake_read_seed() function read seed cache. examples illustrate drake try ensure reproducible random numbers. Evaluate quasiquotation operator !! ... argument drake_plan(). Suppress behavior using tidy_evaluation = FALSE passing commands passed list argument. Preprocess workflow plan commands rlang::expr() evaluating . means can use quasiquotation operator !! commands, make() evaluate according tidy evaluation paradigm. Restructure drake_example(\"basic\"), drake_example(\"gsp\"), drake_example(\"packages\") demonstrate set files serious drake projects. guidance needed light #193. Improve examples drake_plan() help file (?drake_plan).","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-500","dir":"Changelog","previous_headings":"","what":"Version 5.0.0","title":"Version 5.0.0","text":"CRAN release: 2018-01-26 Transfer drake rOpenSci GitHub URL. outdated() missed() rate_limiting_times() predict_runtime() vis_drake_graph() dataframes_graph() Always process imports building targets. part solution #168: imports targets processed together, full power parallelism taken away targets. Also, way parallelism happens now consistent parallel backends. Major speed improvement: dispense internal inventories rely cache$exists() instead. Let user define trigger target customize make() decides build targets. Document triggers debugging/testing tools new “debug” vignette. Restructure internals storr cache way back-compatible projects versions 4.4.0 earlier. main change make intelligent use storr namespaces, improving efficiency (time storage) opening possibilities new features. attempt run drake >= 5.0.0 project drake <= 4.0.0, drake stop damage cache done, instructed migrate project new drake. Use formatR::tidy_source() instead parse() tidy_command() (originally tidy() R/dependencies.R). Previously, drake problems edge case: command, literal string \"\" interpreted symbol tidying. tidy_source(), literal quoted strings stay literal quoted strings commands. may put targets date old projects, yet another loss back compatibility version 5.0.0. Speed clean() refactoring cache inventory using light parallelism. Implement rescue_cache(), exposed user used clean(). function removes dangling orphaned files cache broken cache can cleaned used usual ways . Change default cpu elapsed arguments make() NULL. solves elusive bug drake imposes timeouts. Allow users set target-level timeouts (overall, cpu, elapsed) columns workflow plan data frame. Document timeouts retries new “debug” vignette. Add new graph argument functions make(), outdated(), missed(). Export new prune_graph() function igraph objects. Delete long-deprecated functions prune() status(). analyses() => plan_analyses() as_file() => as_drake_filename() backend() => future::plan() build_graph() => build_drake_graph() check() => check_plan() config() => drake_config() evaluate() => evaluate_plan() example_drake() => drake_example() examples_drake() => drake_examples() expand() => expand_plan() gather() => gather_plan() plan(), workflow(), workplan() => drake_plan() plot_graph() => vis_drake_graph() read_config() => read_drake_config() read_graph() => read_drake_graph() read_plan() => read_drake_plan() render_graph() => render_drake_graph() session() => drake_session() summaries() => plan_summaries() Disallow output code names workflow plan data frame. Use target command instead. naming switch formally deprecated several months prior. Deprecate ..analysis.. ..dataset.. wildcards favor analysis__ dataset__, respectively. new wildcards stylistically better pass linting checks. Add new functions drake_quotes(), drake_unquote(), drake_strings() remove silly dependence eply package. Add skip_safety_checks flag make() drake_config(). Increases speed. sanitize_plan(), remove rows blank targets ““. Add purge argument clean() optionally remove target-level information. Add namespace argument cached() users can inspect individual storr namespaces. Change verbose numeric: 0 = print nothing, 1 = print progress imports , 2 = print everything. Add new next_stage() function report targets made next parallelizable stage. Add new session_info argument make(). Apparently, sessionInfo() bottleneck small make()s, now option suppress . mostly sake speeding unit tests. Add new log_progress argument make() suppress progress logging. increases storage efficiency speeds projects tiny bit. Add optional namespace argument loadd() readd(). can now load read non-default storr namespaces. Add drake_cache_log(), drake_cache_log_file(), make(..., cache_log_file = TRUE) options track changes targets/imports drake cache. Detect knitr code chunk dependencies response commands rmarkdown::render(), just knit(). Add new general best practices vignette clear misconceptions use drake properly.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-440","dir":"Changelog","previous_headings":"","what":"Version 4.4.0","title":"Version 4.4.0","text":"CRAN release: 2017-11-05 Extend plot_graph() display subcomponents. Check arguments , mode, order, subset. graph visualization vignette demonstrations. Add \"future_lapply\" parallelism: parallel backends supported future future.batchtools packages. See ?backend examples parallelism vignette introductory tutorial. advanced instruction can found future future.batchtools packages . Cache diagnostic information targets fail retrieve diagnostic info diagnose(). Add optional hook argument make() wrap around build(). way, users can easily control side effects distributed jobs. example, redirect error messages file make(..., parallelism = \"Makefile\", jobs = 2, hook = my_hook), my_hook something like function(code){withr::with_message_sink(\"messages.txt\", code)}. Remove console logging “parLapply” parallelism. drake previously using outfile argument PSOCK clusters generate output caught capture.output(). hack removed . Remove console logging “parLapply” parallelism. drake previously using outfile argument PSOCK clusters generate output caught capture.output(). hack removed . ‘verbose’ ‘TRUE’ targets already date (nothing build), make() outdated() print “targets already date” console. Add new examples ‘inst/examples’, demonstrating use \"future_lapply\" backends. New support timeouts retries comes building targets. Failed targets now recorded build process. can see plot_graph() progress(). Also see new failed() function, similar in_progress(). Speed overhead parLapply parallelism. downside fix drake properly installed. loaded devtools::load_all(). speedup comes lightening first clusterExport() call run_parLapply(). Previously, exported every single individual drake function workers, created bottleneck. Now, just load drake workers, works build() do_prework() exported. Change default value overwrite FALSE load_basic_example(). Warn overwriting existing report.Rmd load_basic_example(). Tell user location cache using console message. Happens every call get_cache(..., verbose = TRUE). Increase efficiency internal preprocessing via lightly_parallelize() lightly_parallelize_atomic(). Now, processing happens faster, unique values vector. Add new make_with_config() function work make() existing internal configuration list drake_config(). Add new function drake_batchtools_tmpl_file() write batchtools template file one examples (drake_example()), one exists.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-430-2017-10-17","dir":"Changelog","previous_headings":"","what":"Version 4.3.0: 2017-10-17","title":"Version 4.3.0: 2017-10-17","text":"CRAN release: 2017-10-18 Version 4.3.0 : - Reproducible random numbers (#56) - Automatic detection knitr dependencies (#9) - vignettes - Bug fixes","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-420-2017-09-29","dir":"Changelog","previous_headings":"","what":"Version 4.2.0: 2017-09-29","title":"Version 4.2.0: 2017-09-29","text":"CRAN release: 2017-09-29 Version 4.2.0 released today. several improvements code style performance. addition, new features cache/hash externalization runtime prediction. See new storage timing vignettes details. release automated checks back-compatibility existing projects, also manual back compatibility checks serious projects.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-300-2017-05-03","dir":"Changelog","previous_headings":"","what":"Version 3.0.0: 2017-05-03","title":"Version 3.0.0: 2017-05-03","text":"CRAN release: 2017-05-09 Version 3.0.0 coming . manages environments intelligently behavior make() consistent evaluating code interactive session.","code":""},{"path":"https://docs.ropensci.org/drake/news/index.html","id":"version-101-2017-02-28","dir":"Changelog","previous_headings":"","what":"Version 1.0.1: 2017-02-28","title":"Version 1.0.1: 2017-02-28","text":"CRAN release: 2017-02-27 Version 1.0.1 CRAN! ’m already working massive update, though. 2.0.0 cleaner powerful.","code":""}]
